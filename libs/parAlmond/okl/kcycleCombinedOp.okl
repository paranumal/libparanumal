/*

The MIT License (MIT)

Copyright (c) 2017-2022 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus, Rajesh Gandham

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/


// a.b, a.c, b.b
@kernel void kcycleCombinedOp1(const dlong Nblocks,
                               const dlong N,
                               @restrict const dfloat * a,
                               @restrict const dfloat * b,
                               @restrict const dfloat * c,
                               @restrict       dfloat * ips){

  for(dlong n=0;n<Nblocks;++n;@outer(0)){

    @shared dfloat s_ip[3*p_BLOCKSIZE];

    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)){
      dlong id = t + n*p_BLOCKSIZE;
      dfloat r_ip0 = 0.0;
      dfloat r_ip1 = 0.0;
      dfloat r_ip2 = 0.0;
      while (id<N) {
        const dfloat ai =  a[id];
        const dfloat bi =  b[id];
        const dfloat ci =  c[id];

        r_ip0 += ai*bi;
        r_ip1 += ai*ci;
        r_ip2 += bi*bi;
        id += p_BLOCKSIZE*Nblocks;
      }
      s_ip[0*p_BLOCKSIZE+t] = r_ip0;
      s_ip[1*p_BLOCKSIZE+t] = r_ip1;
      s_ip[2*p_BLOCKSIZE+t] = r_ip2;
    }

#if p_BLOCKSIZE>512
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<512) {
        s_ip[0*p_BLOCKSIZE+t] += s_ip[0*p_BLOCKSIZE+t+512];
        s_ip[1*p_BLOCKSIZE+t] += s_ip[1*p_BLOCKSIZE+t+512];
        s_ip[2*p_BLOCKSIZE+t] += s_ip[2*p_BLOCKSIZE+t+512];
      }
    }
#endif
#if p_BLOCKSIZE>256
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<256) {
        s_ip[0*p_BLOCKSIZE+t] += s_ip[0*p_BLOCKSIZE+t+256];
        s_ip[1*p_BLOCKSIZE+t] += s_ip[1*p_BLOCKSIZE+t+256];
        s_ip[2*p_BLOCKSIZE+t] += s_ip[2*p_BLOCKSIZE+t+256];
      }
    }
#endif
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<128) {
        s_ip[0*p_BLOCKSIZE+t] += s_ip[0*p_BLOCKSIZE+t+128];
        s_ip[1*p_BLOCKSIZE+t] += s_ip[1*p_BLOCKSIZE+t+128];
        s_ip[2*p_BLOCKSIZE+t] += s_ip[2*p_BLOCKSIZE+t+128];
      }
    }
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<64) {
        s_ip[0*p_BLOCKSIZE+t] += s_ip[0*p_BLOCKSIZE+t+64];
        s_ip[1*p_BLOCKSIZE+t] += s_ip[1*p_BLOCKSIZE+t+64];
        s_ip[2*p_BLOCKSIZE+t] += s_ip[2*p_BLOCKSIZE+t+64];
      }
    }
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<32) {
        s_ip[0*p_BLOCKSIZE+t] += s_ip[0*p_BLOCKSIZE+t+32];
        s_ip[1*p_BLOCKSIZE+t] += s_ip[1*p_BLOCKSIZE+t+32];
        s_ip[2*p_BLOCKSIZE+t] += s_ip[2*p_BLOCKSIZE+t+32];
      }
    }
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<16) {
        s_ip[0*p_BLOCKSIZE+t] += s_ip[0*p_BLOCKSIZE+t+16];
        s_ip[1*p_BLOCKSIZE+t] += s_ip[1*p_BLOCKSIZE+t+16];
        s_ip[2*p_BLOCKSIZE+t] += s_ip[2*p_BLOCKSIZE+t+16];
      }
    }
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<8) {
        s_ip[0*p_BLOCKSIZE+t] += s_ip[0*p_BLOCKSIZE+t+8];
        s_ip[1*p_BLOCKSIZE+t] += s_ip[1*p_BLOCKSIZE+t+8];
        s_ip[2*p_BLOCKSIZE+t] += s_ip[2*p_BLOCKSIZE+t+8];
      }
    }
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<4) {
        s_ip[0*p_BLOCKSIZE+t] += s_ip[0*p_BLOCKSIZE+t+4];
        s_ip[1*p_BLOCKSIZE+t] += s_ip[1*p_BLOCKSIZE+t+4];
        s_ip[2*p_BLOCKSIZE+t] += s_ip[2*p_BLOCKSIZE+t+4];
      }
    }
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<2) {
        s_ip[0*p_BLOCKSIZE+t] += s_ip[0*p_BLOCKSIZE+t+2];
        s_ip[1*p_BLOCKSIZE+t] += s_ip[1*p_BLOCKSIZE+t+2];
        s_ip[2*p_BLOCKSIZE+t] += s_ip[2*p_BLOCKSIZE+t+2];
      }
    }
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<1) {
        ips[3*n+0] = s_ip[0*p_BLOCKSIZE+0] + s_ip[0*p_BLOCKSIZE+t+1];
        ips[3*n+1] = s_ip[1*p_BLOCKSIZE+0] + s_ip[1*p_BLOCKSIZE+t+1];
        ips[3*n+2] = s_ip[2*p_BLOCKSIZE+0] + s_ip[2*p_BLOCKSIZE+t+1];
      }
    }
  }

  for(dlong n=0;n<1;++n;@outer(0)){

    @shared dfloat s_ip[3*p_BLOCKSIZE];

    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)){
      dlong id = t;
      dfloat r_ip0 = 0.0;
      dfloat r_ip1 = 0.0;
      dfloat r_ip2 = 0.0;
      while (id<Nblocks) {
        r_ip0 += ips[3*id+0];
        r_ip1 += ips[3*id+1];
        r_ip2 += ips[3*id+2];
        id += p_BLOCKSIZE;
      }
      s_ip[0*p_BLOCKSIZE+t] = r_ip0;
      s_ip[1*p_BLOCKSIZE+t] = r_ip1;
      s_ip[2*p_BLOCKSIZE+t] = r_ip2;
    }

#if p_BLOCKSIZE>512
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<512) {
        s_ip[0*p_BLOCKSIZE+t] += s_ip[0*p_BLOCKSIZE+t+512];
        s_ip[1*p_BLOCKSIZE+t] += s_ip[1*p_BLOCKSIZE+t+512];
        s_ip[2*p_BLOCKSIZE+t] += s_ip[2*p_BLOCKSIZE+t+512];
      }
    }
#endif
#if p_BLOCKSIZE>256
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<256) {
        s_ip[0*p_BLOCKSIZE+t] += s_ip[0*p_BLOCKSIZE+t+256];
        s_ip[1*p_BLOCKSIZE+t] += s_ip[1*p_BLOCKSIZE+t+256];
        s_ip[2*p_BLOCKSIZE+t] += s_ip[2*p_BLOCKSIZE+t+256];
      }
    }
#endif
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<128) {
        s_ip[0*p_BLOCKSIZE+t] += s_ip[0*p_BLOCKSIZE+t+128];
        s_ip[1*p_BLOCKSIZE+t] += s_ip[1*p_BLOCKSIZE+t+128];
        s_ip[2*p_BLOCKSIZE+t] += s_ip[2*p_BLOCKSIZE+t+128];
      }
    }
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<64) {
        s_ip[0*p_BLOCKSIZE+t] += s_ip[0*p_BLOCKSIZE+t+64];
        s_ip[1*p_BLOCKSIZE+t] += s_ip[1*p_BLOCKSIZE+t+64];
        s_ip[2*p_BLOCKSIZE+t] += s_ip[2*p_BLOCKSIZE+t+64];
      }
    }
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<32) {
        s_ip[0*p_BLOCKSIZE+t] += s_ip[0*p_BLOCKSIZE+t+32];
        s_ip[1*p_BLOCKSIZE+t] += s_ip[1*p_BLOCKSIZE+t+32];
        s_ip[2*p_BLOCKSIZE+t] += s_ip[2*p_BLOCKSIZE+t+32];
      }
    }
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<16) {
        s_ip[0*p_BLOCKSIZE+t] += s_ip[0*p_BLOCKSIZE+t+16];
        s_ip[1*p_BLOCKSIZE+t] += s_ip[1*p_BLOCKSIZE+t+16];
        s_ip[2*p_BLOCKSIZE+t] += s_ip[2*p_BLOCKSIZE+t+16];
      }
    }
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<8) {
        s_ip[0*p_BLOCKSIZE+t] += s_ip[0*p_BLOCKSIZE+t+8];
        s_ip[1*p_BLOCKSIZE+t] += s_ip[1*p_BLOCKSIZE+t+8];
        s_ip[2*p_BLOCKSIZE+t] += s_ip[2*p_BLOCKSIZE+t+8];
      }
    }
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<4) {
        s_ip[0*p_BLOCKSIZE+t] += s_ip[0*p_BLOCKSIZE+t+4];
        s_ip[1*p_BLOCKSIZE+t] += s_ip[1*p_BLOCKSIZE+t+4];
        s_ip[2*p_BLOCKSIZE+t] += s_ip[2*p_BLOCKSIZE+t+4];
      }
    }
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<2) {
        s_ip[0*p_BLOCKSIZE+t] += s_ip[0*p_BLOCKSIZE+t+2];
        s_ip[1*p_BLOCKSIZE+t] += s_ip[1*p_BLOCKSIZE+t+2];
        s_ip[2*p_BLOCKSIZE+t] += s_ip[2*p_BLOCKSIZE+t+2];
      }
    }
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<1) {
        ips[0] = s_ip[0*p_BLOCKSIZE+0] + s_ip[0*p_BLOCKSIZE+t+1];
        ips[1] = s_ip[1*p_BLOCKSIZE+0] + s_ip[1*p_BLOCKSIZE+t+1];
        ips[2] = s_ip[2*p_BLOCKSIZE+0] + s_ip[2*p_BLOCKSIZE+t+1];
      }
    }
  }
}

// a.b, a.c, b.b
@kernel void kcycleCombinedOp2(const dlong Nblocks,
                               const dlong N,
                               @restrict const dfloat * a,
                               @restrict const dfloat * b,
                               @restrict const dfloat * c,
                               @restrict const dfloat * d,
                               @restrict       dfloat * ips){

  for(dlong n=0;n<Nblocks;++n;@outer(0)){

    @shared dfloat s_ip[3*p_BLOCKSIZE];

    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)){
      dlong id = t + n*p_BLOCKSIZE;
      dfloat r_ip0 = 0.0;
      dfloat r_ip1 = 0.0;
      dfloat r_ip2 = 0.0;
      while (id<N) {
        const dfloat ai =  a[id];
        const dfloat bi =  b[id];
        const dfloat ci =  c[id];
        const dfloat di =  d[id];

        r_ip0 += ai*bi;
        r_ip1 += ai*ci;
        r_ip2 += ai*di;
        id += p_BLOCKSIZE*Nblocks;
      }
      s_ip[0*p_BLOCKSIZE+t] = r_ip0;
      s_ip[1*p_BLOCKSIZE+t] = r_ip1;
      s_ip[2*p_BLOCKSIZE+t] = r_ip2;
    }

#if p_BLOCKSIZE>512
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<512) {
        s_ip[0*p_BLOCKSIZE+t] += s_ip[0*p_BLOCKSIZE+t+512];
        s_ip[1*p_BLOCKSIZE+t] += s_ip[1*p_BLOCKSIZE+t+512];
        s_ip[2*p_BLOCKSIZE+t] += s_ip[2*p_BLOCKSIZE+t+512];
      }
    }
#endif
#if p_BLOCKSIZE>256
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<256) {
        s_ip[0*p_BLOCKSIZE+t] += s_ip[0*p_BLOCKSIZE+t+256];
        s_ip[1*p_BLOCKSIZE+t] += s_ip[1*p_BLOCKSIZE+t+256];
        s_ip[2*p_BLOCKSIZE+t] += s_ip[2*p_BLOCKSIZE+t+256];
      }
    }
#endif
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<128) {
        s_ip[0*p_BLOCKSIZE+t] += s_ip[0*p_BLOCKSIZE+t+128];
        s_ip[1*p_BLOCKSIZE+t] += s_ip[1*p_BLOCKSIZE+t+128];
        s_ip[2*p_BLOCKSIZE+t] += s_ip[2*p_BLOCKSIZE+t+128];
      }
    }
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<64) {
        s_ip[0*p_BLOCKSIZE+t] += s_ip[0*p_BLOCKSIZE+t+64];
        s_ip[1*p_BLOCKSIZE+t] += s_ip[1*p_BLOCKSIZE+t+64];
        s_ip[2*p_BLOCKSIZE+t] += s_ip[2*p_BLOCKSIZE+t+64];
      }
    }
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<32) {
        s_ip[0*p_BLOCKSIZE+t] += s_ip[0*p_BLOCKSIZE+t+32];
        s_ip[1*p_BLOCKSIZE+t] += s_ip[1*p_BLOCKSIZE+t+32];
        s_ip[2*p_BLOCKSIZE+t] += s_ip[2*p_BLOCKSIZE+t+32];
      }
    }
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<16) {
        s_ip[0*p_BLOCKSIZE+t] += s_ip[0*p_BLOCKSIZE+t+16];
        s_ip[1*p_BLOCKSIZE+t] += s_ip[1*p_BLOCKSIZE+t+16];
        s_ip[2*p_BLOCKSIZE+t] += s_ip[2*p_BLOCKSIZE+t+16];
      }
    }
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<8) {
        s_ip[0*p_BLOCKSIZE+t] += s_ip[0*p_BLOCKSIZE+t+8];
        s_ip[1*p_BLOCKSIZE+t] += s_ip[1*p_BLOCKSIZE+t+8];
        s_ip[2*p_BLOCKSIZE+t] += s_ip[2*p_BLOCKSIZE+t+8];
      }
    }
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<4) {
        s_ip[0*p_BLOCKSIZE+t] += s_ip[0*p_BLOCKSIZE+t+4];
        s_ip[1*p_BLOCKSIZE+t] += s_ip[1*p_BLOCKSIZE+t+4];
        s_ip[2*p_BLOCKSIZE+t] += s_ip[2*p_BLOCKSIZE+t+4];
      }
    }
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<2) {
        s_ip[0*p_BLOCKSIZE+t] += s_ip[0*p_BLOCKSIZE+t+2];
        s_ip[1*p_BLOCKSIZE+t] += s_ip[1*p_BLOCKSIZE+t+2];
        s_ip[2*p_BLOCKSIZE+t] += s_ip[2*p_BLOCKSIZE+t+2];
      }
    }
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<1) {
        ips[3*n+0] = s_ip[0*p_BLOCKSIZE+0] + s_ip[0*p_BLOCKSIZE+t+1];
        ips[3*n+1] = s_ip[1*p_BLOCKSIZE+0] + s_ip[1*p_BLOCKSIZE+t+1];
        ips[3*n+2] = s_ip[2*p_BLOCKSIZE+0] + s_ip[2*p_BLOCKSIZE+t+1];
      }
    }
  }

  for(dlong n=0;n<1;++n;@outer(0)){

    @shared dfloat s_ip[3*p_BLOCKSIZE];

    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)){
      dlong id = t;
      dfloat r_ip0 = 0.0;
      dfloat r_ip1 = 0.0;
      dfloat r_ip2 = 0.0;
      while (id<Nblocks) {
        r_ip0 += ips[3*id+0];
        r_ip1 += ips[3*id+1];
        r_ip2 += ips[3*id+2];
        id += p_BLOCKSIZE;
      }
      s_ip[0*p_BLOCKSIZE+t] = r_ip0;
      s_ip[1*p_BLOCKSIZE+t] = r_ip1;
      s_ip[2*p_BLOCKSIZE+t] = r_ip2;
    }

#if p_BLOCKSIZE>512
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<512) {
        s_ip[0*p_BLOCKSIZE+t] += s_ip[0*p_BLOCKSIZE+t+512];
        s_ip[1*p_BLOCKSIZE+t] += s_ip[1*p_BLOCKSIZE+t+512];
        s_ip[2*p_BLOCKSIZE+t] += s_ip[2*p_BLOCKSIZE+t+512];
      }
    }
#endif
#if p_BLOCKSIZE>256
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<256) {
        s_ip[0*p_BLOCKSIZE+t] += s_ip[0*p_BLOCKSIZE+t+256];
        s_ip[1*p_BLOCKSIZE+t] += s_ip[1*p_BLOCKSIZE+t+256];
        s_ip[2*p_BLOCKSIZE+t] += s_ip[2*p_BLOCKSIZE+t+256];
      }
    }
#endif
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<128) {
        s_ip[0*p_BLOCKSIZE+t] += s_ip[0*p_BLOCKSIZE+t+128];
        s_ip[1*p_BLOCKSIZE+t] += s_ip[1*p_BLOCKSIZE+t+128];
        s_ip[2*p_BLOCKSIZE+t] += s_ip[2*p_BLOCKSIZE+t+128];
      }
    }
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<64) {
        s_ip[0*p_BLOCKSIZE+t] += s_ip[0*p_BLOCKSIZE+t+64];
        s_ip[1*p_BLOCKSIZE+t] += s_ip[1*p_BLOCKSIZE+t+64];
        s_ip[2*p_BLOCKSIZE+t] += s_ip[2*p_BLOCKSIZE+t+64];
      }
    }
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<32) {
        s_ip[0*p_BLOCKSIZE+t] += s_ip[0*p_BLOCKSIZE+t+32];
        s_ip[1*p_BLOCKSIZE+t] += s_ip[1*p_BLOCKSIZE+t+32];
        s_ip[2*p_BLOCKSIZE+t] += s_ip[2*p_BLOCKSIZE+t+32];
      }
    }
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<16) {
        s_ip[0*p_BLOCKSIZE+t] += s_ip[0*p_BLOCKSIZE+t+16];
        s_ip[1*p_BLOCKSIZE+t] += s_ip[1*p_BLOCKSIZE+t+16];
        s_ip[2*p_BLOCKSIZE+t] += s_ip[2*p_BLOCKSIZE+t+16];
      }
    }
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<8) {
        s_ip[0*p_BLOCKSIZE+t] += s_ip[0*p_BLOCKSIZE+t+8];
        s_ip[1*p_BLOCKSIZE+t] += s_ip[1*p_BLOCKSIZE+t+8];
        s_ip[2*p_BLOCKSIZE+t] += s_ip[2*p_BLOCKSIZE+t+8];
      }
    }
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<4) {
        s_ip[0*p_BLOCKSIZE+t] += s_ip[0*p_BLOCKSIZE+t+4];
        s_ip[1*p_BLOCKSIZE+t] += s_ip[1*p_BLOCKSIZE+t+4];
        s_ip[2*p_BLOCKSIZE+t] += s_ip[2*p_BLOCKSIZE+t+4];
      }
    }
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<2) {
        s_ip[0*p_BLOCKSIZE+t] += s_ip[0*p_BLOCKSIZE+t+2];
        s_ip[1*p_BLOCKSIZE+t] += s_ip[1*p_BLOCKSIZE+t+2];
        s_ip[2*p_BLOCKSIZE+t] += s_ip[2*p_BLOCKSIZE+t+2];
      }
    }
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<1) {
        ips[0] = s_ip[0*p_BLOCKSIZE+0] + s_ip[0*p_BLOCKSIZE+t+1];
        ips[1] = s_ip[1*p_BLOCKSIZE+0] + s_ip[1*p_BLOCKSIZE+t+1];
        ips[2] = s_ip[2*p_BLOCKSIZE+0] + s_ip[2*p_BLOCKSIZE+t+1];
      }
    }
  }
}


// w.a.b, w.a.c, w.b.b
@kernel void kcycleWeightedCombinedOp1(const dlong Nblocks,
                                       const dlong N,
                                       @restrict const dfloat * a,
                                       @restrict const dfloat * b,
                                       @restrict const dfloat * c,
                                       @restrict const dfloat * w,
                                       @restrict       dfloat * ips){

  for(dlong n=0;n<Nblocks;++n;@outer(0)){

    @shared dfloat s_ip[3*p_BLOCKSIZE];

    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)){
      dlong id = t + n*p_BLOCKSIZE;
      dfloat r_ip0 = 0.0;
      dfloat r_ip1 = 0.0;
      dfloat r_ip2 = 0.0;
      while (id<N) {
        const dfloat ai =  a[id];
        const dfloat bi =  b[id];
        const dfloat ci =  c[id];
        const dfloat wi =  w[id];

        r_ip0 += wi*ai*bi;
        r_ip1 += wi*ai*ci;
        r_ip2 += wi*bi*bi;
        id += p_BLOCKSIZE*Nblocks;
      }
      s_ip[0*p_BLOCKSIZE+t] = r_ip0;
      s_ip[1*p_BLOCKSIZE+t] = r_ip1;
      s_ip[2*p_BLOCKSIZE+t] = r_ip2;
    }

#if p_BLOCKSIZE>512
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<512) {
        s_ip[0*p_BLOCKSIZE+t] += s_ip[0*p_BLOCKSIZE+t+512];
        s_ip[1*p_BLOCKSIZE+t] += s_ip[1*p_BLOCKSIZE+t+512];
        s_ip[2*p_BLOCKSIZE+t] += s_ip[2*p_BLOCKSIZE+t+512];
      }
    }
#endif
#if p_BLOCKSIZE>256
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<256) {
        s_ip[0*p_BLOCKSIZE+t] += s_ip[0*p_BLOCKSIZE+t+256];
        s_ip[1*p_BLOCKSIZE+t] += s_ip[1*p_BLOCKSIZE+t+256];
        s_ip[2*p_BLOCKSIZE+t] += s_ip[2*p_BLOCKSIZE+t+256];
      }
    }
#endif
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<128) {
        s_ip[0*p_BLOCKSIZE+t] += s_ip[0*p_BLOCKSIZE+t+128];
        s_ip[1*p_BLOCKSIZE+t] += s_ip[1*p_BLOCKSIZE+t+128];
        s_ip[2*p_BLOCKSIZE+t] += s_ip[2*p_BLOCKSIZE+t+128];
      }
    }
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<64) {
        s_ip[0*p_BLOCKSIZE+t] += s_ip[0*p_BLOCKSIZE+t+64];
        s_ip[1*p_BLOCKSIZE+t] += s_ip[1*p_BLOCKSIZE+t+64];
        s_ip[2*p_BLOCKSIZE+t] += s_ip[2*p_BLOCKSIZE+t+64];
      }
    }
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<32) {
        s_ip[0*p_BLOCKSIZE+t] += s_ip[0*p_BLOCKSIZE+t+32];
        s_ip[1*p_BLOCKSIZE+t] += s_ip[1*p_BLOCKSIZE+t+32];
        s_ip[2*p_BLOCKSIZE+t] += s_ip[2*p_BLOCKSIZE+t+32];
      }
    }
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<16) {
        s_ip[0*p_BLOCKSIZE+t] += s_ip[0*p_BLOCKSIZE+t+16];
        s_ip[1*p_BLOCKSIZE+t] += s_ip[1*p_BLOCKSIZE+t+16];
        s_ip[2*p_BLOCKSIZE+t] += s_ip[2*p_BLOCKSIZE+t+16];
      }
    }
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<8) {
        s_ip[0*p_BLOCKSIZE+t] += s_ip[0*p_BLOCKSIZE+t+8];
        s_ip[1*p_BLOCKSIZE+t] += s_ip[1*p_BLOCKSIZE+t+8];
        s_ip[2*p_BLOCKSIZE+t] += s_ip[2*p_BLOCKSIZE+t+8];
      }
    }
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<4) {
        s_ip[0*p_BLOCKSIZE+t] += s_ip[0*p_BLOCKSIZE+t+4];
        s_ip[1*p_BLOCKSIZE+t] += s_ip[1*p_BLOCKSIZE+t+4];
        s_ip[2*p_BLOCKSIZE+t] += s_ip[2*p_BLOCKSIZE+t+4];
      }
    }
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<2) {
        s_ip[0*p_BLOCKSIZE+t] += s_ip[0*p_BLOCKSIZE+t+2];
        s_ip[1*p_BLOCKSIZE+t] += s_ip[1*p_BLOCKSIZE+t+2];
        s_ip[2*p_BLOCKSIZE+t] += s_ip[2*p_BLOCKSIZE+t+2];
      }
    }
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<1) {
        ips[3*n+0] = s_ip[0*p_BLOCKSIZE+0] + s_ip[0*p_BLOCKSIZE+t+1];
        ips[3*n+1] = s_ip[1*p_BLOCKSIZE+0] + s_ip[1*p_BLOCKSIZE+t+1];
        ips[3*n+2] = s_ip[2*p_BLOCKSIZE+0] + s_ip[2*p_BLOCKSIZE+t+1];
      }
    }
  }

  for(dlong n=0;n<1;++n;@outer(0)){

    @shared dfloat s_ip[3*p_BLOCKSIZE];

    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)){
      dlong id = t;
      dfloat r_ip0 = 0.0;
      dfloat r_ip1 = 0.0;
      dfloat r_ip2 = 0.0;
      while (id<Nblocks) {
        r_ip0 += ips[3*id+0];
        r_ip1 += ips[3*id+1];
        r_ip2 += ips[3*id+2];
        id += p_BLOCKSIZE;
      }
      s_ip[0*p_BLOCKSIZE+t] = r_ip0;
      s_ip[1*p_BLOCKSIZE+t] = r_ip1;
      s_ip[2*p_BLOCKSIZE+t] = r_ip2;
    }

#if p_BLOCKSIZE>512
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<512) {
        s_ip[0*p_BLOCKSIZE+t] += s_ip[0*p_BLOCKSIZE+t+512];
        s_ip[1*p_BLOCKSIZE+t] += s_ip[1*p_BLOCKSIZE+t+512];
        s_ip[2*p_BLOCKSIZE+t] += s_ip[2*p_BLOCKSIZE+t+512];
      }
    }
#endif
#if p_BLOCKSIZE>256
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<256) {
        s_ip[0*p_BLOCKSIZE+t] += s_ip[0*p_BLOCKSIZE+t+256];
        s_ip[1*p_BLOCKSIZE+t] += s_ip[1*p_BLOCKSIZE+t+256];
        s_ip[2*p_BLOCKSIZE+t] += s_ip[2*p_BLOCKSIZE+t+256];
      }
    }
#endif
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<128) {
        s_ip[0*p_BLOCKSIZE+t] += s_ip[0*p_BLOCKSIZE+t+128];
        s_ip[1*p_BLOCKSIZE+t] += s_ip[1*p_BLOCKSIZE+t+128];
        s_ip[2*p_BLOCKSIZE+t] += s_ip[2*p_BLOCKSIZE+t+128];
      }
    }
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<64) {
        s_ip[0*p_BLOCKSIZE+t] += s_ip[0*p_BLOCKSIZE+t+64];
        s_ip[1*p_BLOCKSIZE+t] += s_ip[1*p_BLOCKSIZE+t+64];
        s_ip[2*p_BLOCKSIZE+t] += s_ip[2*p_BLOCKSIZE+t+64];
      }
    }
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<32) {
        s_ip[0*p_BLOCKSIZE+t] += s_ip[0*p_BLOCKSIZE+t+32];
        s_ip[1*p_BLOCKSIZE+t] += s_ip[1*p_BLOCKSIZE+t+32];
        s_ip[2*p_BLOCKSIZE+t] += s_ip[2*p_BLOCKSIZE+t+32];
      }
    }
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<16) {
        s_ip[0*p_BLOCKSIZE+t] += s_ip[0*p_BLOCKSIZE+t+16];
        s_ip[1*p_BLOCKSIZE+t] += s_ip[1*p_BLOCKSIZE+t+16];
        s_ip[2*p_BLOCKSIZE+t] += s_ip[2*p_BLOCKSIZE+t+16];
      }
    }
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<8) {
        s_ip[0*p_BLOCKSIZE+t] += s_ip[0*p_BLOCKSIZE+t+8];
        s_ip[1*p_BLOCKSIZE+t] += s_ip[1*p_BLOCKSIZE+t+8];
        s_ip[2*p_BLOCKSIZE+t] += s_ip[2*p_BLOCKSIZE+t+8];
      }
    }
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<4) {
        s_ip[0*p_BLOCKSIZE+t] += s_ip[0*p_BLOCKSIZE+t+4];
        s_ip[1*p_BLOCKSIZE+t] += s_ip[1*p_BLOCKSIZE+t+4];
        s_ip[2*p_BLOCKSIZE+t] += s_ip[2*p_BLOCKSIZE+t+4];
      }
    }
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<2) {
        s_ip[0*p_BLOCKSIZE+t] += s_ip[0*p_BLOCKSIZE+t+2];
        s_ip[1*p_BLOCKSIZE+t] += s_ip[1*p_BLOCKSIZE+t+2];
        s_ip[2*p_BLOCKSIZE+t] += s_ip[2*p_BLOCKSIZE+t+2];
      }
    }
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<1) {
        ips[0] = s_ip[0*p_BLOCKSIZE+0] + s_ip[0*p_BLOCKSIZE+t+1];
        ips[1] = s_ip[1*p_BLOCKSIZE+0] + s_ip[1*p_BLOCKSIZE+t+1];
        ips[2] = s_ip[2*p_BLOCKSIZE+0] + s_ip[2*p_BLOCKSIZE+t+1];
      }
    }
  }
}

// w.a.b, w.a.c, w.b.b
@kernel void kcycleWeightedCombinedOp2(const dlong Nblocks,
                                       const dlong N,
                                       @restrict const dfloat * a,
                                       @restrict const dfloat * b,
                                       @restrict const dfloat * c,
                                       @restrict const dfloat * d,
                                       @restrict const dfloat * w,
                                       @restrict       dfloat * ips){

  for(dlong n=0;n<Nblocks;++n;@outer(0)){

    @shared dfloat s_ip[3*p_BLOCKSIZE];

    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)){
      dlong id = t + n*p_BLOCKSIZE;
      dfloat r_ip0 = 0.0;
      dfloat r_ip1 = 0.0;
      dfloat r_ip2 = 0.0;
      while (id<N) {
        const dfloat ai =  a[id];
        const dfloat bi =  b[id];
        const dfloat ci =  c[id];
        const dfloat di =  d[id];
        const dfloat wi =  w[id];

        r_ip0 += wi*ai*bi;
        r_ip1 += wi*ai*ci;
        r_ip2 += wi*ai*di;
        id += p_BLOCKSIZE*Nblocks;
      }
      s_ip[0*p_BLOCKSIZE+t] = r_ip0;
      s_ip[1*p_BLOCKSIZE+t] = r_ip1;
      s_ip[2*p_BLOCKSIZE+t] = r_ip2;
    }

#if p_BLOCKSIZE>512
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<512) {
        s_ip[0*p_BLOCKSIZE+t] += s_ip[0*p_BLOCKSIZE+t+512];
        s_ip[1*p_BLOCKSIZE+t] += s_ip[1*p_BLOCKSIZE+t+512];
        s_ip[2*p_BLOCKSIZE+t] += s_ip[2*p_BLOCKSIZE+t+512];
      }
    }
#endif
#if p_BLOCKSIZE>256
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<256) {
        s_ip[0*p_BLOCKSIZE+t] += s_ip[0*p_BLOCKSIZE+t+256];
        s_ip[1*p_BLOCKSIZE+t] += s_ip[1*p_BLOCKSIZE+t+256];
        s_ip[2*p_BLOCKSIZE+t] += s_ip[2*p_BLOCKSIZE+t+256];
      }
    }
#endif
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<128) {
        s_ip[0*p_BLOCKSIZE+t] += s_ip[0*p_BLOCKSIZE+t+128];
        s_ip[1*p_BLOCKSIZE+t] += s_ip[1*p_BLOCKSIZE+t+128];
        s_ip[2*p_BLOCKSIZE+t] += s_ip[2*p_BLOCKSIZE+t+128];
      }
    }
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<64) {
        s_ip[0*p_BLOCKSIZE+t] += s_ip[0*p_BLOCKSIZE+t+64];
        s_ip[1*p_BLOCKSIZE+t] += s_ip[1*p_BLOCKSIZE+t+64];
        s_ip[2*p_BLOCKSIZE+t] += s_ip[2*p_BLOCKSIZE+t+64];
      }
    }
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<32) {
        s_ip[0*p_BLOCKSIZE+t] += s_ip[0*p_BLOCKSIZE+t+32];
        s_ip[1*p_BLOCKSIZE+t] += s_ip[1*p_BLOCKSIZE+t+32];
        s_ip[2*p_BLOCKSIZE+t] += s_ip[2*p_BLOCKSIZE+t+32];
      }
    }
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<16) {
        s_ip[0*p_BLOCKSIZE+t] += s_ip[0*p_BLOCKSIZE+t+16];
        s_ip[1*p_BLOCKSIZE+t] += s_ip[1*p_BLOCKSIZE+t+16];
        s_ip[2*p_BLOCKSIZE+t] += s_ip[2*p_BLOCKSIZE+t+16];
      }
    }
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<8) {
        s_ip[0*p_BLOCKSIZE+t] += s_ip[0*p_BLOCKSIZE+t+8];
        s_ip[1*p_BLOCKSIZE+t] += s_ip[1*p_BLOCKSIZE+t+8];
        s_ip[2*p_BLOCKSIZE+t] += s_ip[2*p_BLOCKSIZE+t+8];
      }
    }
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<4) {
        s_ip[0*p_BLOCKSIZE+t] += s_ip[0*p_BLOCKSIZE+t+4];
        s_ip[1*p_BLOCKSIZE+t] += s_ip[1*p_BLOCKSIZE+t+4];
        s_ip[2*p_BLOCKSIZE+t] += s_ip[2*p_BLOCKSIZE+t+4];
      }
    }
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<2) {
        s_ip[0*p_BLOCKSIZE+t] += s_ip[0*p_BLOCKSIZE+t+2];
        s_ip[1*p_BLOCKSIZE+t] += s_ip[1*p_BLOCKSIZE+t+2];
        s_ip[2*p_BLOCKSIZE+t] += s_ip[2*p_BLOCKSIZE+t+2];
      }
    }
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<1) {
        ips[3*n+0] = s_ip[0*p_BLOCKSIZE+0] + s_ip[0*p_BLOCKSIZE+t+1];
        ips[3*n+1] = s_ip[1*p_BLOCKSIZE+0] + s_ip[1*p_BLOCKSIZE+t+1];
        ips[3*n+2] = s_ip[2*p_BLOCKSIZE+0] + s_ip[2*p_BLOCKSIZE+t+1];
      }
    }
  }

  for(dlong n=0;n<1;++n;@outer(0)){

    @shared dfloat s_ip[3*p_BLOCKSIZE];

    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)){
      dlong id = t;
      dfloat r_ip0 = 0.0;
      dfloat r_ip1 = 0.0;
      dfloat r_ip2 = 0.0;
      while (id<Nblocks) {
        r_ip0 += ips[3*id+0];
        r_ip1 += ips[3*id+1];
        r_ip2 += ips[3*id+2];
        id += p_BLOCKSIZE;
      }
      s_ip[0*p_BLOCKSIZE+t] = r_ip0;
      s_ip[1*p_BLOCKSIZE+t] = r_ip1;
      s_ip[2*p_BLOCKSIZE+t] = r_ip2;
    }

#if p_BLOCKSIZE>512
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<512) {
        s_ip[0*p_BLOCKSIZE+t] += s_ip[0*p_BLOCKSIZE+t+512];
        s_ip[1*p_BLOCKSIZE+t] += s_ip[1*p_BLOCKSIZE+t+512];
        s_ip[2*p_BLOCKSIZE+t] += s_ip[2*p_BLOCKSIZE+t+512];
      }
    }
#endif
#if p_BLOCKSIZE>256
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<256) {
        s_ip[0*p_BLOCKSIZE+t] += s_ip[0*p_BLOCKSIZE+t+256];
        s_ip[1*p_BLOCKSIZE+t] += s_ip[1*p_BLOCKSIZE+t+256];
        s_ip[2*p_BLOCKSIZE+t] += s_ip[2*p_BLOCKSIZE+t+256];
      }
    }
#endif
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<128) {
        s_ip[0*p_BLOCKSIZE+t] += s_ip[0*p_BLOCKSIZE+t+128];
        s_ip[1*p_BLOCKSIZE+t] += s_ip[1*p_BLOCKSIZE+t+128];
        s_ip[2*p_BLOCKSIZE+t] += s_ip[2*p_BLOCKSIZE+t+128];
      }
    }
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<64) {
        s_ip[0*p_BLOCKSIZE+t] += s_ip[0*p_BLOCKSIZE+t+64];
        s_ip[1*p_BLOCKSIZE+t] += s_ip[1*p_BLOCKSIZE+t+64];
        s_ip[2*p_BLOCKSIZE+t] += s_ip[2*p_BLOCKSIZE+t+64];
      }
    }
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<32) {
        s_ip[0*p_BLOCKSIZE+t] += s_ip[0*p_BLOCKSIZE+t+32];
        s_ip[1*p_BLOCKSIZE+t] += s_ip[1*p_BLOCKSIZE+t+32];
        s_ip[2*p_BLOCKSIZE+t] += s_ip[2*p_BLOCKSIZE+t+32];
      }
    }
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<16) {
        s_ip[0*p_BLOCKSIZE+t] += s_ip[0*p_BLOCKSIZE+t+16];
        s_ip[1*p_BLOCKSIZE+t] += s_ip[1*p_BLOCKSIZE+t+16];
        s_ip[2*p_BLOCKSIZE+t] += s_ip[2*p_BLOCKSIZE+t+16];
      }
    }
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<8) {
        s_ip[0*p_BLOCKSIZE+t] += s_ip[0*p_BLOCKSIZE+t+8];
        s_ip[1*p_BLOCKSIZE+t] += s_ip[1*p_BLOCKSIZE+t+8];
        s_ip[2*p_BLOCKSIZE+t] += s_ip[2*p_BLOCKSIZE+t+8];
      }
    }
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<4) {
        s_ip[0*p_BLOCKSIZE+t] += s_ip[0*p_BLOCKSIZE+t+4];
        s_ip[1*p_BLOCKSIZE+t] += s_ip[1*p_BLOCKSIZE+t+4];
        s_ip[2*p_BLOCKSIZE+t] += s_ip[2*p_BLOCKSIZE+t+4];
      }
    }
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<2) {
        s_ip[0*p_BLOCKSIZE+t] += s_ip[0*p_BLOCKSIZE+t+2];
        s_ip[1*p_BLOCKSIZE+t] += s_ip[1*p_BLOCKSIZE+t+2];
        s_ip[2*p_BLOCKSIZE+t] += s_ip[2*p_BLOCKSIZE+t+2];
      }
    }
    for(int t=0;t<p_BLOCKSIZE;++t;@inner(0)) {
      if(t<1) {
        ips[0] = s_ip[0*p_BLOCKSIZE+0] + s_ip[0*p_BLOCKSIZE+t+1];
        ips[1] = s_ip[1*p_BLOCKSIZE+0] + s_ip[1*p_BLOCKSIZE+t+1];
        ips[2] = s_ip[2*p_BLOCKSIZE+0] + s_ip[2*p_BLOCKSIZE+t+1];
      }
    }
  }
}
