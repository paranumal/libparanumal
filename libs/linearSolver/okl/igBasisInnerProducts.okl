/*

The MIT License (MIT)

Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

#define p_blockSize 256

@kernel void igBasisInnerProducts(const dlong Ntotal,
                                  const dlong Nblocks,
                                  const dlong dim, // how many inner products
                                  const dfloat *x, // one x
                                  const dfloat *y, // multiple y
                                  dfloat *wxy)
{
  for (dlong b = 0; b < Nblocks; ++b; @outer(0)) {

    @shared volatile dfloat s_wxy[p_blockSize];

    // load x to register
    // block over igNhist

    @exclusive dfloat r_wx;

    for (int t = 0; t < p_blockSize; ++t; @inner(0)) {
      const dlong id = t + p_blockSize*b;

      if (id < Ntotal) {
        r_wx = x[id];
      }
    }

    for (int fld = 0; fld < dim; ++fld) {

      @barrier("local");

      for (int t = 0; t < p_blockSize; ++t; @inner(0)) {
        dlong id = t + p_blockSize*b;

        dfloat res = 0;

        if (id < Ntotal) {
          dlong vid = id + fld*Ntotal;

          res += r_wx*y[vid]; // fmad
        }

        s_wxy[t] = res;
      }

      @barrier("local");

#if p_blockSize>512
      for(int t=0;t<p_blockSize;++t;@inner(0))
        if(t<512){
          s_wxy[t] += s_wxy[t+512];
        }

      @barrier("local");
#endif

#if p_blockSize>256
      for(int t=0;t<p_blockSize;++t;@inner(0))
        if(t<256){
          s_wxy[t] += s_wxy[t+256];
        }

      @barrier("local");
#endif

      for(int t=0;t<p_blockSize;++t;@inner(0))
        if(t<128){
          s_wxy[t] += s_wxy[t+128];
        }

      @barrier("local");

      for(int t=0;t<p_blockSize;++t;@inner(0))
        if(t< 64){
          s_wxy[t] += s_wxy[t+64];
        }

      @barrier("local");

      for(int t=0;t<p_blockSize;++t;@inner(0))
        if(t< 32){
          s_wxy[t] += s_wxy[t+32];
        }

      for(int t=0;t<p_blockSize;++t;@inner(0))
        if(t< 16){
          s_wxy[t] += s_wxy[t+16];
        }

      for(int t=0;t<p_blockSize;++t;@inner(0))
        if(t<  8){
          s_wxy[t] += s_wxy[t+8];
        }

      for(int t=0;t<p_blockSize;++t;@inner(0))
        if(t<  4){
          s_wxy[t] += s_wxy[t+4];
        }

      for(int t=0;t<p_blockSize;++t;@inner(0))
        if(t<  2){
          s_wxy[t] += s_wxy[t+2];
        }

      @barrier("local");

      // assumes igNhist < p_blockSize
      for(int t=0;t<p_blockSize;++t;@inner(0)){
        if(t==0){
          dfloat res = s_wxy[0] + s_wxy[1];
//          atomicAdd(wxy + fld, res); // note - assumes zerod accumulator
          dlong id = b + Nblocks*fld;
          wxy[id] = res;
        }
      }
    }
  }
}
