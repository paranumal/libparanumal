/*

The MIT License (MIT)

Copyright (c) 2017-2022 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

// NBN: toggle atomicAdd() for mode [Serial]
// #define NBN_SERIAL


//---------------------------------------------------------
// adapted from http://paulbourke.net/geometry/polygonise/source1.c
// https://michelanders.blogspot.com/2012/02/marching-tetrahedrons-in-python.html
//---------------------------------------------------------

dfloat intersection(const dfloat iso, const dfloat val1, const dfloat val2){

  const dfloat tol = 1.e-7; // was 1e-5

  if (fabs( iso-val1)<tol) return (dfloat)0.f;  // iso == val1
  if (fabs( iso-val2)<tol) return (dfloat)1.f;  // iso == val2
  if (fabs(val1-val2)<tol) return (dfloat)0.f;  // val1 == val2

  const dfloat r = (iso-val1)/(val2-val1);      // factor for interpolation

  return r;
}  

void intersect(const int fld,
               const dfloat iso, 
               const dfloat * vals1,
               const dfloat * vals2,
               dfloat * valsIso ){

  const dfloat r = intersection(iso, vals1[fld], vals2[fld]);

  for(int f=0;f<p_plotNfields;++f){
    valsIso[f] = vals1[f] + r*(vals2[f]-vals1[f]);
  }
}


dfloat triArea(const dfloat *v0, const dfloat *v1, const dfloat *v2){

  // |0.5*((v2-v0)x(v1-v0))|                                                                                                                            

  const dfloat dx1 = v1[0]-v0[0];
  const dfloat dy1 = v1[1]-v0[1];
  const dfloat dz1 = v1[2]-v0[2];

  const dfloat dx2 = v2[0]-v0[0];
  const dfloat dy2 = v2[1]-v0[1];
  const dfloat dz2 = v2[2]-v0[2];

  const dfloat cx = dy2*dz1-dz2*dy1;
  const dfloat cy = dz2*dx1-dx2*dz1;
  const dfloat cz = dx2*dy1-dy2*dx1;

  const dfloat area = sqrt(cx*cx+cy*cy+cz*cz);

  return area;
}

int marchingTet(const int fld,
                const dfloat vals[p_plotNp][p_plotNfields], // stack {xyz}{q,mag}
                const int v0,
                const int v1,
                const int v2,
                const int v3,
                const dfloat iso,
                dfloat * valsIso){
  
  // Determine which of the 16 cases we have given which vertices
  // are above or below the isosurface

  int triindex = 0;
  if (vals[v0][fld] < iso) triindex |= 1;
  if (vals[v1][fld] < iso) triindex |= 2;
  if (vals[v2][fld] < iso) triindex |= 4;
  if (vals[v3][fld] < iso) triindex |= 8;

  int a0 = -1, a1 = -1, a2 = -1;
  int b0 = -1, b1 = -1, b2 = -1;
  int c0 = -1, c1 = -1, c2 = -1;
  int d0 = -1, d1 = -1, d2 = -1;

  // Form the vertices of the triangles for each case
  switch (triindex) {
  case 0x00:
  case 0x0F:
    break;

  case 0x0E:
  case 0x01:
    a0 = v0; b0 = v1;
    a1 = v0; b1 = v2;
    a2 = v0; b2 = v3;
    break;

  case 0x0D:
  case 0x02:
    a0 = v1; b0 = v0;
    a1 = v1; b1 = v3;
    a2 = v1; b2 = v2;
    break;

  case 0x0C:
  case 0x03:
    a0 = v0; b0 = v3;
    a1 = v0; b1 = v2;
    a2 = v1; b2 = v3;

    c0 = v1; d0 = v3;
    c1 = v1; d1 = v2;
    c2 = v0; d2 = v2;
    break;

  case 0x0B:
  case 0x04:
    a0 = v2; b0 = v0;
    a1 = v2; b1 = v1;
    a2 = v2; b2 = v3;
    break;

  case 0x0A:
  case 0x05:
    a0 = v0; b0 = v1;
    a1 = v2; b1 = v3;
    a2 = v0; b2 = v3;

    c0 = v0; d0 = v1;
    c1 = v1; d1 = v2;
    c2 = v2; d2 = v3;
    break;

  case 0x09:
  case 0x06:
    a0 = v0; b0 = v1;
    a1 = v1; b1 = v3;
    a2 = v2; b2 = v3;

    c0 = v0; d0 = v1;
    c1 = v0; d1 = v2;
    c2 = v2; d2 = v3;
    break;

  case 0x07:
  case 0x08:
    a0 = v3; b0 = v0;
    a1 = v3; b1 = v2;
    a2 = v3; b2 = v1;
    break;
  }

  // NBN: return a flag indicating which triangles have area > tol
  // return 1 to indicate (area of tri #1) > tol
  // return 2 to indicate (area of tri #2) > tol
  // return 4 to indicate (area of both tris) > tol
  int tflag = 0;

  // do these here to avoid traversing all ops in switch
  // 
  // NBN: after quadric edge collapse, if we want tris 
  // with edgelength > (1e-3), then we want to use tris 
  // with area > 0.5*(1e-3)^2 = 5e-7
  // Test 1: select tris with area > 1.0e-8
  dfloat p_triAreaTol = (dfloat)1.0e-8;

  if(a0 != -1){
    intersect(fld,iso,vals[a0],vals[b0], valsIso); valsIso+=p_plotNfields;
    intersect(fld,iso,vals[a1],vals[b1], valsIso); valsIso+=p_plotNfields;
    intersect(fld,iso,vals[a2],vals[b2], valsIso); valsIso+=p_plotNfields;

    if(triArea(valsIso-3*p_plotNfields, valsIso-2*p_plotNfields, valsIso-p_plotNfields)>p_triAreaTol)
    {
      tflag = 1;  // save triangle #1
    }
  }

  if(c0 != -1){
    intersect(fld,iso,vals[c0],vals[d0], valsIso); valsIso+=p_plotNfields;
    intersect(fld,iso,vals[c1],vals[d1], valsIso); valsIso+=p_plotNfields;
    intersect(fld,iso,vals[c2],vals[d2], valsIso); valsIso+=p_plotNfields;

    if(triArea(valsIso-3*p_plotNfields, valsIso-2*p_plotNfields, valsIso-p_plotNfields)>p_triAreaTol)
    {
      if (0 == tflag) {
        // only save triangle #2 (skipped triangle #1)
        tflag = 2;
      } else {
        // save both triangles
        tflag = 4;
      }
    }
  }

  // (1==tflag) ? only save triangle #1
  // (2==tflag) ? only save triangle #2
  // (4==tflag) ? save both triangles
  return tflag;
}


// Note: zero isoNtris[0] before calling

@kernel void isoSurface3D(
            const int Nelements,
  @restrict const dlong * elementIds,
            const int isoField,
            const int isoColorField,
            const int isoMaxNtris,
            const int isoNlevels,
  @restrict const dfloat * isoLevels,
  @restrict const dfloat * x,     
  @restrict const dfloat * y,
  @restrict const dfloat * z,
  @restrict const dfloat * q,
  @restrict const dfloat * V,
  @restrict const dfloat * plotInterp,
  @restrict const dlong  * plotEToV,
  @restrict       int    * isoNtris,
  @restrict       dfloat * isoQ){

  for(int et=0;et<Nelements;++et;@outer(0)){

    @shared dfloat s_q[p_plotNfields][p_Np];
    @shared dfloat s_plotq[p_plotNp][p_plotNfields];

    @exclusive int e;

    for (int n=0; n<p_plotNthreads; ++n; @inner(0)) {
    
      // index into list of elements in clip region
      e = elementIds[et];

      if(n<p_Np) {

        const dlong idX =             e*p_Np+n;
        const dlong idQ = p_Nfields  *e*p_Np+n;   // 5: {r,u,v,w,p}
        const dlong idV = p_plotNvort*e*p_Np+n;   // 2: {qw,vmag}

      //const dfloat rho   = q[idQ + 0*p_Np];      // {r} density as color
      //const dfloat magGR = V[idV + 0*p_Np];      // |grad(rho)|
        const dfloat qw    = V[idV + 0*p_Np];      // {qw}
        const dfloat vmag  = V[idV + 1*p_Np];      // {vmag}

        // stack {x,y,z, qw,|v|}
        s_q[0][n] = x[idX];
        s_q[1][n] = y[idX];
        s_q[2][n] = z[idX];

      //s_q[3][n] = magGR;
      //s_q[3][n] = rho;
      //s_q[4][n] = rho;
        s_q[3][n] = qw;
        s_q[4][n] = vmag;
      }
    }

    for (int n=0;n<p_plotNthreads;++n;@inner(0)) {
      if (n < p_plotNp) {
        dfloat r_plotq[p_plotNfields];

        #pragma unroll p_plotNfields
        for (int fld=0; fld<p_plotNfields; ++fld) {
          r_plotq[fld] = 0;
        }

        for (int m=0; m<p_Np; ++m) {
          // NBN: 2022
          dfloat Inm = plotInterp[n*p_Np + m];

          #pragma unroll p_plotNfields
          for (int fld=0; fld<p_plotNfields; ++fld) {
            r_plotq[fld] += Inm *s_q[fld][m];
          }
        }

        #pragma unroll p_plotNfields
        for (int fld=0; fld<p_plotNfields; ++fld) {
          // note switch to field fastest layout
          s_plotq[n][fld] = r_plotq[fld];
        }
      }
    }


    for (int n=0;n<p_plotNthreads;++n;@inner(0)) {

      if (n < p_plotNelements) {

        // Each call to marchingTet() can add {0,1,2} tris.
        // Make isoVals buffer big enough to hold data for 
        // 2 tris: 2 x 3 verts, {x,y,x,q,c} for each vert
        dfloat isoVals[2 * (3*(p_plotNfields))];

        // NBN: Original
        // const int v1 = plotEToV[n + 0*p_plotNelements];
        // const int v2 = plotEToV[n + 1*p_plotNelements];
        // const int v3 = plotEToV[n + 2*p_plotNelements];
        // const int v4 = plotEToV[n + 3*p_plotNelements];

        // NBN: libP::2022
        const int v1 = plotEToV[n*4 + 0];
        const int v2 = plotEToV[n*4 + 1];
        const int v3 = plotEToV[n*4 + 2];
        const int v4 = plotEToV[n*4 + 3];

        // loop over isosurface levels
        for (int i=0; i<isoNlevels; ++i) {

          // "isoField" is variable used for contouring
          const int tflag = marchingTet(isoField, s_plotq, v1,v2,v3,v4, isoLevels[i], isoVals);

          // NBN: use tflag to indicate which triangles have area > tol
          // tflag 1: (area of tri #1) > tol
          // tflag 2: (area of tri #2) > tol
          // tflag 4: (area of both tris) > tol

          if (tflag>0) {

            const int tstride = 3 * p_plotNfields;
            int offset=0;

            if (1 == tflag || 4 == tflag) {
              // 1: want triangle #1
              // 4: want both triangles
              offset = atomicAdd(isoNtris, 1);
              if ((offset+1) < isoMaxNtris) {
                for (int t=0; t<tstride; ++t) {
                  isoQ[offset * tstride + t] = isoVals[t];
                }
              }
            }

            if (2 == tflag || 4 == tflag) {
              // 2: want triangle #2
              // 4: want both triangles
              offset = atomicAdd(isoNtris, 1);
              if ((offset+1) < isoMaxNtris) {
                for (int t=0; t<tstride; ++t) {
                  isoQ[offset * tstride + t] = isoVals[t + tstride];
                }
              }
            }
          }
        }
      }
    }
  }
}
