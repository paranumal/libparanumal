/*

The MIT License (MIT)

Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/


// compute div(NU)  = div(uxu) in collocation way (weak form)
@kernel void fpeAdvectionVolumeQuad2D(const dlong Nelements,
                                      @restrict const  dfloat *  vgeo,
                                      @restrict const  dfloat *  DT,
                                                const  dfloat    t,
                                      @restrict const  dfloat *  x,
                                      @restrict const  dfloat *  y,
                                      @restrict const  dfloat *  z,
                                      @restrict const  dfloat *  q,
                                            @restrict  dfloat *  rhs){

  for(dlong eo=0;eo<Nelements;eo+=p_NblockV;@outer(0)){  // for all elements

    @shared dfloat s_F[p_NblockV][p_Nq][p_Nq];
    @shared dfloat s_G[p_NblockV][p_Nq][p_Nq];
    @shared dfloat s_DT[p_Nq][p_Nq];

    for(int es=0;es<p_NblockV;++es;@inner(2)){
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){
          const dlong e = eo+es; // element in block
          if(e<Nelements){
            const dlong gid = e*p_Np*p_Nvgeo+ j*p_Nq +i;
            const dfloat drdx = vgeo[gid + p_RXID*p_Np];
            const dfloat drdy = vgeo[gid + p_RYID*p_Np];
            const dfloat dsdx = vgeo[gid + p_SXID*p_Np];
            const dfloat dsdy = vgeo[gid + p_SYID*p_Np];
            const dfloat JW   = vgeo[gid + p_JWID*p_Np];

            const dlong id = e*p_Np + j*p_Nq+i;
            const dfloat qn = q[id];

            dfloat u=0.0, v=0.0;
            fpeAdvectionFlux2D(t, x[id], y[id], qn, &u, &v);

            s_F[es][j][i] = JW*(drdx*u+drdy*v);
            s_G[es][j][i] = JW*(dsdx*u+dsdy*v);

            if (es==0)
              s_DT[j][i] = DT[j*p_Nq+i];
          }
        }
      }
    }

    // Make sure all node data is loaded into @shared
    @barrier("local");

    for(int es=0;es<p_NblockV;++es;@inner(2)){
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){
          const dlong e = eo+es;
          if(e<Nelements){
            const dlong gid = e*p_Np*p_Nvgeo+ j*p_Nq +i;
            const dfloat invJW = vgeo[gid + p_IJWID*p_Np];
            dfloat rhsqn = 0.f;

            #pragma unroll p_Nq
            for(int n=0;n<p_Nq;++n){
              const dfloat Dr = s_DT[n][i];
              const dfloat Ds = s_DT[n][j];

              rhsqn += Dr*s_F[es][j][n]
                      +Ds*s_G[es][n][i];
            }

            const dlong id = e*p_Np + j*p_Nq + i;
            rhs[id] = invJW*rhsqn;
          }
        }
      }
    }
  }
}



void surfaceTerms(dlong e, int es,
                  int sk, int face, int i, int j,
                  const dfloat time,
                  const dfloat *x,
                  const dfloat *y,
                  const dfloat *sgeo,
                  const dlong *vmapM,
                  const dlong *vmapP,
                  const int *EToB,
                  const dfloat *q,
                  @shared dfloat s_flux[p_NblockS][p_Nq][p_Nq]){

  const dlong  idM = vmapM[sk];
  const dlong  idP = vmapP[sk];

  const dfloat nx = sgeo[sk*p_Nsgeo+p_NXID];
  const dfloat ny = sgeo[sk*p_Nsgeo+p_NYID];
  const dfloat sJ = sgeo[sk*p_Nsgeo+p_SJID];
  const dfloat invWJ = sgeo[sk*p_Nsgeo+p_WIJID];

  const dfloat qM = q[idM];
  dfloat qP = q[idP];

  const int bc = EToB[face+p_Nfaces*e];
  if(bc>0) {
     dfloat qxP=0.0, qyP=0.0;
    fpeBoundaryConditions2D(bc, time, x[idM], y[idM], nx, ny,
                             qM, 0.0, 0.0,
                             &qP, &qxP, &qyP);
  }

  dfloat fxM=0.0, fyM=0.0;
  dfloat fxP=0.0, fyP=0.0;
  fpeAdvectionFlux2D(time, x[idM], y[idM], qM, &fxM, &fyM);
  fpeAdvectionFlux2D(time, x[idM], y[idM], qP, &fxP, &fyP);

  const dfloat ndotfM = nx*fxM + ny*fyM;
  const dfloat ndotfP = nx*fxP + ny*fyP;

  // Find max normal velocity on the face
  dfloat uM=0.0, vM=0.0;
  dfloat uP=0.0, vP=0.0;
  fpeMaxWaveSpeed2D(time, x[idM], y[idM], qM, &uM, &vM);
  fpeMaxWaveSpeed2D(time, x[idM], y[idM], qP, &uP, &vP);

  const dfloat unM   = fabs(nx*uM + ny*vM);
  const dfloat unP   = fabs(nx*uP + ny*vP);
  const dfloat unMax = (unM > unP) ? unM : unP;

  const dfloat sc = invWJ * sJ;
  s_flux[es][j][i] += sc*(.5f*(ndotfP+ndotfM  + unMax*(qM-qP) ));
}

@kernel void fpeAdvectionSurfaceQuad2D(const dlong Nelements,
                                      @restrict const  dfloat *  sgeo,
                                      @restrict const  dfloat *  LIFT,
                                      @restrict const  dlong  *  vmapM,
                                      @restrict const  dlong  *  vmapP,
                                      @restrict const  int    *  EToB,
                                                const  dfloat time,
                                      @restrict const  dfloat *  x,
                                      @restrict const  dfloat *  y,
                                      @restrict const  dfloat *  z,
                                      @restrict const  dfloat *  q,
                                            @restrict  dfloat *  rhs){
  // for all elements
  for(dlong eo=0;eo<Nelements;eo+=p_NblockS;@outer(0)){
    // @shared storage for flux terms
    @shared dfloat s_flux[p_NblockS][p_Nq][p_Nq];

    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        #pragma unroll p_Nq
        for(int j=0;j<p_Nq;++j){
          s_flux[es][j][i] = 0.f;
        }
      }
    }

    @barrier("local");

    // for all face nodes of all elements
    // face 0 & 2
    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        const dlong e = eo + es;
        if(e<Nelements){
          const dlong sk0 = e*p_Nfp*p_Nfaces + 0*p_Nfp + i;
          const dlong sk2 = e*p_Nfp*p_Nfaces + 2*p_Nfp + i;

          //          surfaceTerms(sk0,0,i,0     );
          surfaceTerms(e, es, sk0, 0, i, 0,
                       time, x, y, sgeo, vmapM, vmapP, EToB, q, s_flux);

                // surfaceTerms(sk2,2,i,p_Nq-1);
          surfaceTerms(e, es, sk2, 2, i, p_Nq-1,
                      time, x, y, sgeo, vmapM, vmapP, EToB, q, s_flux);
        }
      }
    }

    @barrier("local");

    // face 1 & 3
    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int j=0;j<p_Nq;++j;@inner(0)){
        const dlong e = eo + es;
        if(e<Nelements){
          const dlong sk1 = e*p_Nfp*p_Nfaces + 1*p_Nfp + j;
          const dlong sk3 = e*p_Nfp*p_Nfaces + 3*p_Nfp + j;

          //          surfaceTerms(sk1,1,p_Nq-1,j);
          surfaceTerms(e, es, sk1, 1, p_Nq-1, j,
                 time, x, y, sgeo, vmapM, vmapP, EToB, q, s_flux);

          //          surfaceTerms(sk3,3,0     ,j);
          surfaceTerms(e, es, sk3, 3, 0, j,
                  time, x, y, sgeo, vmapM, vmapP, EToB, q, s_flux);
        }
      }
    }

    @barrier("local");

    // for each node in the element
    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        const dlong e = eo + es;
        if(e<Nelements){
          #pragma unroll p_Nq
          for(int j=0;j<p_Nq;++j){
            const dlong id = e*p_Np + j*p_Nq + i;

            rhs[id] -= s_flux[es][j][i];
          }
        }
      }
    }
  }
}
