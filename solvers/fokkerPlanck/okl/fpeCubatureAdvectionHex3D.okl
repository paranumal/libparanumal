/*

The MIT License (MIT)

Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

//unified @kernel, but might use too much memory
@kernel void fpeAdvectionCubatureVolumeHex3D(const dlong Nelements,
                                    @restrict const  dfloat *  vgeo,
                                    @restrict const  dfloat *  cubvgeo,
                                    @restrict const  dfloat *  cubDT,
                                    @restrict const  dfloat *  cubPDT,
                                    @restrict const  dfloat *  cubInterp,
                                    @restrict const  dfloat *  cubProject,
                                              const  dfloat    t,
                                    @restrict const  dfloat *  cubx,
                                    @restrict const  dfloat *  cuby,
                                    @restrict const  dfloat *  cubz,
                                    @restrict const  dfloat *  q,
                                          @restrict  dfloat *  rhs){

  //----------------------------@kernel 1 interpolate velocity fields to quadrature points
  for(dlong e=0; e<Nelements; ++e; @outer(0)) {

    @shared dfloat s_cubDT[p_cubNq][p_cubNq];
    @shared dfloat s_cubInterp[p_Nq][p_cubNq];
    @shared dfloat s_cubProject[p_cubNq][p_Nq];

    @shared dfloat s_F[p_cubNq][p_cubNq];
    @shared dfloat s_G[p_cubNq][p_cubNq];
    @shared dfloat s_H[p_cubNq][p_cubNq];
    @shared dfloat s_q[p_cubNq][p_cubNq];

    #define s_rhs s_F

    @exclusive dfloat r_q[p_cubNq];
    @exclusive dfloat r_rhs[p_cubNq];

    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
        const int id = i+j*p_cubNq;
        if (id<p_Nq*p_cubNq) {
          s_cubInterp[0][id] = cubInterp[id];
          s_cubProject[0][id] = cubProject[id];
        }
        s_cubDT[0][id] = cubDT[id];

        #pragma unroll p_cubNq
          for(int k=0;k<p_cubNq;++k){
            r_q[k] = 0.f;
            r_rhs[k] = 0.f;
        }
      }
    }

    @barrier("local");

    //read in and interpolate in k
    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
        if (i<p_Nq && j<p_Nq) {
          #pragma unroll p_Nq
          for(int k=0;k<p_Nq;++k){
            const dlong id = e*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;
            const dfloat qn = q[id];

            #pragma unroll p_cubNq
            for(int n=0;n<p_cubNq;++n){
              const dfloat Ik = s_cubInterp[k][n];
              r_q[n] += Ik*qn;
            }
          }
        }
      }
    }

    @barrier("local");

    #pragma unroll p_cubNq
    for(int k=0;k<p_cubNq;++k){
      //load slice to @shared
      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          if (i<p_Nq && j<p_Nq) {
            s_q[j][i] = r_q[k];
          }
        }
      }

      @barrier("local");

      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          if(j<p_Nq){
            r_q[k] = 0.f;
            #pragma unroll p_Nq
            for (int n=0;n<p_Nq;n++) {
              const dfloat Ii = s_cubInterp[n][i];
              r_q[k] += Ii*s_q[j][n];
            }
          }
        }
      }

      @barrier("local");

      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          if(j<p_Nq){
            s_q[j][i] = r_q[k];
          }
        }
      }

      @barrier("local");

      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          r_q[k] = 0.f;
          #pragma unroll p_Nq
          for (int n=0;n<p_Nq;n++) {
            const dfloat Ij = s_cubInterp[n][j];
            r_q[k] += Ij*s_q[n][i];
          }
        }
      }

      @barrier("local");
    }

    //#pragma unroll p_cubNq
    for(int k=0;k<p_cubNq;++k){

      //fetch slice
      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          const dlong gid = e*p_cubNp*p_Nvgeo+ k*p_cubNq*p_cubNq + j*p_cubNq +i;
          const dfloat drdx = cubvgeo[gid + p_RXID*p_cubNp];
          const dfloat drdy = cubvgeo[gid + p_RYID*p_cubNp];
          const dfloat drdz = cubvgeo[gid + p_RZID*p_cubNp];
          const dfloat dsdx = cubvgeo[gid + p_SXID*p_cubNp];
          const dfloat dsdy = cubvgeo[gid + p_SYID*p_cubNp];
          const dfloat dsdz = cubvgeo[gid + p_SZID*p_cubNp];
          const dfloat dtdx = cubvgeo[gid + p_TXID*p_cubNp];
          const dfloat dtdy = cubvgeo[gid + p_TYID*p_cubNp];
          const dfloat dtdz = cubvgeo[gid + p_TZID*p_cubNp];
          const dfloat JW   = cubvgeo[gid + p_JWID*p_cubNp];

          const dfloat qn = r_q[k];

          dfloat u=0.0, v=0.0, w=0.0;
          const dlong id = e*p_cubNp + k*j*p_cubNq*p_cubNq + j*p_cubNq +i;
          fpeAdvectionField3D(t, cubx[id], cuby[id], cubz[id], qn, &u, &v, &w);

          s_F[j][i] = JW*(drdx*u+drdy*v+drdz*w)*qn;
          s_G[j][i] = JW*(dsdx*u+dsdy*v+dsdz*w)*qn;
          s_H[j][i] = JW*(dtdx*u+dtdy*v+dtdz*w)*qn;
        }
      }

      @barrier("local");

      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          #pragma unroll p_cubNq
            for (int n=0;n<p_cubNq;n++) {
              const dfloat Dr = s_cubDT[n][i];
              const dfloat Ds = s_cubDT[n][j];
              const dfloat Dt = s_cubDT[k][n];
              r_rhs[k] += Dr*s_F[j][n];
              r_rhs[k] += Ds*s_G[n][i];
              r_rhs[n] += Dt*s_H[j][i];
          }
        }
      }
      @barrier("local");
    } //k loop

    #pragma unroll p_cubNq
    for(int k=0;k<p_cubNq;++k){
      //load slice to @shared
      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          s_rhs[j][i] = r_rhs[k];
        }
      }

      @barrier("local");

      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          if(j<p_Nq){
            r_rhs[k] = 0.f;
            #pragma unroll p_cubNq
            for (int n=0;n<p_cubNq;n++) {
              const dfloat Pj = s_cubProject[n][j];
              r_rhs[k] += Pj*s_rhs[n][i];
            }
          }
        }
      }

      @barrier("local");

      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          if(j<p_Nq){
            s_rhs[j][i] = r_rhs[k];
          }
        }
      }

      @barrier("local");

      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          if ((i<p_Nq) && (j<p_Nq)) {
            r_rhs[k] = 0.f;
            #pragma unroll p_cubNq
            for (int n=0;n<p_cubNq;n++) {
              const dfloat Pi = s_cubProject[n][i];
              r_rhs[k] += Pi*s_rhs[j][n];
            }
          }
        }
      }

      @barrier("local");
    }

    //project in k and write out
    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
        if ((i<p_Nq) && (j<p_Nq)) {
          #pragma unroll p_Nq
          for(int k=0;k<p_Nq;++k){
            dfloat rhsn=0.f;

            #pragma unroll p_cubNq
            for(int n=0;n<p_cubNq;++n){
              const dfloat Pk = s_cubProject[n][k];
              rhsn += Pk*r_rhs[n];
            }

            const dlong gid = e*p_Np*p_Nvgeo+ k*p_Nq*p_Nq + j*p_Nq +i;
            const dfloat invJW = vgeo[gid + p_IJWID*p_Np];

            const dlong id = e*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;
            rhs[id] = invJW*rhsn;
          }
        }
      }
    }
  }
}





#define surfaceTerms(face)                                          \
  {                                                                     \
    for(int j=0;j<p_cubNq;++j;@inner(1)){                               \
      for(int i=0;i<p_cubNq;++i;@inner(0)){                             \
        if(i<p_Nq && j<p_Nq){                                           \
          const dlong id  = e*p_Nfp*p_Nfaces + face*p_Nfp + j*p_Nq +i;  \
          const dlong idM = vmapM[id];                                  \
          const dlong idP = vmapP[id];                                  \
          s_qM[j][i] = q[idM];                                          \
          s_qP[j][i] = q[idP];                                          \
        }                                                               \
      }                                                                 \
    }                                                                   \
                                                                        \
    @barrier("local");                                                  \
                                                                        \
    for(int j=0;j<p_cubNq;++j;@inner(1)){                               \
      for(int i=0;i<p_cubNq;++i;@inner(0)){                             \
        if (j<p_Nq) {                                                   \
          r_qMn = 0.f; r_qPn = 0.f;                                     \
         for (int n=0;n<p_Nq;n++) {                                     \
            const dfloat Ini = s_cubInterp[n][i];                      \
            r_qMn  += Ini*s_qM[j][n];                                   \
            r_qPn  += Ini*s_qP[j][n];                                   \
          }                                                             \
        }                                                               \
      }                                                                 \
    }                                                                   \
                                                                        \
    @barrier("local");                                                  \
                                                                        \
    for(int j=0;j<p_cubNq;++j;@inner(1)){                               \
      for(int i=0;i<p_cubNq;++i;@inner(0)){                             \
        if (j<p_Nq) {                                                   \
          s_qM[j][i] = r_qMn;                                           \
          s_qP[j][i] = r_qPn;                                           \
        }                                                               \
      }                                                                 \
    }                                                                   \
                                                                        \
    @barrier("local");                                                  \
                                                                        \
    for(int j=0;j<p_cubNq;++j;@inner(1)){                               \
      for(int i=0;i<p_cubNq;++i;@inner(0)){                             \
        r_qMn = 0.; r_qPn = 0.;                                         \
        for (int n=0;n<p_Nq;n++) {                                      \
          const dfloat Inj = s_cubInterp[n][j];                        \
          r_qMn += Inj*s_qM[n][i];                                      \
          r_qPn += Inj*s_qP[n][i];                                      \
        }                                                               \
      }                                                                 \
    }                                                                   \
                                                                        \
    @barrier("local");                                                  \
                                                                        \
    for(int j=0;j<p_cubNq;++j;@inner(1)){                               \
      for(int i=0;i<p_cubNq;++i;@inner(0)){                             \
        const dlong sk = e*p_cubNfp*p_Nfaces + face*p_cubNfp + j*p_cubNq + i; \
        const dfloat nx = cubsgeo[sk*p_Nsgeo+p_NXID];                   \
        const dfloat ny = cubsgeo[sk*p_Nsgeo+p_NYID];                   \
        const dfloat nz = cubsgeo[sk*p_Nsgeo+p_NZID];                   \
        const dfloat WsJ = cubsgeo[sk*p_Nsgeo+p_WSJID];                 \
        const dfloat qM = r_qMn;                                        \
        dfloat qP = r_qPn;                                              \
                                                                        \
        const int bc = EToB[face+p_Nfaces*e];                           \
        const dlong id = e*p_Nfaces*p_cubNfp + face*p_cubNfp + j*p_cubNq + i; \
        if(bc>0){                                                       \
          dfloat qxP=0.0, qyP=0.0, qzP=0.0;                             \
          fpeBoundaryConditions3D(bc, t, intx[id], inty[id], intz[id], nx, ny, nz, \
                                   qM, 0.0, 0.0, 0.0,                   \
                                   &qP, &qxP, &qyP, &qzP);              \
        }                                                               \
        dfloat uM=0.0, vM=0.0, wM=0.0;                                  \
        dfloat uP=0.0, vP=0.0, wP=0.0;                                  \
        fpeAdvectionField3D(t, intx[id], inty[id], intz[id], qM, &uM, &vM, &wM);\
        fpeAdvectionField3D(t, intx[id], inty[id], intz[id], qP, &uP, &vP, &wP);\
                                                                        \
        const dfloat unM   = fabs(nx*uM + ny*vM + nz*wM);               \
        const dfloat unP   = fabs(nx*uP + ny*vP + nz*wP);               \
        const dfloat unMax = (unM > unP) ? unM : unP;                   \
                                                                        \
        s_flux[j][i] = -WsJ*(.5f  *(nx*(qP*uP + qM*uM)                  \
                                  + ny*(qP*vP + qM*vM)                  \
                                  + nz*(qP*wP + qM*wM)  + unMax*(qM-qP) )); \
      }                                                                 \
    }                                                                   \
                                                                        \
    @barrier("local");                                                  \
                                                                        \
    for(int j=0;j<p_cubNq;++j;@inner(1)){                               \
      for(int i=0;i<p_cubNq;++i;@inner(0)){                             \
        if (j<p_Nq) {                                                   \
          r_rhsn = 0.f;                                                 \
          for (int n=0;n<p_cubNq;n++) {                                 \
            const dfloat Pnj = s_cubProject[n][j];                     \
            r_rhsn  += Pnj*s_flux[n][i];                                \
          }                                                             \
        }                                                               \
      }                                                                 \
    }                                                                   \
                                                                        \
    @barrier("local");                                                  \
                                                                        \
    for(int j=0;j<p_cubNq;++j;@inner(1)){                               \
      for(int i=0;i<p_cubNq;++i;@inner(0)){                             \
        if (j<p_Nq) {                                                   \
          s_flux[j][i] = r_rhsn;                                        \
        }                                                               \
      }                                                                 \
    }                                                                   \
    @barrier("local");                                                  \
                                                                        \
    for(int j=0;j<p_cubNq;++j;@inner(1)){                               \
      for(int i=0;i<p_cubNq;++i;@inner(0)){                             \
        if (j<p_Nq && i<p_Nq) {                                         \
          r_rhsn = 0.f;                                                 \
          for(int n=0;n<p_cubNq;++n){                                   \
            const dfloat Pni = s_cubProject[n][i];                     \
            r_rhsn += Pni*s_flux[j][n];                                 \
          }                                                             \
        }                                                               \
      }                                                                 \
    }                                                                   \
                                                                        \
    @barrier("local");                                                  \
                                                                        \
    for(int j=0;j<p_cubNq;++j;@inner(1)){                               \
      for(int i=0;i<p_cubNq;++i;@inner(0)){                             \
        if (j<p_Nq && i<p_Nq) {                                         \
          s_flux[j][i] = r_rhsn;                                        \
        }                                                               \
      }                                                                 \
    }                                                                   \
  }



@kernel void fpeAdvectionCubatureSurfaceHex3D(const dlong Nelements,
                                     @restrict const  dfloat *  vgeo,
                                     @restrict const  dfloat *  cubsgeo,
                                     @restrict const  dlong  *  vmapM,
                                     @restrict const  dlong  *  vmapP,
                                     @restrict const  int    *  EToB,
                                     @restrict const  dfloat *  cubInterp,
                                     @restrict const  dfloat *  cubProject,
                                               const  dfloat    time,
                                     @restrict const  dfloat *  intx,
                                     @restrict const  dfloat *  inty,
                                     @restrict const  dfloat *  intz,
                                     @restrict const  dfloat *  q,
                                     @restrict dfloat *  rhs){

  // for all elements
  for(dlong e=0;e<Nelements;e++;@outer(0)){
    // @shared storage for flux terms
    @exclusive dfloat r_rhs[p_Nq];

    @shared dfloat s_qM[p_cubNq][p_cubNq];
    @shared dfloat s_qP[p_cubNq][p_cubNq];

    // reuse @shared memory buffers
    @exclusive dfloat r_qMn, r_qPn;

    #define s_flux s_qM
    #define r_rhsn r_qMn

    @shared dfloat s_cubInterp[p_Nq][p_cubNq];
    @shared dfloat s_cubProject[p_cubNq][p_Nq];

    // for all face nodes of all elements
    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
        //zero out resulting surface contributions
        #pragma unroll p_Nq
        for(int k=0;k<p_Nq;++k){
          r_rhs[k] = 0.f;
        }

        //fetch reference operators
        const int id = i+j*p_cubNq;
        if (id<p_Nq*p_cubNq) {
          s_cubInterp[0][id] = cubInterp[id];
          s_cubProject[0][id] = cubProject[id];
        }
      }
    }

    @barrier("local");

    surfaceTerms(0) //face 0

    @barrier("local");

    //accumulate in register pencil
    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
        if (j<p_Nq && i<p_Nq) {
          r_rhs[0] += s_flux[j][i];
        }
      }
    }

    @barrier("local");

    surfaceTerms(5) //face 5

    @barrier("local");

    //accumulate in register pencil
    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
        if (j<p_Nq && i<p_Nq) {
          r_rhs[p_Nq-1] += s_flux[j][i];
        }
      }
    }

    @barrier("local");

    surfaceTerms(1) //face 1

    @barrier("local");

    //accumulate in register pencil
    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
        if (j==0 && i<p_Nq) {//face 1
          #pragma unroll p_Nq
          for (int n=0;n<p_Nq;n++) {
            r_rhs[n] += s_flux[n][i];
          }
        }
      }
    }

    @barrier("local");

    surfaceTerms(3) //face 3

    @barrier("local");

    //accumulate in register pencil
    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
        if (j==p_Nq-1 && i<p_Nq) {//face 3
          #pragma unroll p_Nq
          for (int n=0;n<p_Nq;n++) {
            r_rhs[n] += s_flux[n][i];
          }
        }
      }
    }

    @barrier("local");

    surfaceTerms(2) //face 2

    @barrier("local");

    //accumulate in register pencil
    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
        if (j<p_Nq && i==p_Nq-1) {//face 2
          #pragma unroll p_Nq
          for (int n=0;n<p_Nq;n++) {
            r_rhs[n] += s_flux[n][j];
          }
        }
      }
    }

    @barrier("local");

    surfaceTerms(4) //face 4

    @barrier("local");

    //accumulate in register pencil
    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
        if (j<p_Nq && i==0) {//face 4
          #pragma unroll p_Nq
          for (int n=0;n<p_Nq;n++) {
            r_rhs[n] += s_flux[n][j];
          }
        }
      }
    }

    @barrier("local");

    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
        if(i<p_Nq && j<p_Nq){
          #pragma unroll p_Nq
          for(int k=0;k<p_Nq;++k){
            const dlong gid = e*p_Np*p_Nvgeo+ k*p_Nq*p_Nq + j*p_Nq +i;
            const dfloat invJW = vgeo[gid + p_IJWID*p_Np];

            const dlong id = e*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;
            rhs[id] += invJW*r_rhs[k];
          }
        }
      }
    }
  }
}
