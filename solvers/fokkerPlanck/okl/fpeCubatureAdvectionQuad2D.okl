/*

The MIT License (MIT)

Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

// compute div(NU)  = div(uxu) using quadrature (weak form)
@kernel void fpeAdvectionCubatureVolumeQuad2D(const dlong Nelements,
                                    @restrict const  dfloat *  vgeo,
                                    @restrict const  dfloat *  cubvgeo,
                                    @restrict const  dfloat *  cubDT,
                                    @restrict const  dfloat *  cubPDT,
                                    @restrict const  dfloat *  cubInterp,
                                    @restrict const  dfloat *  cubProject,
                                              const  dfloat    t,
                                    @restrict const  dfloat *  cubx,
                                    @restrict const  dfloat *  cuby,
                                    @restrict const  dfloat *  cubz,
                                    @restrict const  dfloat *  q,
                                          @restrict  dfloat *  rhs){

  for(dlong eo=0;eo<Nelements;eo+=p_cubNblockV;@outer(0)){  // for all elements

    @shared dfloat s_q[p_cubNblockV][p_Nq][p_cubNq];
    @shared dfloat s_F[p_cubNblockV][p_cubNq][p_cubNq];
    @shared dfloat s_G[p_cubNblockV][p_cubNq][p_cubNq]; // holding scalar

    @shared dfloat s_cubInterp[p_Nq][p_cubNq];
    @shared dfloat s_cubProject[p_cubNq][p_Nq];
    @shared dfloat s_cubPDT[p_cubNq][p_Nq];

    @exclusive dfloat r_q;
    @exclusive dfloat r_F, r_G;

    //fetch the U and V values and store in flux arrays in @shared
    for(int es=0;es<p_cubNblockV;++es;@inner(2)){
      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          const dlong e = eo+es; // element in block
          if((e<Nelements) && (i<p_Nq) && (j<p_Nq)){
            const dlong id = e*p_Np + j*p_Nq+i;
            s_q[es][j][i] = q[id];
          }

          if ((es==0) && j<p_Nq) {
            s_cubInterp[j][i] = cubInterp[i+j*p_cubNq];
          }
          if ((es==0) && i<p_Nq) {
            s_cubProject[j][i] = cubProject[i+j*p_Nq];
            s_cubPDT[j][i] = cubPDT[i+j*p_Nq];
          }
        }
      }
    }

    @barrier("local");

    //interpolate in i, store in register
    for(int es=0;es<p_cubNblockV;++es;@inner(2)){
      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          if (j<p_Nq) {
            r_q = 0.;

            #pragma unroll p_Nq
            for (int n=0;n<p_Nq;n++) {
              const dfloat Ini = s_cubInterp[n][i];
              r_q += Ini*s_q[es][j][n];
            }
          }
        }
      }
    }

    @barrier("local");

    //write register back to @shared
    for(int es=0;es<p_cubNblockV;++es;@inner(2)){
      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          if (j<p_Nq) {
            s_q[es][j][i] = r_q;
          }
        }
      }
    }

    @barrier("local");

    //interpolate in j and store flux in register
    for(int es=0;es<p_cubNblockV;++es;@inner(2)){
      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          r_q = 0.;

          #pragma unroll p_Nq
          for (int n=0;n<p_Nq;n++) {
            const dfloat Inj = s_cubInterp[n][j];
            r_q += Inj*s_q[es][n][i];
          }

          const dlong e = eo+es; // element in block
          if(e<Nelements){
            const dlong gid = e*p_cubNp*p_Nvgeo+ j*p_cubNq +i;
            const dfloat drdx = cubvgeo[gid + p_RXID*p_cubNp];
            const dfloat drdy = cubvgeo[gid + p_RYID*p_cubNp];
            const dfloat dsdx = cubvgeo[gid + p_SXID*p_cubNp];
            const dfloat dsdy = cubvgeo[gid + p_SYID*p_cubNp];
            const dfloat JW   = cubvgeo[gid + p_JWID*p_cubNp];

            dfloat u=0.0, v=0.0;
            const dlong id = e*p_cubNp + j*p_cubNq +i;
            fpeAdvectionFlux2D(t, cubx[id], cuby[id], r_q, &u, &v);

            s_F[es][j][i] = JW*(drdx*u+drdy*v);
            s_G[es][j][i] = JW*(dsdx*u+dsdy*v);
          }
        }
      }
    }

    @barrier("local");

    //project/differentiate in j
    for(int es=0;es<p_cubNblockV;++es;@inner(2)){
      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          r_F = 0.; r_G = 0.;

          if (j<p_Nq) {
            #pragma unroll p_cubNq
            for (int n=0;n<p_cubNq;n++) {
              const dfloat Pnj = s_cubProject[n][j];
              const dfloat Dnj = s_cubPDT[n][j];
              r_F += Pnj*s_F[es][n][i];
              r_G += Dnj*s_G[es][n][i];
            }
          }
        }
      }
    }

    @barrier("local");

    //write register back to @shared
    for(int es=0;es<p_cubNblockV;++es;@inner(2)){
      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          if (j<p_Nq) {
            s_F[es][j][i] = r_F;
            s_G[es][j][i] = r_G;
          }
        }
      }
    }

    @barrier("local");

    //project/differentiate in i and write back
    for(int es=0;es<p_cubNblockV;++es;@inner(2)){
      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          const dlong e = eo+es; // element in block
          if((e<Nelements) && (i<p_Nq) && (j<p_Nq)){
            const dlong gid = e*p_Np*p_Nvgeo+ j*p_Nq +i;
            const dfloat invJW = vgeo[gid + p_IJWID*p_Np];

            dfloat rhsqn = 0.f;

            #pragma unroll p_cubNq
            for(int n=0;n<p_cubNq;++n){
              const dfloat Pni = s_cubProject[n][i];
              const dfloat Dni = s_cubPDT[n][i];

              rhsqn += Dni*s_F[es][j][n]
                      +Pni*s_G[es][j][n];
            }

            const dlong id = e*p_Np + j*p_Nq + i;
            rhs[id] = invJW*rhsqn;
          }
        }
      }
    }
  }
}



void surfaceTerms(int es, int face, int m, int i, int j,
                      @shared dfloat s_cubProject[p_cubNq][p_Nq],
                      @shared dfloat s_flux[p_cubNblockS][p_Nfaces][p_cubNq],
                      @shared dfloat s_rhsq[p_cubNblockS][p_Nq][p_Nq]){

  dfloat rhsqn = 0.f;

  #pragma unroll p_cubNq
  for(int n=0;n<p_cubNq;++n){
    const dfloat Pni = s_cubProject[n][m];
    rhsqn  += Pni*s_flux[es][face][n];
  }
  s_rhsq[es][j][i] += rhsqn;
}


@kernel void fpeAdvectionCubatureSurfaceQuad2D(const dlong Nelements,
                                     @restrict const  dfloat *  vgeo,
                                     @restrict const  dfloat *  cubsgeo,
                                     @restrict const  dlong  *  vmapM,
                                     @restrict const  dlong  *  vmapP,
                                     @restrict const  int    *  EToB,
                                     @restrict const  dfloat *  cubInterp,
                                     @restrict const  dfloat *  cubProject,
                                               const  dfloat    t,
                                     @restrict const  dfloat *  intx,
                                     @restrict const  dfloat *  inty,
                                     @restrict const  dfloat *  intz,
                                     @restrict const  dfloat *  q,
                                     @restrict dfloat *  rhs){

  // for all elements
  for(dlong eo=0;eo<Nelements;eo+=p_cubNblockS;@outer(0)){
    // @shared storage for flux terms
    @shared dfloat s_rhsq[p_cubNblockS][p_Nq][p_Nq];

    @shared dfloat s_qM[p_cubNblockS][p_Nfaces][p_cubNq];
    @shared dfloat s_qP[p_cubNblockS][p_Nfaces][p_cubNq];

    // reuse @shared memory buffers
    #define s_flux s_qM

    @exclusive dfloat r_qMn[p_Nfaces], r_qPn[p_Nfaces];

    @shared dfloat s_cubInterp[p_Nq][p_cubNq];
    @shared dfloat s_cubProject[p_cubNq][p_Nq];

    // for all face nodes of all elements
    for(int es=0;es<p_cubNblockS;++es;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
        const dlong e = eo + es;
        if(e<Nelements && i<p_Nq){
          #pragma unroll p_Nfaces
          for (int face=0;face<p_Nfaces;face++) {
            const dlong id  = e*p_Nfp*p_Nfaces + face*p_Nq + i;
            const dlong idM = vmapM[id];
            const dlong idP = vmapP[id];

            // load negative and positive trace node values of velocity
            s_qM[es][face][i] = q[idM];
            s_qP[es][face][i] = q[idP];
          }
        }

        //zero out resulting surface contributions
        if (i<p_Nq) {
          #pragma unroll p_Nq
          for(int j=0;j<p_Nq;++j){
            s_rhsq[es][j][i] = 0.;
          }
        }

        //fetch reference operators
        if (es==0) {
          #pragma unroll p_Nq
          for(int j=0;j<p_Nq;++j){
            s_cubInterp[j][i] = cubInterp[i+j*p_cubNq];
          }

          if (i<p_Nq) {
            #pragma unroll p_cubNq
            for(int j=0;j<p_cubNq;++j){
              s_cubProject[j][i] = cubProject[i+j*p_Nq];
            }
          }
        }
      }
    }

    @barrier("local");

    //interpolate traces, store flux in register
    for(int es=0;es<p_cubNblockS;++es;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
        #pragma unroll p_Nfaces
        for (int face=0;face<p_Nfaces;face++) {
          r_qMn[face] = 0.; r_qPn[face] = 0.;
        }

        #pragma unroll p_Nq
        for (int n=0;n<p_Nq;n++) {
          const dfloat Ini = s_cubInterp[n][i];

          #pragma unroll p_Nfaces
          for (int face=0;face<p_Nfaces;face++) {
            r_qMn[face]  += Ini*s_qM[es][face][n];
            r_qPn[face]  += Ini*s_qP[es][face][n];
          }
        }
      }
    }

    @barrier("local");

    //write fluxes to @shared
    for(int es=0;es<p_cubNblockS;++es;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
        const dlong e = eo + es;
        if(e<Nelements){
          #pragma unroll p_Nfaces
          for (int face=0;face<p_Nfaces;face++) {
            const dlong sk = e*p_cubNq*p_Nfaces + face*p_cubNq + i;
            const dfloat nx = cubsgeo[sk*p_Nsgeo+p_NXID];
            const dfloat ny = cubsgeo[sk*p_Nsgeo+p_NYID];
            const dfloat WsJ = cubsgeo[sk*p_Nsgeo+p_WSJID];

            const dfloat qM = r_qMn[face];
            dfloat qP = r_qPn[face];

            const int bc = EToB[face+p_Nfaces*e];
            const dlong id = e*p_Nfaces*p_cubNq + face*p_cubNq + i;
            if(bc>0) {
              dfloat qxP=0.0, qyP=0.0;
              fpeBoundaryConditions2D(bc, t, intx[id], inty[id], nx, ny,
                                       qM, 0.0, 0.0,
                                       &qP, &qxP, &qyP);
            }

            dfloat fxM=0.0, fyM=0.0;
            dfloat fxP=0.0, fyP=0.0;
            fpeAdvectionFlux2D(t, intx[id], inty[id], qM, &fxM, &fyM);
            fpeAdvectionFlux2D(t, intx[id], inty[id], qP, &fxP, &fyP);

            const dfloat ndotfM = nx*fxM + ny*fyM;
            const dfloat ndotfP = nx*fxP + ny*fyP;

            // Find max normal velocity on the face
            dfloat uM=0.0, vM=0.0;
            dfloat uP=0.0, vP=0.0;
            fpeMaxWaveSpeed2D(t, intx[id], inty[id], qM, &uM, &vM);
            fpeMaxWaveSpeed2D(t, intx[id], inty[id], qP, &uP, &vP);

            const dfloat unM   = fabs(nx*uM + ny*vM);
            const dfloat unP   = fabs(nx*uP + ny*vP);
            const dfloat unMax = (unM > unP) ? unM : unP;

            s_flux[es][face][i] = -WsJ*(.5f*(ndotfP+ndotfM  + unMax*(qM-qP) ));
          }
        }
      }
    }

    @barrier("local");

    // for all face nodes of all elements
    // face 0 & 2
    for(int es=0;es<p_cubNblockS;++es;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
        if(i<p_Nq){
          //          surfaceTerms(0,i,i,0     );
          surfaceTerms(es, 0, i, i, 0,
                            s_cubProject, s_flux, s_rhsq);

          //surfaceTerms(2,i,i,p_Nq-1);
          surfaceTerms(es, 2, i, i, p_Nq-1,
                            s_cubProject, s_flux, s_rhsq);
        }
      }
    }

    @barrier("local");

    // face 1 & 3
    for(int es=0;es<p_cubNblockS;++es;@inner(1)){
      for(int j=0;j<p_cubNq;++j;@inner(0)){
        if(j<p_Nq){
          //          surfaceTerms(1,j,p_Nq-1,j);
          surfaceTerms(es, 1, j, p_Nq-1, j,
                           s_cubProject, s_flux, s_rhsq);

          //          surfaceTerms(3,j,0     ,j);
          surfaceTerms(es, 3, j, 0, j,
                            s_cubProject, s_flux, s_rhsq);
        }
      }
    }

    @barrier("local");

    for(int es=0;es<p_cubNblockS;++es;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
        const dlong e = eo + es;
        if(e<Nelements && i<p_Nq){
          #pragma unroll p_Nq
          for(int j=0;j<p_Nq;++j){
            const dlong gid = e*p_Np*p_Nvgeo+ j*p_Nq +i;
            const dfloat invJW = vgeo[gid + p_IJWID*p_Np];

            const dlong id = e*p_Np + j*p_Nq + i;
            rhs[id] += invJW*s_rhsq[es][j][i];
          }
        }
      }
    }
  }
}

