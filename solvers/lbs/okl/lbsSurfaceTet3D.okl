



void applyBC3D(const int bc, const int fldm, const int fldp, const dfloat dt, 
               const dfloat en, const dfloat nx, const dfloat ny, const dfloat nz,
               const dfloat ew, const dfloat ex, const dfloat ey, const dfloat ez,
               const dfloat rb, const dfloat ub, const dfloat vb, const dfloat wb,
               const dfloat fn, const dfloat *qm, dfloat *qp){

// wall: could be with velocity though Bounce backonly nonequilibrium portion
if (bc==1 || bc==2 || bc==4 || bc==5){
  qp[fldm] = en < 0 ?  (qm[fldp] + 2.f*ew*rb*(ex*ub + ey*vb + ez*wb)*p_ic2) : qm[fldm];  
}else if(bc==3){ 
  const dfloat un = (ex*ub + ey*vb + ez*wb); 
  dfloat feq = rb*ew*(1.0f + p_ic2*un + 0.5f*p_ic4*un*un - 0.5f*p_ic2*(ub*ub + vb*vb + wb*wb));
  feq = feq*(1.f - 0.5f*dt*fn);
  qp[fldm] = en < 0 ?  feq : qm[fldm];  
}

} 
             


@kernel void lbsSurfaceTet3D(const dlong Nelements,
                            // @restrict const  dlong  *  elementIds,
                            @restrict const  dfloat *  sgeo,
                            @restrict const  dfloat *  LIFT,
                            @restrict const  dlong  *  vmapM,
                            @restrict const  dlong  *  vmapP,
                            @restrict const  int    *  EToB,
                            @restrict const  dfloat *  x,
                            @restrict const  dfloat *  y,
                            @restrict const  dfloat *  z,
                            const dfloat dt,
                            const dfloat time,
                            const dfloat nu,
                            @restrict const  int *  LMAP,
                            @restrict const  dfloat *  LBM,
                            @restrict const  dfloat *  F,
                            @restrict const  dfloat *  U,
                            @restrict const  dfloat *  q,
                            @restrict dfloat *  rhsq){

  // for all elements
  for(dlong et=0;et<Nelements;et++;@outer(0)){

    @shared dfloat s_fluxq[p_Nfields][p_Nfp*p_Nfaces];

    @exclusive dlong e;

    // for all face nodes of all elements
      for(int n=0;n<p_maxNodes;++n;@inner(0)){ // maxNodes = max(Nfp*Nfaces,Np)
        if(et<Nelements){
          // e = elementIds[et];
          e = et; 
          if(n<p_Nfp*p_Nfaces){
            // find face that owns this node
            const int face = n/p_Nfp;

            // load surface geofactors for this face
            const dlong sid   = p_Nsgeo*(e*p_Nfaces+face);
            const dfloat nx   = sgeo[sid+p_NXID];
            const dfloat ny   = sgeo[sid+p_NYID];
            const dfloat nz   = sgeo[sid+p_NZID];
            const dfloat sJ   = sgeo[sid+p_SJID];
            const dfloat invJ = sgeo[sid+p_IJID];

            const dfloat sc = sJ*invJ;

            const dlong id  = e*p_Nfp*p_Nfaces + n;
            const dlong idM = vmapM[id];
            const dlong idP = vmapP[id];

            // load traces
            const dlong eM = e;
            const dlong eP = idP/p_Np;
            const int vidM = idM%p_Np;
            const int vidP = idP%p_Np;

            const dlong qidM = eM*p_Np*p_Nfields + vidM;
            const dlong qidP = eP*p_Np*p_Nfields + vidP;
                
            // apply boundary condition
            const int bc = EToB[face+p_Nfaces*e];
            
            dfloat rm, um, vm, wm, rb, ub, vb, wb; 

            if(bc>0 || bc==-1){
              const dlong uidM = eM*p_Np*p_Nmacro + vidM; 
              rm   = U[uidM+ 0*p_Np];  
              um   = U[uidM+ 1*p_Np];  
              vm   = U[uidM+ 2*p_Np];  
              wm   = U[uidM+ 3*p_Np];  

             lbsBoundaryConditions3D(bc, nu, time, x[idM], y[idM], z[idM], nx, ny, nz,  
                                     rm, um, vm, wm,
                                     &rb, &ub, &vb, &wb); 
            }


            dfloat qm[p_Nfields]; 
            dfloat qp[p_Nfields]; 

            #pragma unroll p_Nfields
            for(int fld=0; fld<p_Nfields;++fld){
              qm[fld] = q[qidM + fld*p_Np];
              qp[fld] = q[qidP + fld*p_Np];
            }


            #pragma unroll p_Nfields
            for(int fld=0; fld<p_Nfields;++fld){
              const dfloat fn = F[qidM + fld*p_Np]; 
              const dfloat ex = LBM[fld + 1*p_Nfields]; 
              const dfloat ey = LBM[fld + 2*p_Nfields]; 
              const dfloat ez = LBM[fld + 3*p_Nfields]; 
              const dfloat en = ex*nx + ey*ny + ez*nz; // need to modify for bc

              if(bc>0){
                const dfloat ew   =  LBM[fld + 0*p_Nfields];
                const int   idr   =  LMAP[fld];
                applyBC3D(bc, fld, idr, dt, en, nx, ny, nz, ew, ex, ey, ez, rb, ub, vb, wb, fn, qm, qp); 
              }
             
              s_fluxq[fld][n] = 0.5f*sc*(en -fabs(en))*(qm[fld] - qp[fld]);
            }
          }
        }
      }

    // wait for all @shared memory writes of the previous inner loop to complete
    @barrier("local");

    // for each node in the element
      for(int n=0;n<p_maxNodes;++n;@inner(0)){
          if(n<p_Np){
            // const int id = nrhs*p_Nfields*(p_Np*e + n) + p_Nfields*shift;
            const dlong id = e*p_Nfields*p_Np + n ;

            dfloat rhsf[p_Nfields]; 
            #pragma unroll p_Nfields
            for(int fld=0; fld<p_Nfields; ++fld){
              rhsf[fld] = rhsq[id+fld*p_Np];
            }

            // rhs += LIFT*((sJ/J)*(A*nx+B*ny)*(q^* - q^-))
            #pragma unroll p_NfacesNfp
              for(int m=0;m<p_NfacesNfp;++m){
                dfloat L = LIFT[n+m*p_Np];

                #pragma unroll p_Nfields
                for(int fld=0; fld<p_Nfields; ++fld){
                 rhsf[fld] += L*s_fluxq[fld][m];
                }
                
              }

            #pragma unroll p_Nfields
            for(int fld=0; fld<p_Nfields; ++fld){
             rhsq[id+fld*p_Np]= rhsf[fld];
            }

          }
        }
      }
}