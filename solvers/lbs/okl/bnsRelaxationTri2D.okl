/*

The MIT License (MIT)

Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

#define p_Nvars 3
#define p_Nrelax 3

@kernel void bnsRelaxationTri2D(const dlong Nelements,
                               @restrict const  dlong *  elementIds,
                               @restrict const  dfloat *  vgeo,
                               @restrict const  dfloat *  cubvgeo,
                               @restrict const  dfloat *  cubInterp,
                               @restrict const  dfloat *  cubProject,
                               const int semiAnalytic,
                               const dfloat tauInv,
                               @restrict const  dfloat *  q,
                               @restrict dfloat *  rhsq){

  for(dlong eo=0;eo<Nelements;eo+=p_NblockCub;@outer(0)){  // for all elements

    // @shared memory for q at nodes
    @shared dfloat s_q[p_NblockCub][p_Nvars][p_Np];

    // sub-group of p_Np cubature node interpolants of N4,N5,N6
    @shared dfloat s_cubqN[p_NblockCub][p_Nrelax][p_cubNp];

    @exclusive dlong e;

    // prefetch q to @shared
    for(int es=0;es<p_NblockCub;++es;@inner(1)){
      for(int n=0;n<p_cubNp;++n;@inner(0)){
        const dlong et = eo+es; // element in block
        if(et<Nelements){
          e = elementIds[et];

          //read the first Nvars fields to shmem
          if(n<p_Np){
            const dlong id = e*p_Nfields*p_Np + n;
            #pragma unroll p_Nvars
            for(int fld=0; fld<p_Nvars;++fld){
              s_q[es][fld][n] = q[id+fld*p_Np];
            }
          }
        }
      }
    }

    // make sure all node data is loaded into @shared
    @barrier("local");

    // interpolate q to cubature
    for(int es=0;es<p_NblockCub;++es;@inner(1)){
      for(int n=0;n<p_cubNp;++n;@inner(0)){
        const dlong et = eo+es; // element in block
        if(et<Nelements){

          dfloat r_cubq[p_Nvars];
          #pragma unroll p_Nvars
          for(int fld=0; fld<p_Nvars;++fld){
            r_cubq[fld] = 0.f;
          }

          #pragma unroll p_Np
          for(int m=0;m<p_Np;++m){
            const dfloat Icn  = cubInterp[m*p_cubNp+n];
            #pragma unroll p_Nvars
            for(int fld=0; fld<p_Nvars; fld++){
              r_cubq[fld] += Icn*s_q[es][fld][m];
            }
          }

          // BGK relaxation approximation to the Boltzmann collision operator
          s_cubqN[es][0][n] = tauInv*r_cubq[1]*r_cubq[2]/(r_cubq[0]          );
          s_cubqN[es][1][n] = tauInv*r_cubq[1]*r_cubq[1]/(r_cubq[0]*sqrt(2.0));
          s_cubqN[es][2][n] = tauInv*r_cubq[2]*r_cubq[2]/(r_cubq[0]*sqrt(2.0));
        }
      }
    }

    //make sure all cubature node data is loaded into @shared
    @barrier("local");

    // partial projection to nodes from cubature-sub-group
    for(int es=0;es<p_NblockCub;++es;@inner(1)){
      for(int n=0;n<p_cubNp;++n;@inner(0)){
        const dlong et = eo+es; // element in block
        if(et<Nelements){
          if(n<p_Np){
            dfloat r_qN[p_Nrelax];

            // Add linear part of relaxation operator
            if (semiAnalytic) {
              #pragma unroll p_Nrelax
              for(int fld=0; fld<p_Nrelax; fld++){
                r_qN[fld] = 0.0;
              }
            } else {
              const dlong id = e*p_Nfields*p_Np + n;
              #pragma unroll p_Nrelax
              for(int fld=0; fld<p_Nrelax; fld++){
                r_qN[fld] = -tauInv*q[id+(fld+p_Nvars)*p_Np];
              }
            }

            #pragma unroll p_cubNp
            for(int i=0;i<p_cubNp;++i){
              const dfloat Pnc  = cubProject[i*p_Np+n];
              for(int fld=0; fld<p_Nrelax; fld++){
                r_qN[fld] += Pnc*s_cubqN[es][fld][i];
              }
            }

            const dlong base = e*p_Nfields*p_Np + n;
            #pragma unroll p_Nrelax
            for(int fld=0; fld<p_Nrelax; fld++){
              rhsq[base + (fld+p_Nvars)*p_Np] += r_qN[fld];
            }
          }
        }
      }
    }
  }
}

@kernel void bnsPmlRelaxationCubTri2D(const dlong pmlNelements,
                                  @restrict const  dlong  *  pmlElementIds,
                                  @restrict const  dlong  *  pmlIds,
                                  @restrict const  dfloat *  vgeo,
                                  @restrict const  dfloat *  cubvgeo,
                                  @restrict const  dfloat *  cubInterp,
                                  @restrict const  dfloat *  cubProject,
                                  @restrict const  dfloat *  pmlSigma,
                                            const dfloat pmlAlpha,
                                            const int semiAnalytic,
                                            const dfloat tauInv,
                                  @restrict const  dfloat *  q,
                                  @restrict const  dfloat *  pmlq,
                                        @restrict  dfloat *  rhsq,
                                        @restrict  dfloat *  rhspmlq){

  for(dlong et=0;et<pmlNelements;et++;@outer(0)){  // for all elements

    // @shared memory for q at nodes
    @shared dfloat  s_q[p_Nfields][p_Np];
    @shared dfloat s_qx[p_Nfields][p_Np];
    @shared dfloat s_qy[p_Nfields][p_Np];

    // sub-group of p_Np cubature node interpolants of N4,N5,N6
    @shared dfloat s_cubq[p_Nfields][p_cubNp];
    @shared dfloat s_cubqx[p_Nfields][p_cubNp];
    @shared dfloat s_cubqy[p_Nfields][p_cubNp];

    @exclusive dlong e, pmlId;

    // prefetch q to @shared
    for(int n=0;n<p_cubNp;++n;@inner(0)){
      e     = pmlElementIds[et];
      pmlId = pmlIds[et];

      if(n<p_Np){

        const dlong id  = e*p_Nfields*p_Np + n;
        const dlong pid = pmlId*p_Npmlfields*p_Np + n;

        #pragma unroll p_Nfields
        for(int fld=0; fld<p_Nfields;++fld){
          s_q[fld][n]   = q[id +fld*p_Np];
          s_qx[fld][n]  = pmlq[pid + 0*p_Np*p_Nfields + fld*p_Np];
          s_qy[fld][n]  = pmlq[pid + 1*p_Np*p_Nfields + fld*p_Np];
        }
      }
    }

    // make sure all node data is loaded into @shared
    @barrier("local");

    // interpolate q to cubature
    for(int n=0;n<p_cubNp;++n;@inner(0)){
      if(n<p_cubNp){
        dfloat r_q[p_Nfields];
        dfloat r_qx[p_Nfields];
        dfloat r_qy[p_Nfields];

        #pragma unroll p_Nfields
        for(int fld=0; fld<p_Nfields ; fld++){
          r_q[fld]  = 0.f;
          r_qx[fld] = 0.f;
          r_qy[fld] = 0.f;
        }

        #pragma unroll p_Np
        for(int m=0;m<p_Np;++m){
          const dfloat Icn  = cubInterp[m*p_cubNp+n];
          #pragma unroll p_Nfields
          for(int fld=0; fld<p_Nfields;++fld){
            r_q[fld]  += Icn*s_q[fld][m];
            r_qx[fld] += Icn*s_qx[fld][m];
            r_qy[fld] += Icn*s_qy[fld][m];
          }
        }

        // Prefetch sigma
        const dfloat sigmaxe = pmlSigma[2*pmlId*p_cubNp + 0*p_cubNp + n];
        const dfloat sigmaye = pmlSigma[2*pmlId*p_cubNp + 1*p_cubNp + n];
        // M-PML sigma midification
        const dfloat msigmaxe = sigmaxe + sigmaye*pmlAlpha;
        const dfloat msigmaye = sigmaye + sigmaxe*pmlAlpha;

        #pragma unroll p_Nfields
        for(int fld=0; fld<p_Nfields ; fld++){
          s_cubqx[fld][n]= -msigmaxe*r_qx[fld];
          s_cubqy[fld][n]= -msigmaye*r_qy[fld];
          s_cubq[fld][n] = -msigmaxe*r_qx[fld]-msigmaye*r_qy[fld];
        }

        if(semiAnalytic){
          // BGK relaxation approximation to the Boltzmann collision operator
          s_cubq[3][n] += tauInv*(r_q[1]*r_q[2]/(r_q[0]          ));
          s_cubq[4][n] += tauInv*(r_q[1]*r_q[1]/(r_q[0]*sqrt(2.0)));
          s_cubq[5][n] += tauInv*(r_q[2]*r_q[2]/(r_q[0]*sqrt(2.0)));
        }else{
          // BGK relaxation approximation to the Boltzmann collision operator
          s_cubq[3][n] -= tauInv*(r_q[3] - r_q[1]*r_q[2]/(r_q[0]          ));
          s_cubq[4][n] -= tauInv*(r_q[4] - r_q[1]*r_q[1]/(r_q[0]*sqrt(2.0)));
          s_cubq[5][n] -= tauInv*(r_q[5] - r_q[2]*r_q[2]/(r_q[0]*sqrt(2.0)));
        }
      }
    }

    // make sure all cubature node data is loaded into @shared
    @barrier("local");

    // partial projection to nodes from cubature-sub-group
    for(int n=0;n<p_cubNp;++n;@inner(0)){

      if(n<p_Np){

        dfloat r_rhsq[p_Nfields];
        dfloat r_rhsqx[p_Nfields];
        dfloat r_rhsqy[p_Nfields];

        #pragma unroll p_Nfields
        for(int fld=0; fld<p_Nfields;++fld){
          r_rhsq[fld]  = 0.f;
          r_rhsqx[fld] = 0.f;
          r_rhsqy[fld] = 0.f;
        }

        // use temporaries for part sums for N4,N5,N6 because of @exclusives
        #pragma unroll p_cubNp
        for(int m=0;m<p_cubNp;++m){
          const dfloat Pnc  = cubProject[m*p_Np+n];
           #pragma unroll p_Nfields
           for(int fld=0; fld<p_Nfields; fld++){
            r_rhsq [fld] += Pnc*s_cubq[fld][m];
            r_rhsqx[fld] += Pnc*s_cubqx[fld][m];
            r_rhsqy[fld] += Pnc*s_cubqy[fld][m];
           }
        }

        // Update
        const dlong rhsId    = e*p_Nfields*p_Np + n;
        const dlong pmlrhsId = pmlId*p_Npmlfields*p_Np + n;

        #pragma unroll p_Nfields
        for(int fld=0; fld<p_Nfields;++fld){
          rhspmlq[pmlrhsId + 0*p_Np*p_Nfields + fld*p_Np] += r_rhsqx[fld];
          rhspmlq[pmlrhsId + 1*p_Np*p_Nfields + fld*p_Np] += r_rhsqy[fld];
          rhsq[rhsId + fld*p_Np] += r_rhsq[fld];
        }
      }
    }
  }
}
