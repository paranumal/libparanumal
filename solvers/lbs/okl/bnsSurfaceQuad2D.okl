/*

The MIT License (MIT)

Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

#define p_isq12 (1.f/sqrt(12.f))
#define p_isq6 (1.f/sqrt(6.f))

void upwind(const dfloat nx, const dfloat ny, const dfloat c,
            const dfloat q1M, const dfloat q2M, const dfloat q3M,
            const dfloat q4M, const dfloat q5M, const dfloat q6M,
            const dfloat q1B, const dfloat q2B, const dfloat q3B,
            const dfloat q4B, const dfloat q5B, const dfloat q6B,
            dfloat * qflux){

  const dfloat dq1 = 0.5f*(q1B - q1M) - p_isq12*(nx*(q2B-q2M) + ny*(q3B-q3M));
  const dfloat dq2 = 0.5f*(q2B - q2M) - p_isq12*(nx*(q1B-q1M)) - p_isq6*nx*(q5B-q5M) - 0.5f*ny*(q4B-q4M);
  const dfloat dq3 = 0.5f*(q3B - q3M) - p_isq12*(ny*(q1B-q1M)) - p_isq6*ny*(q6B-q6M) - 0.5f*nx*(q4B-q4M);
  const dfloat dq4 = 0.5f*(q4B - q4M) - 0.5f*nx*(q3B-q3M) - 0.5f*ny*(q2B-q2M);
  const dfloat dq5 = 0.5f*(q5B - q5M) - p_isq6*nx*(q2B-q2M);
  const dfloat dq6 = 0.5f*(q6B - q6M) - p_isq6*ny*(q3B-q3M);

  qflux[0] = c*(nx*dq2+ny*dq3);
  qflux[1] = c*(nx*(dq1+sqrt(2.0)*dq5)+ny*dq4);
  qflux[2] = c*(nx*dq4+ny*(dq1+sqrt(2.0)*dq6));
  qflux[3] = c*(nx*dq3+ny*dq2);
  qflux[4] = c*(nx*sqrt(2.0)*dq2);
  qflux[5] = c*(ny*sqrt(2.0)*dq3);
}

void surfaceTerms(const int e,
                  const int es,
                  const int sk,
                  const int face,
                  const int i,
                  const int j,
                  const dfloat *sgeo,
                  const dfloat c,
                  const dfloat nu,
                  const dfloat time,
                  const dfloat *x,
                  const dfloat *y,
                  const int *vmapM,
                  const int *vmapP,
                  const int *EToB,
                  const dfloat *q,
                  dfloat s_fluxq[p_NblockS][p_Nfields][p_Nq][p_Nq]){

  const dfloat nx = sgeo[sk*p_Nsgeo+p_NXID];
  const dfloat ny = sgeo[sk*p_Nsgeo+p_NYID];
  const dfloat sJ = sgeo[sk*p_Nsgeo+p_SJID];
  const dfloat invWJ = sgeo[sk*p_Nsgeo+p_WIJID];

  const dlong  idM = vmapM[sk];
  const dlong  idP = vmapP[sk];

  const dlong eM = e;
  const dlong eP = idP/p_Np;
  const int vidM = idM%p_Np;
  const int vidP = idP%p_Np;

  const dlong qidM = eM*p_Np*p_Nfields + vidM;
  const dlong qidP = eP*p_Np*p_Nfields + vidP;

  const dfloat q1M = q[qidM + 0*p_Np];
  const dfloat q2M = q[qidM + 1*p_Np];
  const dfloat q3M = q[qidM + 2*p_Np];
  const dfloat q4M = q[qidM + 3*p_Np];
  const dfloat q5M = q[qidM + 4*p_Np];
  const dfloat q6M = q[qidM + 5*p_Np];

  dfloat q1P = q[qidP + 0*p_Np];
  dfloat q2P = q[qidP + 1*p_Np];
  dfloat q3P = q[qidP + 2*p_Np];
  dfloat q4P = q[qidP + 3*p_Np];
  dfloat q5P = q[qidP + 4*p_Np];
  dfloat q6P = q[qidP + 5*p_Np];


  const int bc = EToB[face+p_Nfaces*e];
  if(bc>0){
    //convert to primitives
    const dfloat rM   = q1M;
    const dfloat uM   = c*q2M/rM;
    const dfloat vM   = c*q3M/rM;
    const dfloat s12M = -c*c*(          q4M - q2M*q3M/q1M);
    const dfloat s11M = -c*c*(sqrt(2.0)*q5M - q2M*q2M/q1M);
    const dfloat s22M = -c*c*(sqrt(2.0)*q6M - q3M*q3M/q1M);

    dfloat rP, uP, vP, s11P, s12P, s22P;
    bnsBoundaryConditions2D(bc, c, nu, time, x[idM], y[idM], nx, ny,
                            rM, uM, vM, s11M, s12M, s22M,
                            &rP, &uP, &vP, &s11P, &s12P, &s22P);

    //convert back
    q2P = rP*uP/c;
    q3P = rP*vP/c;
    q4P = (-s12P/(c*c) + q2P*q3P/q1P);
    q5P = (-s11P/(c*c) + q2P*q2P/q1P)/sqrt(2.0);
    q6P = (-s22P/(c*c) + q3P*q3P/q1P)/sqrt(2.0);
  }

  dfloat qflux[p_Nfields];
  upwind(nx, ny, c,
         q1M, q2M, q3M, q4M, q5M, q6M,
         q1P, q2P, q3P, q4P, q5P, q6P,
         qflux);

  const dfloat sc = invWJ*sJ;
  s_fluxq[es][0][j][i] += sc*(-qflux[0]);
  s_fluxq[es][1][j][i] += sc*(-qflux[1]);
  s_fluxq[es][2][j][i] += sc*(-qflux[2]);
  s_fluxq[es][3][j][i] += sc*(-qflux[3]);
  s_fluxq[es][4][j][i] += sc*(-qflux[4]);
  s_fluxq[es][5][j][i] += sc*(-qflux[5]);
}

void upwind_split(const dfloat nx, const dfloat ny, const dfloat c,
            const dfloat q1M, const dfloat q2M, const dfloat q3M,
            const dfloat q4M, const dfloat q5M, const dfloat q6M,
            const dfloat q1B, const dfloat q2B, const dfloat q3B,
            const dfloat q4B, const dfloat q5B, const dfloat q6B,
            dfloat * qxflux, dfloat * qyflux){

  const dfloat dq1 = 0.5f*(q1B - q1M) - p_isq12*(nx*(q2B-q2M) + ny*(q3B-q3M));
  const dfloat dq2 = 0.5f*(q2B - q2M) - p_isq12*(nx*(q1B-q1M)) - p_isq6*nx*(q5B-q5M) - 0.5f*ny*(q4B-q4M);
  const dfloat dq3 = 0.5f*(q3B - q3M) - p_isq12*(ny*(q1B-q1M)) - p_isq6*ny*(q6B-q6M) - 0.5f*nx*(q4B-q4M);
  const dfloat dq4 = 0.5f*(q4B - q4M) - 0.5f*nx*(q3B-q3M) - 0.5f*ny*(q2B-q2M);
  const dfloat dq5 = 0.5f*(q5B - q5M) - p_isq6*nx*(q2B-q2M);
  const dfloat dq6 = 0.5f*(q6B - q6M) - p_isq6*ny*(q3B-q3M);

  qxflux[0] = c*nx*dq2;
  qxflux[1] = c*nx*(dq1+sqrt(2.0)*dq5);
  qxflux[2] = c*nx*dq4;
  qxflux[3] = c*nx*dq3;
  qxflux[4] = c*nx*sqrt(2.0)*dq2;
  qxflux[5] = 0.0;
  qyflux[0] = c*ny*dq3;
  qyflux[1] = c*ny*dq4;
  qyflux[2] = c*ny*(dq1+sqrt(2.0)*dq6);
  qyflux[3] = c*ny*dq2;
  qyflux[4] = 0.0;
  qyflux[5] = c*ny*sqrt(2.0)*dq3;
}

void surfaceTerms_split(const int e,
                     const int es,
                     const int sk,
                     const int face,
                     const int i,
                     const int j,
                     const dfloat *sgeo,
                     const dfloat c,
                     const dfloat nu,
                     const dfloat time,
                     const dfloat *x,
                     const dfloat *y,
                     const int *vmapM,
                     const int *vmapP,
                     const int *EToB,
                     const dfloat *q,
                     dfloat s_fluxqx[p_NblockS][p_Nfields][p_Nq][p_Nq],
                     dfloat s_fluxqy[p_NblockS][p_Nfields][p_Nq][p_Nq]){

  const dfloat nx = sgeo[sk*p_Nsgeo+p_NXID];
  const dfloat ny = sgeo[sk*p_Nsgeo+p_NYID];
  const dfloat sJ = sgeo[sk*p_Nsgeo+p_SJID];
  const dfloat invWJ = sgeo[sk*p_Nsgeo+p_WIJID];

  const dlong  idM = vmapM[sk];
  const dlong  idP = vmapP[sk];

  const dlong eM = e;
  const dlong eP = idP/p_Np;
  const int vidM = idM%p_Np;
  const int vidP = idP%p_Np;

  const dlong qidM = eM*p_Np*p_Nfields + vidM;
  const dlong qidP = eP*p_Np*p_Nfields + vidP;

  const dfloat q1M = q[qidM + 0*p_Np];
  const dfloat q2M = q[qidM + 1*p_Np];
  const dfloat q3M = q[qidM + 2*p_Np];
  const dfloat q4M = q[qidM + 3*p_Np];
  const dfloat q5M = q[qidM + 4*p_Np];
  const dfloat q6M = q[qidM + 5*p_Np];

  dfloat q1P = q[qidP + 0*p_Np];
  dfloat q2P = q[qidP + 1*p_Np];
  dfloat q3P = q[qidP + 2*p_Np];
  dfloat q4P = q[qidP + 3*p_Np];
  dfloat q5P = q[qidP + 4*p_Np];
  dfloat q6P = q[qidP + 5*p_Np];


  const int bc = EToB[face+p_Nfaces*e];
  if(bc>0){
    //convert to primitives
    const dfloat rM   = q1M;
    const dfloat uM   = c*q2M/rM;
    const dfloat vM   = c*q3M/rM;
    const dfloat s12M = -c*c*(          q4M - q2M*q3M/q1M);
    const dfloat s11M = -c*c*(sqrt(2.0)*q5M - q2M*q2M/q1M);
    const dfloat s22M = -c*c*(sqrt(2.0)*q6M - q3M*q3M/q1M);

    dfloat rP, uP, vP, s11P, s12P, s22P;
    bnsBoundaryConditions2D(bc, c, nu, time, x[idM], y[idM], nx, ny,
                            rM, uM, vM, s11M, s12M, s22M,
                            &rP, &uP, &vP, &s11P, &s12P, &s22P);

    //convert back
    q2P = rP*uP/c;
    q3P = rP*vP/c;
    q4P = (-s12P/(c*c) + q2P*q3P/q1P);
    q5P = (-s11P/(c*c) + q2P*q2P/q1P)/sqrt(2.0);
    q6P = (-s22P/(c*c) + q3P*q3P/q1P)/sqrt(2.0);
  }

  dfloat fluxqx[p_Nfields], fluxqy[p_Nfields];
  upwind_split(nx, ny, c,
         q1M, q2M, q3M, q4M, q5M, q6M,
         q1P, q2P, q3P, q4P, q5P, q6P,
         fluxqx, fluxqy);

  const dfloat sc = invWJ*sJ;
  s_fluxqx[es][0][j][i] += sc*(-fluxqx[0]);
  s_fluxqx[es][1][j][i] += sc*(-fluxqx[1]);
  s_fluxqx[es][2][j][i] += sc*(-fluxqx[2]);
  s_fluxqx[es][3][j][i] += sc*(-fluxqx[3]);
  s_fluxqx[es][4][j][i] += sc*(-fluxqx[4]);
  s_fluxqx[es][5][j][i] += sc*(-fluxqx[5]);
  s_fluxqy[es][0][j][i] += sc*(-fluxqy[0]);
  s_fluxqy[es][1][j][i] += sc*(-fluxqy[1]);
  s_fluxqy[es][2][j][i] += sc*(-fluxqy[2]);
  s_fluxqy[es][3][j][i] += sc*(-fluxqy[3]);
  s_fluxqy[es][4][j][i] += sc*(-fluxqy[4]);
  s_fluxqy[es][5][j][i] += sc*(-fluxqy[5]);
}


void surfaceMRTerms(const int e,
                    const int es,
                    const int sk,
                    const int face,
                    const int i,
                    const int j,
                    const dfloat *sgeo,
                    const dfloat c,
                    const dfloat nu,
                    const dfloat time,
                    const dfloat *x,
                    const dfloat *y,
                    const int *vmapM,
                    const int *mapP,
                    const int *EToB,
                    const dfloat *fQM,
                    dfloat s_fluxq[p_NblockS][p_Nfields][p_Nq][p_Nq]){

  const dfloat nx = sgeo[sk*p_Nsgeo+p_NXID];
  const dfloat ny = sgeo[sk*p_Nsgeo+p_NYID];
  const dfloat sJ = sgeo[sk*p_Nsgeo+p_SJID];
  const dfloat invWJ = sgeo[sk*p_Nsgeo+p_WIJID];

  const dlong eM   = e;
  const dlong idP  = mapP[sk];
  const dlong eP = idP/(p_Nfp*p_Nfaces);
  const int fidM = sk%(p_Nfp*p_Nfaces);
  const int fidP = idP%(p_Nfp*p_Nfaces);

  const dlong qidM = eM*p_Nfp*p_Nfaces*p_Nfields + fidM;
  const dlong qidP = eP*p_Nfp*p_Nfaces*p_Nfields + fidP;

  const dfloat q1M = fQM[qidM + 0*p_Nfp*p_Nfaces];
  const dfloat q2M = fQM[qidM + 1*p_Nfp*p_Nfaces];
  const dfloat q3M = fQM[qidM + 2*p_Nfp*p_Nfaces];
  const dfloat q4M = fQM[qidM + 3*p_Nfp*p_Nfaces];
  const dfloat q5M = fQM[qidM + 4*p_Nfp*p_Nfaces];
  const dfloat q6M = fQM[qidM + 5*p_Nfp*p_Nfaces];

  dfloat q1P = fQM[qidP + 0*p_Nfp*p_Nfaces];
  dfloat q2P = fQM[qidP + 1*p_Nfp*p_Nfaces];
  dfloat q3P = fQM[qidP + 2*p_Nfp*p_Nfaces];
  dfloat q4P = fQM[qidP + 3*p_Nfp*p_Nfaces];
  dfloat q5P = fQM[qidP + 4*p_Nfp*p_Nfaces];
  dfloat q6P = fQM[qidP + 5*p_Nfp*p_Nfaces];

  const int bc = EToB[face+p_Nfaces*e];
  if(bc>0){
    //convert to primitives
    const dfloat rM   = q1M;
    const dfloat uM   = c*q2M/rM;
    const dfloat vM   = c*q3M/rM;
    const dfloat s12M = -c*c*(          q4M - q2M*q3M/q1M);
    const dfloat s11M = -c*c*(sqrt(2.0)*q5M - q2M*q2M/q1M);
    const dfloat s22M = -c*c*(sqrt(2.0)*q6M - q3M*q3M/q1M);

    dfloat rP, uP, vP, s11P, s12P, s22P;
    bnsBoundaryConditions2D(bc, c, nu, time, x[idM], y[idM], nx, ny,
                            rM, uM, vM, s11M, s12M, s22M,
                            &rP, &uP, &vP, &s11P, &s12P, &s22P);

    //convert back
    q2P = rP*uP/c;
    q3P = rP*vP/c;
    q4P = (-s12P/(c*c) + q2P*q3P/q1P);
    q5P = (-s11P/(c*c) + q2P*q2P/q1P)/sqrt(2.0);
    q6P = (-s22P/(c*c) + q3P*q3P/q1P)/sqrt(2.0);
  }

  dfloat qflux[p_Nfields];
  upwind(nx, ny, c,
         q1M, q2M, q3M, q4M, q5M, q6M,
         q1P, q2P, q3P, q4P, q5P, q6P,
         qflux);

  const dfloat sc = invWJ*sJ;
  s_fluxq[es][0][j][i] += sc*(-qflux[0]);
  s_fluxq[es][1][j][i] += sc*(-qflux[1]);
  s_fluxq[es][2][j][i] += sc*(-qflux[2]);
  s_fluxq[es][3][j][i] += sc*(-qflux[3]);
  s_fluxq[es][4][j][i] += sc*(-qflux[4]);
  s_fluxq[es][5][j][i] += sc*(-qflux[5]);
}


void surfaceMRTerms_split(const int e,
                       const int es,
                       const int sk,
                       const int face,
                       const int i,
                       const int j,
                       const dfloat *sgeo,
                       const dfloat c,
                       const dfloat nu,
                       const dfloat time,
                       const dfloat *x,
                       const dfloat *y,
                       const int *vmapM,
                       const int *mapP,
                       const int *EToB,
                       const dfloat *fQM,
                       dfloat s_fluxqx[p_NblockS][p_Nfields][p_Nq][p_Nq],
                       dfloat s_fluxqy[p_NblockS][p_Nfields][p_Nq][p_Nq]){

  const dfloat nx = sgeo[sk*p_Nsgeo+p_NXID];
  const dfloat ny = sgeo[sk*p_Nsgeo+p_NYID];
  const dfloat sJ = sgeo[sk*p_Nsgeo+p_SJID];
  const dfloat invWJ = sgeo[sk*p_Nsgeo+p_WIJID];

  const dlong eM   = e;
  const dlong idP  = mapP[sk];
  const dlong eP   = idP/(p_Nfp*p_Nfaces);
  const int fidM   = sk%(p_Nfp*p_Nfaces);
  const int fidP   = idP%(p_Nfp*p_Nfaces);

  const dlong qidM = eM*p_Nfp*p_Nfaces*p_Nfields + fidM;
  const dlong qidP = eP*p_Nfp*p_Nfaces*p_Nfields + fidP;


  const dfloat q1M = fQM[qidM + 0*p_Nfp*p_Nfaces];
  const dfloat q2M = fQM[qidM + 1*p_Nfp*p_Nfaces];
  const dfloat q3M = fQM[qidM + 2*p_Nfp*p_Nfaces];
  const dfloat q4M = fQM[qidM + 3*p_Nfp*p_Nfaces];
  const dfloat q5M = fQM[qidM + 4*p_Nfp*p_Nfaces];
  const dfloat q6M = fQM[qidM + 5*p_Nfp*p_Nfaces];

  dfloat q1P = fQM[qidP + 0*p_Nfp*p_Nfaces];
  dfloat q2P = fQM[qidP + 1*p_Nfp*p_Nfaces];
  dfloat q3P = fQM[qidP + 2*p_Nfp*p_Nfaces];
  dfloat q4P = fQM[qidP + 3*p_Nfp*p_Nfaces];
  dfloat q5P = fQM[qidP + 4*p_Nfp*p_Nfaces];
  dfloat q6P = fQM[qidP + 5*p_Nfp*p_Nfaces];

  const int bc = EToB[face+p_Nfaces*e];
  if(bc>0){
    //convert to primitives
    const dfloat rM   = q1M;
    const dfloat uM   = c*q2M/rM;
    const dfloat vM   = c*q3M/rM;
    const dfloat s12M = -c*c*(          q4M - q2M*q3M/q1M);
    const dfloat s11M = -c*c*(sqrt(2.0)*q5M - q2M*q2M/q1M);
    const dfloat s22M = -c*c*(sqrt(2.0)*q6M - q3M*q3M/q1M);

    dfloat rP, uP, vP, s11P, s12P, s22P;
    bnsBoundaryConditions2D(bc, c, nu, time, x[idM], y[idM], nx, ny,
                            rM, uM, vM, s11M, s12M, s22M,
                            &rP, &uP, &vP, &s11P, &s12P, &s22P);

    //convert back
    q2P = rP*uP/c;
    q3P = rP*vP/c;
    q4P = (-s12P/(c*c) + q2P*q3P/q1P);
    q5P = (-s11P/(c*c) + q2P*q2P/q1P)/sqrt(2.0);
    q6P = (-s22P/(c*c) + q3P*q3P/q1P)/sqrt(2.0);
  }

  dfloat fluxqx[p_Nfields], fluxqy[p_Nfields];
  upwind_split(nx, ny, c,
         q1M, q2M, q3M, q4M, q5M, q6M,
         q1P, q2P, q3P, q4P, q5P, q6P,
         fluxqx, fluxqy);

  const dfloat sc = invWJ*sJ;
  s_fluxqx[es][0][j][i] += sc*(-fluxqx[0]);
  s_fluxqx[es][1][j][i] += sc*(-fluxqx[1]);
  s_fluxqx[es][2][j][i] += sc*(-fluxqx[2]);
  s_fluxqx[es][3][j][i] += sc*(-fluxqx[3]);
  s_fluxqx[es][4][j][i] += sc*(-fluxqx[4]);
  s_fluxqx[es][5][j][i] += sc*(-fluxqx[5]);
  s_fluxqy[es][0][j][i] += sc*(-fluxqy[0]);
  s_fluxqy[es][1][j][i] += sc*(-fluxqy[1]);
  s_fluxqy[es][2][j][i] += sc*(-fluxqy[2]);
  s_fluxqy[es][3][j][i] += sc*(-fluxqy[3]);
  s_fluxqy[es][4][j][i] += sc*(-fluxqy[4]);
  s_fluxqy[es][5][j][i] += sc*(-fluxqy[5]);
}



// This @kernel uses Upwind flux
@kernel void bnsSurfaceQuad2D(const dlong Nelements,
                             @restrict const  dlong  *  elementIds,
                             @restrict const  dfloat *  sgeo,
                             @restrict const  dfloat *  LIFT,
                             @restrict const  dlong  *  vmapM,
                             @restrict const  dlong  *  vmapP,
                             @restrict const  int    *  EToB,
                             @restrict const  dfloat *  x,
                             @restrict const  dfloat *  y,
                             @restrict const  dfloat *  z,
                             const dfloat time,
                             const dfloat c,
                             const dfloat nu,
                             @restrict const  dfloat *  q,
                             @restrict dfloat *  rhsq){
  // for all elements
  for(dlong eo=0;eo<Nelements;eo+=p_NblockS;@outer(0)){

    // @shared storage for flux terms
    @shared dfloat s_fluxq[p_NblockS][p_Nfields][p_Nq][p_Nq];

    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        #pragma unroll p_Nq
          for(int j=0;j<p_Nq;++j){
            #pragma unroll p_Nfields
              for(int fld=0; fld<p_Nfields; fld++)
                s_fluxq[es][fld][j][i] = 0.f;
          }
      }
    }

    @barrier("local");

    // face 0 & 2
    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        const dlong et = eo + es;
        if(et<Nelements){
          const dlong   e = elementIds[et];
          const dlong sk0 = e*p_Nfp*p_Nfaces + 0*p_Nfp + i;
          const dlong sk2 = e*p_Nfp*p_Nfaces + 2*p_Nfp + i;

          surfaceTerms(e, es, sk0, 0, i, 0,
                       sgeo, c, nu, time, x, y, vmapM, vmapP, EToB, q, s_fluxq);

          surfaceTerms(e, es, sk2, 2, i, p_Nq-1,
                       sgeo, c, nu, time, x, y, vmapM, vmapP, EToB, q, s_fluxq);
        }
      }
    }

    @barrier("local");

    // face 1 & 3
    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int j=0;j<p_Nq;++j;@inner(0)){
        const dlong et = eo + es;
        if(et<Nelements){
          const dlong   e = elementIds[et];
          const dlong sk1 = e*p_Nfp*p_Nfaces + 1*p_Nfp + j;
          const dlong sk3 = e*p_Nfp*p_Nfaces + 3*p_Nfp + j;

          surfaceTerms(e, es, sk1, 1, p_Nq-1, j,
                       sgeo, c, nu, time, x, y, vmapM, vmapP, EToB, q, s_fluxq);

          surfaceTerms(e, es, sk3, 3, 0, j,
                       sgeo, c, nu, time, x, y, vmapM, vmapP, EToB, q, s_fluxq);
        }
      }
    }

    @barrier("local");

    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        const dlong et = eo + es;
        if(et<Nelements){
          #pragma unroll p_Nq
            for(int j=0;j<p_Nq;++j){
              const dlong   e   = elementIds[et];
              const dlong rhsId = e*p_Np*p_Nfields+j*p_Nq+i;
              for(int fld=0; fld<p_Nfields; fld++){
                rhsq[rhsId+fld*p_Np] += s_fluxq[es][fld][j][i];
              }
            }
        }
      }
    }
  }
}



// This @kernel uses upwind flux
@kernel void bnsPmlSurfaceQuad2D(const dlong pmlNelements,
                                @restrict const  dlong  *  pmlElementIds,
                                @restrict const  dlong  *  pmlIds,
                                @restrict const  dfloat *  sgeo,
                                @restrict const  dfloat *  LIFT,
                                @restrict const  dlong  *  vmapM,
                                @restrict const  dlong  *  vmapP,
                                @restrict const  int    *  EToB,
                                @restrict const  dfloat *  x,
                                @restrict const  dfloat *  y,
                                @restrict const  dfloat *  z,
                                const dfloat time,
                                const dfloat c,
                                const dfloat nu,
                                @restrict const  dfloat *  q,
                                @restrict dfloat *  rhsq,
                                @restrict dfloat *  rhspmlq){

  // for all elements
  for(dlong eo=0;eo<pmlNelements;eo+=p_NblockS;@outer(0)){
    // @shared storage for flux terms
    @shared dfloat s_fluxqx[p_NblockS][p_Nfields][p_Nq][p_Nq];
    @shared dfloat s_fluxqy[p_NblockS][p_Nfields][p_Nq][p_Nq];

    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        #pragma unroll p_Nq
          for(int j=0;j<p_Nq;++j){
            #pragma unroll p_Nfields
              for(int fld=0; fld<p_Nfields; fld++){
                s_fluxqx[es][fld][j][i] = 0.;
                s_fluxqy[es][fld][j][i] = 0.;
              }
          }
      }
    }

    @barrier("local");

    // face 0 & 2
    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        const dlong et = eo + es;
        if(et<pmlNelements){
          const dlong   e = pmlElementIds[et];
          const dlong sk0 = e*p_Nfp*p_Nfaces + 0*p_Nfp + i;
          const dlong sk2 = e*p_Nfp*p_Nfaces + 2*p_Nfp + i;

          surfaceTerms_split(e, es, sk0, 0, i, 0,
                          sgeo, c, nu, time, x, y, vmapM, vmapP, EToB, q, s_fluxqx, s_fluxqy);

          surfaceTerms_split(e, es, sk2, 2, i, p_Nq-1,
                          sgeo, c, nu, time, x, y, vmapM, vmapP, EToB, q, s_fluxqx, s_fluxqy);
        }
      }
    }

    @barrier("local");

    // face 1 & 3
    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int j=0;j<p_Nq;++j;@inner(0)){
        const dlong et = eo + es;
        if(et<pmlNelements){
          const dlong   e = pmlElementIds[et];
          const dlong sk1 = e*p_Nfp*p_Nfaces + 1*p_Nfp + j;
          const dlong sk3 = e*p_Nfp*p_Nfaces + 3*p_Nfp + j;

          surfaceTerms_split(e, es, sk1, 1, p_Nq-1, j,
                          sgeo, c, nu, time, x, y, vmapM, vmapP, EToB, q, s_fluxqx, s_fluxqy);

          surfaceTerms_split(e, es, sk3, 3, 0, j,
                          sgeo, c, nu, time, x, y, vmapM, vmapP, EToB, q, s_fluxqx, s_fluxqy);
        }
      }
    }

    @barrier("local");

    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        const dlong et = eo + es;
        if(et<pmlNelements){
          #pragma unroll p_Nq
            for(int j=0;j<p_Nq;++j){
              const dlong    e  = pmlElementIds[et];
              const dlong pmlId = pmlIds[et];

              const dlong rhsId    = e*p_Np*p_Nfields+j*p_Nq+i;
              const dlong pmlRhsId = pmlId*p_Np*p_Npmlfields+j*p_Nq+i;

              for(int fld=0; fld<p_Nfields; fld++){
                dfloat aqx = s_fluxqx[es][fld][j][i];
                dfloat bqy = s_fluxqy[es][fld][j][i];

                rhsq[rhsId+fld*p_Np] += (aqx + bqy);
                rhspmlq[pmlRhsId+0*p_Nfields*p_Np+fld*p_Np] += aqx;
                rhspmlq[pmlRhsId+1*p_Nfields*p_Np+fld*p_Np] += bqy;
              }
            }
        }
      }
    }
  }
}


@kernel void bnsMRSurfaceQuad2D(const dlong Nelements,
                               @restrict const  dlong  *  elementIds,
                               @restrict const  dfloat *  sgeo,
                               @restrict const  dfloat *  LIFT,
                               @restrict const  dlong  *  vmapM,
                               @restrict const  dlong  *  mapP,
                               @restrict const  int    *  EToB,
                               @restrict const  dfloat *  x,
                               @restrict const  dfloat *  y,
                               @restrict const  dfloat *  z,
                               const dfloat time,
                               const dfloat c,
                               const dfloat nu,
                               @restrict const  dfloat *  q,
                               @restrict const  dfloat *  fQM,
                               @restrict dfloat *  rhsq){
  // for all elements
  for(dlong eo=0;eo<Nelements;eo+=p_NblockS;@outer(0)){

    // @shared storage for flux terms
    @shared dfloat s_fluxq[p_NblockS][p_Nfields][p_Nq][p_Nq];

    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        #pragma unroll p_Nq
          for(int j=0;j<p_Nq;++j){
            #pragma unroll p_Nfields
              for(int fld=0; fld<p_Nfields; fld++)
                s_fluxq[es][fld][j][i] = 0.f;
          }
      }
    }

    @barrier("local");

    // face 0 & 2
    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        const dlong et = eo + es;
        if(et<Nelements){
          const dlong   e = elementIds[et];
          const dlong sk0 = e*p_Nfp*p_Nfaces + 0*p_Nfp + i;
          const dlong sk2 = e*p_Nfp*p_Nfaces + 2*p_Nfp + i;

          surfaceMRTerms(e, es, sk0, 0, i, 0,
                         sgeo, c, nu, time, x, y, vmapM, mapP, EToB, fQM, s_fluxq);

          surfaceMRTerms(e, es, sk2, 2, i, p_Nq-1,
                         sgeo, c, nu, time, x, y, vmapM, mapP, EToB, fQM, s_fluxq);
        }
      }
    }

    @barrier("local");

    // face 1 & 3
    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int j=0;j<p_Nq;++j;@inner(0)){
        const dlong et = eo + es;
        if(et<Nelements){
          const dlong   e = elementIds[et];
          const dlong sk1 = e*p_Nfp*p_Nfaces + 1*p_Nfp + j;
          const dlong sk3 = e*p_Nfp*p_Nfaces + 3*p_Nfp + j;

          surfaceMRTerms(e, es, sk1, 1, p_Nq-1, j,
                         sgeo, c, nu, time, x, y, vmapM, mapP, EToB, fQM, s_fluxq);

          surfaceMRTerms(e, es, sk3, 3, 0, j,
                         sgeo, c, nu, time, x, y, vmapM, mapP, EToB, fQM, s_fluxq);
        }
      }
    }

    @barrier("local");

    //
    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        const dlong et = eo + es;
        if(et<Nelements){
          #pragma unroll p_Nq
            for(int j=0;j<p_Nq;++j){
              const dlong   e   = elementIds[et];
              const dlong rhsId = e*p_Np*p_Nfields+j*p_Nq+i;
              for(int fld=0; fld<p_Nfields; fld++){
                rhsq[rhsId+fld*p_Np] += s_fluxq[es][fld][j][i];
              }
            }
        }
      }
    }
  }
}



@kernel void bnsMRPmlSurfaceQuad2D(const dlong pmlNelements,
                                  @restrict const  dlong  *  pmlElementIds,
                                  @restrict const  dlong  *  pmlIds,
                                  @restrict const  dfloat *  sgeo,
                                  @restrict const  dfloat *  LIFT,
                                  @restrict const  dlong  *  vmapM,
                                  @restrict const  dlong  *  mapP,
                                  @restrict const  int    *  EToB,
                                  @restrict const  dfloat *  x,
                                  @restrict const  dfloat *  y,
                                  @restrict const  dfloat *  z,
                                  const dfloat time,
                                  const dfloat c,
                                  const dfloat nu,
                                  @restrict const  dfloat *  q,
                                  @restrict const  dfloat *  fQM,
                                  @restrict dfloat *  rhsq,
                                  @restrict dfloat *  rhspmlq){

  // for all elements
  for(dlong eo=0;eo<pmlNelements;eo+=p_NblockS;@outer(0)){
    // @shared storage for flux terms
    @shared dfloat s_fluxqx[p_NblockS][p_Nfields][p_Nq][p_Nq];
    @shared dfloat s_fluxqy[p_NblockS][p_Nfields][p_Nq][p_Nq];

    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        #pragma unroll p_Nq
          for(int j=0;j<p_Nq;++j){
            #pragma unroll p_Nfields
              for(int fld=0; fld<p_Nfields; fld++){
                s_fluxqx[es][fld][j][i] = 0.;
                s_fluxqy[es][fld][j][i] = 0.;
              }
          }
      }
    }

    @barrier("local");

    // face 0 & 2
    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        const dlong et = eo + es;
        if(et<pmlNelements){
          const dlong   e = pmlElementIds[et];
          const dlong sk0 = e*p_Nfp*p_Nfaces + 0*p_Nfp + i;
          const dlong sk2 = e*p_Nfp*p_Nfaces + 2*p_Nfp + i;

          surfaceMRTerms_split(e, es, sk0, 0, i, 0,
                            sgeo, c, nu, time, x, y, vmapM, mapP, EToB, fQM, s_fluxqx, s_fluxqy);

          surfaceMRTerms_split(e, es, sk2, 2, i, p_Nq-1,
                            sgeo, c, nu, time, x, y, vmapM, mapP, EToB, fQM, s_fluxqx, s_fluxqy);
        }
      }
    }

    @barrier("local");

    // face 1 & 3
    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int j=0;j<p_Nq;++j;@inner(0)){
        const dlong et = eo + es;
        if(et<pmlNelements){
          const dlong   e = pmlElementIds[et];
          const dlong sk1 = e*p_Nfp*p_Nfaces + 1*p_Nfp + j;
          const dlong sk3 = e*p_Nfp*p_Nfaces + 3*p_Nfp + j;

          surfaceMRTerms_split(e, es, sk1, 1, p_Nq-1, j,
                            sgeo, c, nu, time, x, y, vmapM, mapP, EToB, fQM, s_fluxqx, s_fluxqy);

          surfaceMRTerms_split(e, es, sk3, 3, 0, j,
                            sgeo, c, nu, time, x, y, vmapM, mapP, EToB, fQM, s_fluxqx, s_fluxqy);
        }
      }
    }

    @barrier("local");

    //
    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        const dlong et = eo + es;
        if(et<pmlNelements){
          #pragma unroll p_Nq
            for(int j=0;j<p_Nq;++j){
              const dlong    e  = pmlElementIds[et];
              const dlong pmlId = pmlIds[et];

              const dlong rhsId    = e*p_Np*p_Nfields+j*p_Nq+i;
              const dlong pmlRhsId = pmlId*p_Np*p_Npmlfields+j*p_Nq+i;

              for(int fld=0; fld<p_Nfields; fld++){
                dfloat aqx = s_fluxqx[es][fld][j][i];
                dfloat bqy = s_fluxqy[es][fld][j][i];

                rhsq[rhsId+fld*p_Np] += (aqx + bqy);
                rhspmlq[pmlRhsId+0*p_Np*p_Nfields+fld*p_Np] += aqx;
                rhspmlq[pmlRhsId+1*p_Np*p_Nfields+fld*p_Np] += bqy;
              }
            }
        }
      }
    }
  }
}
