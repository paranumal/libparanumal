/*

The MIT License (MIT)

Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

@kernel void lbsVolumeTri2D(const dlong Nelements,
                            @restrict const  dlong  *  elementIds,
                            @restrict const  dfloat *  vgeo,
                            @restrict const  dfloat *  D,
                            @restrict const  dfloat * x,
                            @restrict const  dfloat * y,
                            @restrict const  dfloat * z,
                            const dfloat t,
                            const dfloat nu,
                            @restrict const  dfloat *  LBM,
                            @restrict const  dfloat *  q,
                            @restrict dfloat *  rhsq){

  for(dlong eo=0;eo<Nelements;eo+=p_NblockV;@outer(0)){  // for all elements

    @shared dfloat s_q[p_NblockV][p_Nfields][p_Np];
    @exclusive dlong e;

    // @exclusive dfloat fx[p_NblockV], fy[p_NblockV];

    for(int es=0;es<p_NblockV;++es;@inner(1)){// for all elements in block
      for(int n=0;n<p_Np;++n;@inner(0)){     // for all nodes in this element
        const dlong et = eo+es; // element in block
        if(et<Nelements){
          e = elementIds[et];
          const dlong id = e*p_Nfields*p_Np + n;

          #pragma unroll p_Nfields
          for(int fld=0; fld<p_Nfields;++fld){
            s_q[es][fld][n] = q[id+fld*p_Np];
          }

          // const dfloat r =   s_q[es][0][n];
          // const dfloat u = c*s_q[es][1][n]/r;
          // const dfloat v = c*s_q[es][2][n]/r;

          // //Body force contribution
          // fx[es] = 0.0; fy[es] = 0.0;
          // lbsBodyForce2D(c, nu, t, x[e*p_Np+n], y[e*p_Np+n], r, u, v,
          //                &(fx[es]), &(fy[es]));
        }
      }
    }

    // make sure all node data is loaded into @shared
    @barrier("local");

    for(int es=0;es<p_NblockV;++es;@inner(1)){// for all elements in block
      for(int n=0;n<p_Np;++n;@inner(0)){     // for all nodes in this element
        const dlong et = eo+es; // element in block
        if(et<Nelements){
          // prefetch geometric factors (constant on triangle)
          const dfloat drdx = vgeo[e*p_Nvgeo + p_RXID];
          const dfloat drdy = vgeo[e*p_Nvgeo + p_RYID];
          const dfloat dsdx = vgeo[e*p_Nvgeo + p_SXID];
          const dfloat dsdy = vgeo[e*p_Nvgeo + p_SYID];

          // compute 'r' and 's' derivatives of (q_m) at node n
          dfloat r_dqdr[p_Nfields], r_dqds[p_Nfields];
          dfloat r_dqdx[p_Nfields], r_dqdy[p_Nfields];
          // dfloat r_rhsq[p_Nfields];

          #pragma unroll p_Nfields
            for(int fld=0; fld<p_Nfields;++fld){
              r_dqdr[fld] = 0.f, r_dqds[fld] = 0.f;
              r_dqdx[fld] = 0.f, r_dqdy[fld] = 0.f;
              // r_rhsq[fld] = 0.f;
            }

          #pragma unroll p_Np
            for(int i=0;i<p_Np;++i){
              const dfloat Drni = D[n+i*p_Np+0*p_Np*p_Np];
              const dfloat Dsni = D[n+i*p_Np+1*p_Np*p_Np];
              #pragma unroll p_Nfields
              for(int fld=0; fld<p_Nfields;++fld){
                r_dqdr[fld] += Drni*s_q[es][fld][i];
                r_dqds[fld] += Dsni*s_q[es][fld][i];
              }
            }

          // Compute derivatives in physical coordinates
          #pragma unroll p_Nfields
            for(int fld=0; fld<p_Nfields;++fld){
              r_dqdx[fld] = drdx*r_dqdr[fld] + dsdx*r_dqds[fld];
              r_dqdy[fld] = drdy*r_dqdr[fld] + dsdy*r_dqds[fld];
            }

          // // transport operator
          // r_rhsq[0] = -c*(r_dqdx[1] + r_dqdy[2]);
          // r_rhsq[1] = -c*(r_dqdx[0] + sqrt(2.0)*r_dqdx[4] + r_dqdy[3]);
          // r_rhsq[2] = -c*(r_dqdx[3] + r_dqdy[0] + sqrt(2.0)*r_dqdy[5]);
          // r_rhsq[3] = -c*(r_dqdx[2] + r_dqdy[1]);
          // r_rhsq[4] = -c*sqrt(2.0)*r_dqdx[1];
          // r_rhsq[5] = -c*sqrt(2.0)*r_dqdy[2];

          // // add body forcing
          // r_rhsq[1] += fx[es]*s_q[es][0][n]/c;
          // r_rhsq[2] += fy[es]*s_q[es][0][n]/c;
          // r_rhsq[3] += fx[es]*s_q[es][2][n]/c + fy[es]*s_q[es][1][n]/c;
          // r_rhsq[4] += fx[es]*sqrt(2.0)*s_q[es][1][n]/c;
          // r_rhsq[5] += fy[es]*sqrt(2.0)*s_q[es][2][n]/c;

          // Update
          const dlong id = e*p_Nfields*p_Np + n;

          for(int fld=0; fld<p_Nfields;++fld){
            const dfloat ex = LBM[fld + 1*p_Nfields]; 
            const dfloat ey = LBM[fld + 2*p_Nfields]; 
            rhsq[id + fld*p_Np] = -(ex*r_dqdx[fld] + ey*r_dqdy[fld]);
          }
        }
      }
    }
  }
}