/*

The MIT License (MIT)

Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

// #define p_isq12 (1.f/sqrt(12.f))
// #define p_isq6 (1.f/sqrt(6.f))

// void applyBC2D(const int bc, const int fldm, const int fldp, 
//                const dfloat en, const dflat nx, const dfloat ny, const dfloat w, const dfloat ex, const dfloat ey,
//                const dfloat en, const dflat nx, const dfloat ny, const dfloat w, const dfloat ex, const dfloat ey,
//                const dfloat rb, const dfloat ub, const dfloat vb,
//                const dfloat *qm, const dfloat *qp){

// // wall:could be with velociy 
// if (bc==1){
//   qp[fld] = en < 0 ?  (qm[idr] + 2.f*w*rb*(ex*ub + ey*vb)*p_ic2) : qm[fld];  
// }else if(bc==2){ //Inflow
//   qp[fld] = en < 0 ?  (qm[idr] + 2.f*w*rb*(ex*ub + ey*vb)*p_ic2) : qm[fld]; 
// }

// } 
             


@kernel void lbsSurfaceTri2D(const dlong Nelements,
                            @restrict const  dlong  *  elementIds,
                            @restrict const  dfloat *  sgeo,
                            @restrict const  dfloat *  LIFT,
                            @restrict const  dlong  *  vmapM,
                            @restrict const  dlong  *  vmapP,
                            @restrict const  int    *  EToB,
                            @restrict const  dfloat *  x,
                            @restrict const  dfloat *  y,
                            @restrict const  dfloat *  z,
                            const dfloat time,
                            const dfloat nu,
                            @restrict const  int *  LMAP,
                            @restrict const  dfloat *  LBM,
                            @restrict const  dfloat *  U,
                            @restrict const  dfloat *  q,
                            @restrict dfloat *  rhsq){

  // for all elements
  for(dlong eo=0;eo<Nelements;eo+=p_NblockS;@outer(0)){

    // @shared storage for flux terms
    @shared dfloat s_fluxq[p_NblockS][p_Nfields][p_Nfp*p_Nfaces];

    @exclusive dlong e;

    // for all face nodes of all elements
    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int n=0;n<p_maxNodes;++n;@inner(0)){ // maxNodes = max(Nfp*Nfaces,Np)
        const dlong et = eo + es;
        if(et<Nelements){
          e = elementIds[et];
          if(n<p_Nfp*p_Nfaces){
            // find face that owns this node
            const int face = n/p_Nfp;

            // load surface geofactors for this face
            const dlong sid   = p_Nsgeo*(e*p_Nfaces+face);
            const dfloat nx   = sgeo[sid+p_NXID];
            const dfloat ny   = sgeo[sid+p_NYID];
            const dfloat sJ   = sgeo[sid+p_SJID];
            const dfloat invJ = sgeo[sid+p_IJID];

            const dfloat sc = sJ*invJ;

            const dlong id  = e*p_Nfp*p_Nfaces + n;
            const dlong idM = vmapM[id];
            const dlong idP = vmapP[id];

            // load traces
            const dlong eM = e;
            const dlong eP = idP/p_Np;
            const int vidM = idM%p_Np;
            const int vidP = idP%p_Np;

            const dlong qidM = eM*p_Np*p_Nfields + vidM;
            const dlong qidP = eP*p_Np*p_Nfields + vidP;
                
            // apply boundary condition
            const int bc = EToB[face+p_Nfaces*e];
            
            dfloat rm, um, vm, rb, ub, vb; 

            if(bc>0){
            const dlong uidM = eM*p_Np*p_Nmacro + vidM; 
            rm   = U[uidM+ 0*p_Np];  
            um   = U[uidM+ 1*p_Np];  
            vm   = U[uidM+ 2*p_Np];  

           lbsBoundaryConditions2D(bc, nu, time, x[idM], y[idM], nx, ny, 
                                   rm, um, vm,
                                   &rb, &ub, &vb); 
            }


            dfloat qm[p_Nfields]; 
            dfloat qp[p_Nfields]; 

            #pragma unroll p_Nfields
            for(int fld=0; fld<p_Nfields;++fld){
              qm[fld] = q[qidM + fld*p_Np];
              qp[fld] = q[qidP + fld*p_Np];
            }


            #pragma unroll p_Nfields
            for(int fld=0; fld<p_Nfields;++fld){
              const dfloat ex = LBM[fld + 1*p_Nfields]; 
              const dfloat ey = LBM[fld + 2*p_Nfields]; 
              const dfloat en = ex*nx + ey*ny; // need to modify for bc

              if(bc>0){
              const dfloat w    =  LBM[fld + 0*p_Nfields];
              const int   idr   =  LMAP[fld];
              // applyBC2D(bc, fld, idr, en, nx, ny, w, ex, ey, rb, ub, vb, qm, qp); 

               qp[fld] = en < 0 ? (qm[idr] + 2.f*w*rb*(ex*ub + ey*vb)*p_ic2) : qm[fld];  
              }
             
              s_fluxq[es][fld][n] = 0.5f*sc*(en -fabs(en))*(qm[fld] - qp[fld]);

            }
          }
        }
      }
    }

    // wait for all @shared memory writes of the previous inner loop to complete
    @barrier("local");

    // for each node in the element
    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int n=0;n<p_maxNodes;++n;@inner(0)){
        const dlong et = eo + es;
        if(et<Nelements){
          if(n<p_Np){
            // const int id = nrhs*p_Nfields*(p_Np*e + n) + p_Nfields*shift;
            const dlong id = e*p_Nfields*p_Np + n ;

            dfloat rhsq1 = rhsq[id+0*p_Np];
            dfloat rhsq2 = rhsq[id+1*p_Np];
            dfloat rhsq3 = rhsq[id+2*p_Np];
            dfloat rhsq4 = rhsq[id+3*p_Np];
            dfloat rhsq5 = rhsq[id+4*p_Np];
            dfloat rhsq6 = rhsq[id+5*p_Np];
            dfloat rhsq7 = rhsq[id+6*p_Np];
            dfloat rhsq8 = rhsq[id+7*p_Np];
            dfloat rhsq9 = rhsq[id+8*p_Np];

            // rhs += LIFT*((sJ/J)*(A*nx+B*ny)*(q^* - q^-))
            #pragma unroll p_NfacesNfp
              for(int m=0;m<p_NfacesNfp;++m){
                dfloat L = LIFT[n+m*p_Np];
                rhsq1 += L*s_fluxq[es][0][m];
                rhsq2 += L*s_fluxq[es][1][m];
                rhsq3 += L*s_fluxq[es][2][m];
                rhsq4 += L*s_fluxq[es][3][m];
                rhsq5 += L*s_fluxq[es][4][m];
                rhsq6 += L*s_fluxq[es][5][m];
                rhsq7 += L*s_fluxq[es][6][m];
                rhsq8 += L*s_fluxq[es][7][m];
                rhsq9 += L*s_fluxq[es][8][m];
              }

            rhsq[id+0*p_Np] = rhsq1;
            rhsq[id+1*p_Np] = rhsq2;
            rhsq[id+2*p_Np] = rhsq3;
            rhsq[id+3*p_Np] = rhsq4;
            rhsq[id+4*p_Np] = rhsq5;
            rhsq[id+5*p_Np] = rhsq6;
            rhsq[id+6*p_Np] = rhsq7;
            rhsq[id+7*p_Np] = rhsq8;
            rhsq[id+8*p_Np] = rhsq9;
          }
        }
      }
    }
  }
}


// // This @kernel uses Upwind flux
// @kernel void bnsMRSurfaceTri2D(const dlong Nelements,
//                               @restrict const  dlong  *  elementIds,
//                               @restrict const  dfloat *  sgeo,
//                               @restrict const  dfloat *  LIFT,
//                               @restrict const  dlong  *  vmapM,
//                               @restrict const  dlong  *  mapP,
//                               @restrict const  int    *  EToB,
//                               @restrict const  dfloat *  x,
//                               @restrict const  dfloat *  y,
//                               @restrict const  dfloat *  z,
//                               const dfloat time,
//                               const dfloat c,
//                               const dfloat nu,
//                               @restrict const  dfloat *  q,
//                               @restrict const  dfloat *  fQM,
//                               @restrict dfloat *  rhsq){

//   // for all elements
//   for(dlong eo=0;eo<Nelements;eo+=p_NblockS;@outer(0)){

//     // @shared storage for flux terms
//     @shared dfloat s_fluxq[p_NblockS][p_Nfields][p_Nfp*p_Nfaces];
//     @exclusive dlong e;

//     // for all face nodes of all elements
//     for(int es=0;es<p_NblockS;++es;@inner(1)){
//       for(int n=0;n<p_maxNodes;++n;@inner(0)){ // maxNodes = max(Nfp*Nfaces,Np)
//         const dlong et = eo + es;
//         if(et<Nelements){
//           e = elementIds[et];
//           if(n<p_Nfp*p_Nfaces){
//             // find face that owns this node
//             const int face = n/p_Nfp;

//             // load surface geofactors for this face
//             const dlong sid   = p_Nsgeo*(e*p_Nfaces+face);
//             const dfloat nx   = sgeo[sid+p_NXID];
//             const dfloat ny   = sgeo[sid+p_NYID];
//             const dfloat sJ   = sgeo[sid+p_SJID];
//             const dfloat invJ = sgeo[sid+p_IJID];

//             const dlong id  = e*p_Nfp*p_Nfaces + n;
//             const dlong idM = e*p_Nfp*p_Nfaces*p_Nfields + n;

//             // extract + side index
//             const dlong qidP = mapP[id];
//             const dlong eP   = qidP/(p_Nfp*p_Nfaces);
//             const int fidP   = qidP%(p_Nfp*p_Nfaces);
//             const dlong idP  = eP*p_Nfp*p_Nfaces*p_Nfields + fidP;

//             // Read trace values
//             const dfloat q1M = fQM[idM + 0*p_Nfp*p_Nfaces];
//             const dfloat q2M = fQM[idM + 1*p_Nfp*p_Nfaces];
//             const dfloat q3M = fQM[idM + 2*p_Nfp*p_Nfaces];
//             const dfloat q4M = fQM[idM + 3*p_Nfp*p_Nfaces];
//             const dfloat q5M = fQM[idM + 4*p_Nfp*p_Nfaces];
//             const dfloat q6M = fQM[idM + 5*p_Nfp*p_Nfaces];

//             dfloat q1P = fQM[idP + 0*p_Nfp*p_Nfaces];
//             dfloat q2P = fQM[idP + 1*p_Nfp*p_Nfaces];
//             dfloat q3P = fQM[idP + 2*p_Nfp*p_Nfaces];
//             dfloat q4P = fQM[idP + 3*p_Nfp*p_Nfaces];
//             dfloat q5P = fQM[idP + 4*p_Nfp*p_Nfaces];
//             dfloat q6P = fQM[idP + 5*p_Nfp*p_Nfaces];

//             // apply boundary condition
//             const int bc = EToB[face+p_Nfaces*e];
//             if(bc>0){
//               //convert to primitives
//               const dfloat rM   = q1M;
//               const dfloat uM   = c*q2M/rM;
//               const dfloat vM   = c*q3M/rM;
//               const dfloat s12M = -c*c*(          q4M - q2M*q3M/q1M);
//               const dfloat s11M = -c*c*(sqrt(2.0)*q5M - q2M*q2M/q1M);
//               const dfloat s22M = -c*c*(sqrt(2.0)*q6M - q3M*q3M/q1M);

//               dfloat rP, uP, vP, s11P, s12P, s22P;
//               bnsBoundaryConditions2D(bc, c, nu, time, x[idM], y[idM], nx, ny,
//                                       rM, uM, vM, s11M, s12M, s22M,
//                                       &rP, &uP, &vP, &s11P, &s12P, &s22P);

//               //convert back
//               q2P = rP*uP/c;
//               q3P = rP*vP/c;
//               q4P = (-s12P/(c*c) + q2P*q3P/q1P);
//               q5P = (-s11P/(c*c) + q2P*q2P/q1P)/sqrt(2.0);
//               q6P = (-s22P/(c*c) + q3P*q3P/q1P)/sqrt(2.0);
//             }

//             // compute (q^*)
//             dfloat qflux[p_Nfields];
//             upwind(nx, ny, c,
//                    q1M, q2M, q3M, q4M, q5M, q6M,
//                    q1P, q2P, q3P, q4P, q5P, q6P,
//                    qflux);

//             // evaluate "flux" terms: (sJ/J)*(A*nx+B*ny)*(q^* - q^-)
//             const dfloat sc = invJ*sJ;
//             s_fluxq[es][0][n] = sc*(-qflux[0]);
//             s_fluxq[es][1][n] = sc*(-qflux[1]);
//             s_fluxq[es][2][n] = sc*(-qflux[2]);
//             s_fluxq[es][3][n] = sc*(-qflux[3]);
//             s_fluxq[es][4][n] = sc*(-qflux[4]);
//             s_fluxq[es][5][n] = sc*(-qflux[5]);
//           }
//         }
//       }
//     }

//     // wait for all @shared memory writes of the previous inner loop to complete
//     @barrier("local");

//     // for each node in the element
//     for(int es=0;es<p_NblockS;++es;@inner(1)){
//       for(int n=0;n<p_maxNodes;++n;@inner(0)){
//         const dlong et = eo + es;
//         if(et<Nelements){
//           if(n<p_Np){
//             const dlong id = e*p_Nfields*p_Np + n;

//             dfloat rhsq1 = rhsq[id+0*p_Np];
//             dfloat rhsq2 = rhsq[id+1*p_Np];
//             dfloat rhsq3 = rhsq[id+2*p_Np];
//             dfloat rhsq4 = rhsq[id+3*p_Np];
//             dfloat rhsq5 = rhsq[id+4*p_Np];
//             dfloat rhsq6 = rhsq[id+5*p_Np];

//             // rhs += LIFT*((sJ/J)*(A*nx+B*ny)*(q^* - q^-))
//             #pragma unroll p_NfacesNfp
//               for(int m=0;m<p_NfacesNfp;++m){
//                 dfloat L = LIFT[n+m*p_Np];
//                 rhsq1 += L*s_fluxq[es][0][m];
//                 rhsq2 += L*s_fluxq[es][1][m];
//                 rhsq3 += L*s_fluxq[es][2][m];
//                 rhsq4 += L*s_fluxq[es][3][m];
//                 rhsq5 += L*s_fluxq[es][4][m];
//                 rhsq6 += L*s_fluxq[es][5][m];
//               }

//             rhsq[id+0*p_Np] = rhsq1;
//             rhsq[id+1*p_Np] = rhsq2;
//             rhsq[id+2*p_Np] = rhsq3;
//             rhsq[id+3*p_Np] = rhsq4;
//             rhsq[id+4*p_Np] = rhsq5;
//             rhsq[id+5*p_Np] = rhsq6;
//           }
//         }
//       }
//     }
//   }
// }


// void upwind_split(const dfloat nx, const dfloat ny, const dfloat c,
//             const dfloat q1M, const dfloat q2M, const dfloat q3M,
//             const dfloat q4M, const dfloat q5M, const dfloat q6M,
//             const dfloat q1B, const dfloat q2B, const dfloat q3B,
//             const dfloat q4B, const dfloat q5B, const dfloat q6B,
//             dfloat * qxflux, dfloat * qyflux){

//   const dfloat dq1 = 0.5f*(q1B - q1M) - p_isq12*(nx*(q2B-q2M) + ny*(q3B-q3M));
//   const dfloat dq2 = 0.5f*(q2B - q2M) - p_isq12*(nx*(q1B-q1M)) - p_isq6*nx*(q5B-q5M) - 0.5f*ny*(q4B-q4M);
//   const dfloat dq3 = 0.5f*(q3B - q3M) - p_isq12*(ny*(q1B-q1M)) - p_isq6*ny*(q6B-q6M) - 0.5f*nx*(q4B-q4M);
//   const dfloat dq4 = 0.5f*(q4B - q4M) - 0.5f*nx*(q3B-q3M) - 0.5f*ny*(q2B-q2M);
//   const dfloat dq5 = 0.5f*(q5B - q5M) - p_isq6*nx*(q2B-q2M);
//   const dfloat dq6 = 0.5f*(q6B - q6M) - p_isq6*ny*(q3B-q3M);

//   qxflux[0] = c*nx*dq2;
//   qxflux[1] = c*nx*(dq1+sqrt(2.0)*dq5);
//   qxflux[2] = c*nx*dq4;
//   qxflux[3] = c*nx*dq3;
//   qxflux[4] = c*nx*sqrt(2.0)*dq2;
//   qxflux[5] = 0.0;
//   qyflux[0] = c*ny*dq3;
//   qyflux[1] = c*ny*dq4;
//   qyflux[2] = c*ny*(dq1+sqrt(2.0)*dq6);
//   qyflux[3] = c*ny*dq2;
//   qyflux[4] = 0.0;
//   qyflux[5] = c*ny*sqrt(2.0)*dq3;
// }

// // This @kernel uses upwind flux
// @kernel void bnsPmlSurfaceTri2D(const dlong pmlNelements,
//                                @restrict const  dlong  *  pmlElementIds,
//                                @restrict const  dlong  *  pmlIds,
//                                @restrict const  dfloat *  sgeo,
//                                @restrict const  dfloat *  LIFT,
//                                @restrict const  dlong  *  vmapM,
//                                @restrict const  dlong  *  vmapP,
//                                @restrict const  int    *  EToB,
//                                @restrict const  dfloat *  x,
//                                @restrict const  dfloat *  y,
//                                @restrict const  dfloat *  z,
//                                const dfloat time,
//                                const dfloat c,
//                                const dfloat nu,
//                                @restrict const  dfloat *  q,
//                                @restrict dfloat *  rhsq,
//                                @restrict dfloat *  rhspmlq){

//   // for all elements
//   for(dlong eo=0;eo<pmlNelements;eo+=p_NblockS;@outer(0)){
//     // @shared storage for flux terms
//     @shared dfloat s_fluxqx[p_NblockS][p_Nfields][p_maxNodes];
//     @shared dfloat s_fluxqy[p_NblockS][p_Nfields][p_maxNodes];

//     @exclusive dlong e;

//     // for all face nodes of all elements
//     for(int es=0;es<p_NblockS;++es;@inner(1)){
//       for(int n=0;n<p_maxNodes;++n;@inner(0)){ // maxNodes = max(Nfp*Nfaces,Np)
//         const dlong et = eo + es;
//         if(et<pmlNelements){
//           e = pmlElementIds[et];
//           if(n<p_NfacesNfp){
//             // find face that owns this node
//             const int face = n/p_Nfp;

//             // load surface geofactors for this face
//             const dlong sid   = p_Nsgeo*(e*p_Nfaces+face);
//             const dfloat nx   = sgeo[sid+p_NXID];
//             const dfloat ny   = sgeo[sid+p_NYID];
//             const dfloat sJ   = sgeo[sid+p_SJID];
//             const dfloat invJ = sgeo[sid+p_IJID];

//             const dlong id  = e*p_Nfp*p_Nfaces + n;
//             const dlong idM = vmapM[id];
//             const dlong idP = vmapP[id];

//             const dlong eM = e;
//             const dlong eP = idP/p_Np;
//             const int vidM = idM%p_Np;
//             const int vidP = idP%p_Np;

//             const dlong qidM = eM*p_Nfields*p_Np + vidM;
//             const dlong qidP = eP*p_Nfields*p_Np + vidP;

//             // Read trace values
//             const dfloat q1M = q[qidM + 0*p_Np];
//             const dfloat q2M = q[qidM + 1*p_Np];
//             const dfloat q3M = q[qidM + 2*p_Np];
//             const dfloat q4M = q[qidM + 3*p_Np];
//             const dfloat q5M = q[qidM + 4*p_Np];
//             const dfloat q6M = q[qidM + 5*p_Np];

//             dfloat q1P = q[qidP + 0*p_Np];
//             dfloat q2P = q[qidP + 1*p_Np];
//             dfloat q3P = q[qidP + 2*p_Np];
//             dfloat q4P = q[qidP + 3*p_Np];
//             dfloat q5P = q[qidP + 4*p_Np];
//             dfloat q6P = q[qidP + 5*p_Np];


//             // apply boundary condition
//             const int bc = EToB[face+p_Nfaces*e];
//             if(bc>0){
//               //convert to primitives
//               const dfloat rM   = q1M;
//               const dfloat uM   = c*q2M/rM;
//               const dfloat vM   = c*q3M/rM;
//               const dfloat s12M = -c*c*(          q4M - q2M*q3M/q1M);
//               const dfloat s11M = -c*c*(sqrt(2.0)*q5M - q2M*q2M/q1M);
//               const dfloat s22M = -c*c*(sqrt(2.0)*q6M - q3M*q3M/q1M);

//               dfloat rP, uP, vP, s11P, s12P, s22P;
//               bnsBoundaryConditions2D(bc, c, nu, time, x[idM], y[idM], nx, ny,
//                                       rM, uM, vM, s11M, s12M, s22M,
//                                       &rP, &uP, &vP, &s11P, &s12P, &s22P);

//               //convert back
//               q2P = rP*uP/c;
//               q3P = rP*vP/c;
//               q4P = (-s12P/(c*c) + q2P*q3P/q1P);
//               q5P = (-s11P/(c*c) + q2P*q2P/q1P)/sqrt(2.0);
//               q6P = (-s22P/(c*c) + q3P*q3P/q1P)/sqrt(2.0);
//             }

//             // compute (q^*)
//             dfloat fluxqx[p_Nfields], fluxqy[p_Nfields];
//             upwind_split(nx, ny, c,
//                    q1M, q2M, q3M, q4M, q5M, q6M,
//                    q1P, q2P, q3P, q4P, q5P, q6P,
//                    fluxqx, fluxqy);

//             // evaluate "flux" terms: (sJ/J)*(A*nx+B*ny)*(q^* - q^-)
//             const dfloat sc = invJ*sJ;
//             s_fluxqx[es][0][n] = sc*(-fluxqx[0]);
//             s_fluxqx[es][1][n] = sc*(-fluxqx[1]);
//             s_fluxqx[es][2][n] = sc*(-fluxqx[2]);
//             s_fluxqx[es][3][n] = sc*(-fluxqx[3]);
//             s_fluxqx[es][4][n] = sc*(-fluxqx[4]);
//             s_fluxqx[es][5][n] = sc*(-fluxqx[5]);
//             s_fluxqy[es][0][n] = sc*(-fluxqy[0]);
//             s_fluxqy[es][1][n] = sc*(-fluxqy[1]);
//             s_fluxqy[es][2][n] = sc*(-fluxqy[2]);
//             s_fluxqy[es][3][n] = sc*(-fluxqy[3]);
//             s_fluxqy[es][4][n] = sc*(-fluxqy[4]);
//             s_fluxqy[es][5][n] = sc*(-fluxqy[5]);
//           }
//         }
//       }
//     }

//     // wait for all @shared memory writes of the previous inner loop to complete
//     @barrier("local");

//     // for each node in the element
//     for(int es=0;es<p_NblockS;++es;@inner(1)){
//       for(int n=0;n<p_maxNodes;++n;@inner(0)){
//         const dlong et = eo + es;
//         if(et<pmlNelements){
//           if(n<p_Np){
//             // load rhs data from volume fluxes
//             dfloat Lnxdq1 = 0.f, Lnxdq2 = 0.f, Lnxdq3 = 0.f, Lnxdq4 = 0.f, Lnxdq5 = 0.f, Lnxdq6 = 0.f;
//             dfloat Lnydq1 = 0.f, Lnydq2 = 0.f, Lnydq3 = 0.f, Lnydq4 = 0.f, Lnydq5 = 0.f, Lnydq6 = 0.f;

//             // rhs += LIFT*((sJ/J)*(A*nx+B*ny)*(q^* - q^-))
//             #pragma unroll p_NfacesNfp
//               for(int m=0;m<p_NfacesNfp;++m){
//                 const dfloat L = LIFT[n+m*p_Np];
//                 Lnxdq1 += L*s_fluxqx[es][0][m];
//                 Lnxdq2 += L*s_fluxqx[es][1][m];
//                 Lnxdq3 += L*s_fluxqx[es][2][m];
//                 Lnxdq4 += L*s_fluxqx[es][3][m];
//                 Lnxdq5 += L*s_fluxqx[es][4][m];
//                 Lnxdq6 += L*s_fluxqx[es][5][m];

//                 Lnydq1 += L*s_fluxqy[es][0][m];
//                 Lnydq2 += L*s_fluxqy[es][1][m];
//                 Lnydq3 += L*s_fluxqy[es][2][m];
//                 Lnydq4 += L*s_fluxqy[es][3][m];
//                 Lnydq5 += L*s_fluxqy[es][4][m];
//                 Lnydq6 += L*s_fluxqy[es][5][m];
//               }

//             const dlong pmlId = pmlIds[et];
//             const dlong rhsId    = e*p_Nfields*p_Np + n;
//             const dlong pmlrhsId = pmlId*p_Npmlfields*p_Np + n;

//             // Update
//             rhspmlq[pmlrhsId+0*p_Nfields*p_Np+0*p_Np] += Lnxdq1;
//             rhspmlq[pmlrhsId+0*p_Nfields*p_Np+1*p_Np] += Lnxdq2;
//             rhspmlq[pmlrhsId+0*p_Nfields*p_Np+2*p_Np] += Lnxdq3;
//             rhspmlq[pmlrhsId+0*p_Nfields*p_Np+3*p_Np] += Lnxdq4;
//             rhspmlq[pmlrhsId+0*p_Nfields*p_Np+4*p_Np] += Lnxdq5;
//             rhspmlq[pmlrhsId+0*p_Nfields*p_Np+5*p_Np] += Lnxdq6;

//             rhspmlq[pmlrhsId+1*p_Nfields*p_Np+0*p_Np] += Lnydq1;
//             rhspmlq[pmlrhsId+1*p_Nfields*p_Np+1*p_Np] += Lnydq2;
//             rhspmlq[pmlrhsId+1*p_Nfields*p_Np+2*p_Np] += Lnydq3;
//             rhspmlq[pmlrhsId+1*p_Nfields*p_Np+3*p_Np] += Lnydq4;
//             rhspmlq[pmlrhsId+1*p_Nfields*p_Np+4*p_Np] += Lnydq5;
//             rhspmlq[pmlrhsId+1*p_Nfields*p_Np+5*p_Np] += Lnydq6;

//             rhsq[rhsId+0*p_Np] += (Lnxdq1 + Lnydq1);
//             rhsq[rhsId+1*p_Np] += (Lnxdq2 + Lnydq2);
//             rhsq[rhsId+2*p_Np] += (Lnxdq3 + Lnydq3);
//             rhsq[rhsId+3*p_Np] += (Lnxdq4 + Lnydq4);
//             rhsq[rhsId+4*p_Np] += (Lnxdq5 + Lnydq5);
//             rhsq[rhsId+5*p_Np] += (Lnxdq6 + Lnydq6);
//           }
//         }
//       }
//     }
//   }
// }


// @kernel void bnsMRPmlSurfaceTri2D(const dlong pmlNelements,
//                                  @restrict const  dlong  *  pmlElementIds,
//                                  @restrict const  dlong  *  pmlIds,
//                                  @restrict const  dfloat *  sgeo,
//                                  @restrict const  dfloat *  LIFT,
//                                  @restrict const  dlong  *  vmapM,
//                                  @restrict const  dlong  *  mapP,
//                                  @restrict const  int    *  EToB,
//                                  @restrict const  dfloat *  x,
//                                  @restrict const  dfloat *  y,
//                                  @restrict const  dfloat *  z,
//                                  const dfloat time,
//                                  const dfloat c,
//                                  const dfloat nu,
//                                  @restrict const  dfloat *  q,
//                                  @restrict const  dfloat *  fQM,
//                                  @restrict dfloat *  rhsq,
//                                  @restrict dfloat *  rhspmlq){

//   // for all elements
//   for(dlong eo=0;eo<pmlNelements;eo+=p_NblockS;@outer(0)){
//     // @shared storage for flux terms
//     @shared dfloat s_fluxqx[p_NblockS][p_Nfields][p_maxNodes];
//     @shared dfloat s_fluxqy[p_NblockS][p_Nfields][p_maxNodes];

//     @exclusive dlong e;

//     // for all face nodes of all elements
//     for(int es=0;es<p_NblockS;++es;@inner(1)){
//       for(int n=0;n<p_maxNodes;++n;@inner(0)){ // maxNodes = max(Nfp*Nfaces,Np)
//         const dlong et = eo + es;
//         if(et<pmlNelements){
//           e = pmlElementIds[et];

//           if(n<p_NfacesNfp){
//             // find face that owns this node
//             int face = n/p_Nfp;

//             // load surface geofactors for this face
//             const dlong sid   = p_Nsgeo*(e*p_Nfaces+face);
//             const dfloat nx   = sgeo[sid+p_NXID];
//             const dfloat ny   = sgeo[sid+p_NYID];
//             const dfloat sJ   = sgeo[sid+p_SJID];
//             const dfloat invJ = sgeo[sid+p_IJID];

//             const dlong id  = e*p_Nfp*p_Nfaces + n;
//             const dlong idM = e*p_Nfp*p_Nfaces*p_Nfields + n;

//             // extract + side index
//             const dlong qidP = mapP[id];
//             const dlong eP   = qidP/(p_Nfp*p_Nfaces);
//             const int fidP   = qidP%(p_Nfp*p_Nfaces);
//             const dlong idP  = eP*p_Nfp*p_Nfaces*p_Nfields + fidP;

//             // Read trace values
//             const dfloat q1M = fQM[idM + 0*p_Nfp*p_Nfaces];
//             const dfloat q2M = fQM[idM + 1*p_Nfp*p_Nfaces];
//             const dfloat q3M = fQM[idM + 2*p_Nfp*p_Nfaces];
//             const dfloat q4M = fQM[idM + 3*p_Nfp*p_Nfaces];
//             const dfloat q5M = fQM[idM + 4*p_Nfp*p_Nfaces];
//             const dfloat q6M = fQM[idM + 5*p_Nfp*p_Nfaces];

//             dfloat q1P = fQM[idP + 0*p_Nfp*p_Nfaces];
//             dfloat q2P = fQM[idP + 1*p_Nfp*p_Nfaces];
//             dfloat q3P = fQM[idP + 2*p_Nfp*p_Nfaces];
//             dfloat q4P = fQM[idP + 3*p_Nfp*p_Nfaces];
//             dfloat q5P = fQM[idP + 4*p_Nfp*p_Nfaces];
//             dfloat q6P = fQM[idP + 5*p_Nfp*p_Nfaces];

//             // apply boundary condition
//             const int bc = EToB[face+p_Nfaces*e];
//             if(bc>0){
//               //convert to primitives
//               const dfloat rM   = q1M;
//               const dfloat uM   = c*q2M/rM;
//               const dfloat vM   = c*q3M/rM;
//               const dfloat s12M = -c*c*(          q4M - q2M*q3M/q1M);
//               const dfloat s11M = -c*c*(sqrt(2.0)*q5M - q2M*q2M/q1M);
//               const dfloat s22M = -c*c*(sqrt(2.0)*q6M - q3M*q3M/q1M);

//               dfloat rP, uP, vP, s11P, s12P, s22P;
//               bnsBoundaryConditions2D(bc, c, nu, time, x[idM], y[idM], nx, ny,
//                                       rM, uM, vM, s11M, s12M, s22M,
//                                       &rP, &uP, &vP, &s11P, &s12P, &s22P);

//               //convert back
//               q2P = rP*uP/c;
//               q3P = rP*vP/c;
//               q4P = (-s12P/(c*c) + q2P*q3P/q1P);
//               q5P = (-s11P/(c*c) + q2P*q2P/q1P)/sqrt(2.0);
//               q6P = (-s22P/(c*c) + q3P*q3P/q1P)/sqrt(2.0);
//             }

//             // compute (q^*)
//             dfloat fluxqx[p_Nfields], fluxqy[p_Nfields];
//             upwind_split(nx, ny, c,
//                    q1M, q2M, q3M, q4M, q5M, q6M,
//                    q1P, q2P, q3P, q4P, q5P, q6P,
//                    fluxqx, fluxqy);

//             // evaluate "flux" terms: (sJ/J)*(A*nx+B*ny)*(q^* - q^-)
//             const dfloat sc = invJ*sJ;
//             s_fluxqx[es][0][n] = sc*(-fluxqx[0]);
//             s_fluxqx[es][1][n] = sc*(-fluxqx[1]);
//             s_fluxqx[es][2][n] = sc*(-fluxqx[2]);
//             s_fluxqx[es][3][n] = sc*(-fluxqx[3]);
//             s_fluxqx[es][4][n] = sc*(-fluxqx[4]);
//             s_fluxqx[es][5][n] = sc*(-fluxqx[5]);
//             s_fluxqy[es][0][n] = sc*(-fluxqy[0]);
//             s_fluxqy[es][1][n] = sc*(-fluxqy[1]);
//             s_fluxqy[es][2][n] = sc*(-fluxqy[2]);
//             s_fluxqy[es][3][n] = sc*(-fluxqy[3]);
//             s_fluxqy[es][4][n] = sc*(-fluxqy[4]);
//             s_fluxqy[es][5][n] = sc*(-fluxqy[5]);
//           }
//         }
//       }
//     }

//     // wait for all @shared memory writes of the previous inner loop to complete
//     @barrier("local");

//     // for each node in the element
//     for(int es=0;es<p_NblockS;++es;@inner(1)){
//       for(int n=0;n<p_maxNodes;++n;@inner(0)){
//         const dlong et = eo + es;
//         if(et<pmlNelements){
//           if(n<p_Np){
//             // load rhs data from volume fluxes
//             dfloat Lnxdq1 = 0.f, Lnxdq2 = 0.f, Lnxdq3 = 0.f, Lnxdq4 = 0.f, Lnxdq5 = 0.f, Lnxdq6 = 0.f;
//             dfloat Lnydq1 = 0.f, Lnydq2 = 0.f, Lnydq3 = 0.f, Lnydq4 = 0.f, Lnydq5 = 0.f, Lnydq6 = 0.f;

//             // rhs += LIFT*((sJ/J)*(A*nx+B*ny)*(q^* - q^-))
//             #pragma unroll p_NfacesNfp
//               for(int m=0;m<p_NfacesNfp;++m){
//                 const dfloat L = LIFT[n+m*p_Np];
//                 Lnxdq1 += L*s_fluxqx[es][0][m];
//                 Lnxdq2 += L*s_fluxqx[es][1][m];
//                 Lnxdq3 += L*s_fluxqx[es][2][m];
//                 Lnxdq4 += L*s_fluxqx[es][3][m];
//                 Lnxdq5 += L*s_fluxqx[es][4][m];
//                 Lnxdq6 += L*s_fluxqx[es][5][m];

//                 Lnydq1 += L*s_fluxqy[es][0][m];
//                 Lnydq2 += L*s_fluxqy[es][1][m];
//                 Lnydq3 += L*s_fluxqy[es][2][m];
//                 Lnydq4 += L*s_fluxqy[es][3][m];
//                 Lnydq5 += L*s_fluxqy[es][4][m];
//                 Lnydq6 += L*s_fluxqy[es][5][m];
//               }


//             const dlong pmlId = pmlIds[et];
//             const dlong rhsId    = e*p_Nfields*p_Np + n;
//             const dlong pmlrhsId = pmlId*p_Npmlfields*p_Np + n;

//             // Update
//             rhspmlq[pmlrhsId+0*p_Nfields*p_Np+0*p_Np] += Lnxdq1;
//             rhspmlq[pmlrhsId+0*p_Nfields*p_Np+1*p_Np] += Lnxdq2;
//             rhspmlq[pmlrhsId+0*p_Nfields*p_Np+2*p_Np] += Lnxdq3;
//             rhspmlq[pmlrhsId+0*p_Nfields*p_Np+3*p_Np] += Lnxdq4;
//             rhspmlq[pmlrhsId+0*p_Nfields*p_Np+4*p_Np] += Lnxdq5;
//             rhspmlq[pmlrhsId+0*p_Nfields*p_Np+5*p_Np] += Lnxdq6;

//             rhspmlq[pmlrhsId+1*p_Nfields*p_Np+0*p_Np] += Lnydq1;
//             rhspmlq[pmlrhsId+1*p_Nfields*p_Np+1*p_Np] += Lnydq2;
//             rhspmlq[pmlrhsId+1*p_Nfields*p_Np+2*p_Np] += Lnydq3;
//             rhspmlq[pmlrhsId+1*p_Nfields*p_Np+3*p_Np] += Lnydq4;
//             rhspmlq[pmlrhsId+1*p_Nfields*p_Np+4*p_Np] += Lnydq5;
//             rhspmlq[pmlrhsId+1*p_Nfields*p_Np+5*p_Np] += Lnydq6;

//             rhsq[rhsId+0*p_Np] += (Lnxdq1 + Lnydq1);
//             rhsq[rhsId+1*p_Np] += (Lnxdq2 + Lnydq2);
//             rhsq[rhsId+2*p_Np] += (Lnxdq3 + Lnydq3);
//             rhsq[rhsId+3*p_Np] += (Lnxdq4 + Lnydq4);
//             rhsq[rhsId+4*p_Np] += (Lnxdq5 + Lnydq5);
//             rhsq[rhsId+5*p_Np] += (Lnxdq6 + Lnydq6);
//           }
//         }
//       }
//     }
//   }
// }
