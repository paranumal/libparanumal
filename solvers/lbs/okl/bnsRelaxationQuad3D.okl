/*

  The MIT License (MIT)

  Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.

*/

// Start index of non-zero nonlinear terms
#define p_qNs 4

#if 0

// nodal version
@kernel void bnsRelaxationQuad3D(const dlong Nelements,
				 @restrict const  dlong *  elementIds,
				 @restrict const  dfloat *  vgeo,
				 @restrict const  dfloat *  cubvgeo,
				 const dlong offset,
				 const int   shift,
				 @restrict const  dfloat *  cubInterpT,
				 @restrict const  dfloat *  cubProjectT,
				 @restrict const  dfloat *  q,
				 @restrict dfloat *  rhsq){
  
  for(dlong eo=0;eo<Nelements;eo+=p_NblockV;@outer(0)){  // for all elements
    
    // @shared memory for q at nodes
    @exclusive dfloat r_q[p_Nfields];
    @exclusive dlong e; 
    
    //fetch the U and V values and store in flux arrays in @shared
    for(int es=0;es<p_NblockV;++es;@inner(2)){   
      for(int j=0;j<p_Nq;++j;@inner(1)){ 
        for(int i=0;i<p_Nq;++i;@inner(0)){    
          dlong et = eo+es; // element in block
          if (et<Nelements) {
            e = elementIds[et];

	    const dlong id = e*p_Nfields*p_Np + j*p_Nq + i;
	    
#pragma unroll p_Nfields
	    for(int fld=0; fld<p_Nfields;++fld){
	      r_q[fld] = q[id+fld*p_Np];
	    }
	    
            dlong rhsId = e*p_Np*p_Nfields + j*p_Nq + i;
	    // 
	    if(p_MRSAAB)
	      rhsId     += shift*offset;
	    
	    // BGK relaxation approximation to the Boltzmann collision operator for N5 - N10
	    // [ for LSERK the linear term is added below ]
	    dfloat rinv = 1.f/r_q[0];
	    dfloat tmp4 = (p_invsqrt2*r_q[1]*r_q[1]*rinv);
	    dfloat tmp5 = (p_invsqrt2*r_q[2]*r_q[2]*rinv);
	    dfloat tmp6 = (p_invsqrt2*r_q[3]*r_q[3]*rinv);
	    dfloat tmp7 = r_q[1]*r_q[2]*rinv;
	    dfloat tmp8 = r_q[1]*r_q[3]*rinv;
	    dfloat tmp9 = r_q[2]*r_q[3]*rinv;
	    
	    if(!p_SEMI_ANALYTIC){
	      tmp4 -= r_q[4];
	      tmp5 -= r_q[5];
	      tmp6 -= r_q[6];
	      tmp7 -= r_q[7];
	      tmp8 -= r_q[8];
	      tmp9 -= r_q[9];
	    }

	    rhsq[rhsId + 4*p_Np] += p_tauInv*tmp4;
	    rhsq[rhsId + 5*p_Np] += p_tauInv*tmp5;
	    rhsq[rhsId + 6*p_Np] += p_tauInv*tmp6;
	    rhsq[rhsId + 7*p_Np] += p_tauInv*tmp7;
	    rhsq[rhsId + 8*p_Np] += p_tauInv*tmp8;
	    rhsq[rhsId + 9*p_Np] += p_tauInv*tmp9;	    
	  }
	}
      }
    }
  }
} 

#else
// cubature version 
@kernel void bnsRelaxationQuad3D(const dlong Nelements,
				 @restrict const  dlong *  elementIds,
				 @restrict const  dfloat *  vgeo,
				 @restrict const  dfloat *  cubvgeo,
				 const dlong offset,
				 const int   shift,
				 @restrict const  dfloat *  cubInterpT,
				 @restrict const  dfloat *  cubProjectT,
				 @restrict const  dfloat *  q,
				 @restrict dfloat *  rhsq){
  
  for(dlong eo=0;eo<Nelements;eo+=p_NblockV;@outer(0)){  // for all elements

    // @shared memory for q at nodes
    @shared dfloat s_q[p_NblockV][p_Nfields][p_cubNq][p_cubNq];

    @exclusive dfloat r_q[p_Nfields];
    
    @shared dfloat s_cubInterpT[p_Nq][p_cubNq];
    @shared dfloat s_cubProjectT[p_cubNq][p_Nq];
    
    @exclusive dlong e; 
    
    //fetch the U and V values and store in flux arrays in @shared
    for(int es=0;es<p_NblockV;++es;@inner(2)){   
      for(int j=0;j<p_cubNq;++j;@inner(1)){ 
        for(int i=0;i<p_cubNq;++i;@inner(0)){    
          dlong et = eo+es; // element in block
          if (et<Nelements) {
            e = elementIds[et];
            if ((i<p_Nq) && (j<p_Nq)){ 
              const dlong id = e*p_Nfields*p_Np + j*p_Nq + i;
              
#pragma unroll p_Nfields
              for(int fld=0; fld<p_Nfields;++fld){
                s_q[es][fld][j][i] = q[id+fld*p_Np];
              }
            }
          }

          const int ids = i+j*p_cubNq;
          if ((es==0) && (ids<p_Nq*p_cubNq)) {
            s_cubInterpT[0][ids] = cubInterpT[ids];
            s_cubProjectT[0][ids] = cubProjectT[ids];
          }
        }
      }
    }
      
    @barrier("local");

    //interpolate in i, store in register
    for(int es=0;es<p_NblockV;++es;@inner(2)){   
      for(int j=0;j<p_cubNq;++j;@inner(1)){ 
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          if (j<p_Nq) {

            for(int fld=0; fld<p_Nfields; fld++)
              r_q[fld] = 0.f; 
            

#pragma unroll p_Nq
            for (int n=0;n<p_Nq;n++) {
              const dfloat Ini = s_cubInterpT[n][i];
#pragma unroll p_Nfields
              for(int fld=0; fld<p_Nfields; fld++){
                r_q[fld]  += Ini*s_q[es][fld][j][n];                
              }
            }
          }
        }
      }
    }

    @barrier("local");

    //write register back to @shared
    for(int es=0;es<p_NblockV;++es;@inner(2)){   
      for(int j=0;j<p_cubNq;++j;@inner(1)){ 
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          if (j<p_Nq) {
            for(int fld=0; fld<p_Nfields; fld++){
              s_q[es][fld][j][i] = r_q[fld];              
            }
          }
        }
      }
    }

    @barrier("local");

    //interpolate in j, store in register
    for(int es=0;es<p_NblockV;++es;@inner(2)){   
      for(int j=0;j<p_cubNq;++j;@inner(1)){ 
        for(int i=0;i<p_cubNq;++i;@inner(0)){
         
          for(int fld=0; fld<p_Nfields; fld++)
            r_q[fld] = 0.f; 
  
#pragma unroll p_Nq
          for (int n=0;n<p_Nq;n++) {
            const dfloat Inj = s_cubInterpT[n][j];
            // #pragma unroll p_Nfields
            for(int fld=0; fld<p_Nfields; fld++){
              r_q[fld]  += Inj*s_q[es][fld][n][i];                
            }
          }   
        }
      }
    }

    @barrier("local");
  
    //interpolate in j, store in register
    for(int es=0;es<p_NblockV;++es;@inner(2)){   
      for(int j=0;j<p_cubNq;++j;@inner(1)){ 
        for(int i=0;i<p_cubNq;++i;@inner(0)){
	  dlong et = eo+es; // element in block
	  if (et<Nelements) {
	    const dlong gid = e*p_cubNp*p_Nvgeo+ j*p_cubNq +i;
	    const dfloat J = cubvgeo[gid + p_JID*p_cubNp];
	    
	    const dfloat icubq1 = 1.f/r_q[0];
	    // BGK relaxation approximation to the Boltzmann collision operator for N5 - N10
	    // [ for LSERK the linear term is added below ]
	    s_q[es][4][j][i]  = J*p_tauInv*(p_invsqrt2*r_q[1]*r_q[1]*icubq1);
	    s_q[es][5][j][i]  = J*p_tauInv*(p_invsqrt2*r_q[2]*r_q[2]*icubq1);
	    s_q[es][6][j][i]  = J*p_tauInv*(p_invsqrt2*r_q[3]*r_q[3]*icubq1);

	    s_q[es][7][j][i]  = J*p_tauInv*(r_q[1]*r_q[2]*icubq1);
	    s_q[es][8][j][i]  = J*p_tauInv*(r_q[1]*r_q[3]*icubq1);
	    s_q[es][9][j][i]  = J*p_tauInv*(r_q[2]*r_q[3]*icubq1);
	    
	    if(!p_SEMI_ANALYTIC){
	      s_q[es][4][j][i] -= J*p_tauInv*r_q[4];
	      s_q[es][5][j][i] -= J*p_tauInv*r_q[5];
	      s_q[es][6][j][i] -= J*p_tauInv*r_q[6];
	      s_q[es][7][j][i] -= J*p_tauInv*r_q[7];
	      s_q[es][8][j][i] -= J*p_tauInv*r_q[8];
	      s_q[es][9][j][i] -= J*p_tauInv*r_q[9];
	    }
	  }
	}
      }
    }
    
    @barrier("local");
    
    //project in j
    for(int es=0;es<p_NblockV;++es;@inner(2)){   
      for(int j=0;j<p_cubNq;++j;@inner(1)){ 
        for(int i=0;i<p_cubNq;++i;@inner(0)){
	  
          for(int fld=0; fld<p_Nfields; fld++)
            r_q[fld] = 0.f; 
	  
          if (j<p_Nq) {
#pragma unroll p_cubNq
            for (int n=0;n<p_cubNq;n++) {
              const dfloat Pnj = s_cubProjectT[n][j];
              for(int fld=p_qNs; fld<p_Nfields; fld++){
                r_q[fld] += Pnj*s_q[es][fld][n][i];
              }
            }
          }
        }
      }
    }
    
    @barrier("local"); 

    //write register back to @shared
    for(int es=0;es<p_NblockV;++es;@inner(2)){   
      for(int j=0;j<p_cubNq;++j;@inner(1)){ 
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          if (j<p_Nq) {
            for(int fld=p_qNs; fld<p_Nfields; fld++){
              s_q[es][fld][j][i] = r_q[fld];              
            }
          }
        }
      }
    }
    
    @barrier("local");
    
    // project in i and update
    for(int es=0;es<p_NblockV;++es;@inner(2)){ 
      for(int j=0;j<p_cubNq;++j;@inner(1)){ 
        for(int i=0;i<p_cubNq;++i;@inner(0)){  
          const dlong et = eo+es; // element in block
          if((et<Nelements) && (i<p_Nq) && (j<p_Nq)){
            const dlong gid = e*p_Np*p_Nvgeo+ j*p_Nq +i;
            const dfloat invJW = vgeo[gid + p_IJWID*p_Np];
	    
            for(int fld=0; fld<p_Nfields; fld++)
              r_q[fld] = 0.f; 
	    
#pragma unroll p_cubNq
            for(int n=0;n<p_cubNq;++n){
              const dfloat Pni = s_cubProjectT[n][i];
              for(int fld=p_qNs; fld<p_Nfields; fld++){
                r_q[fld] += Pni*s_q[es][fld][j][n];
              }
            }
	    
            dlong rhsId = e*p_Np*p_Nfields + j*p_Nq + i;
	    // 
	    if(p_MRSAAB)
	      rhsId     += shift*offset;
	    
	    for(int fld=p_qNs; fld<p_Nfields; fld++){
              rhsq[rhsId + fld*p_Np]  += invJW*r_q[fld];
            }
          }
        }
      }
    }
  }  
} 
#endif
