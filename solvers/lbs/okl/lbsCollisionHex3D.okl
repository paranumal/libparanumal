/*

  The MIT License (MIT)

  Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.

*/

// Equilibrium Distribution unmodified!!!!
// Equilibrium Distribution unmodified!!!!
void equiDist3D(const dfloat ew,  const dfloat ex, const dfloat ey, const dfloat ez,
                const dfloat r,  const dfloat u,  const dfloat v, const dfloat w, dfloat *feq){
  
  const dfloat un = (ex*u + ey*v + ez*w); 
  *feq = r*ew*(1.0f + p_ic2*un + 0.5f*p_ic4*un*un - 0.5f*p_ic2*(u*u + v*v + w*w)); 
}


// Compute collision step, physical velocity and scaled external forcing
@kernel void lbsCollisionHex3D(const dlong Nelements,
			       // @restrict const  dlong  *  elementIds,
			       const dfloat t,
			       const dfloat dt,
			       const dfloat gamma, // lambda/dt
			       const dfloat nu, // 1/Re
			       @restrict const dfloat * LBM, 
			       @restrict const dfloat * x, 
			       @restrict const dfloat * y, 
			       @restrict const dfloat * z, 
			       @restrict const dfloat *  F,
			       @restrict const dfloat *  U, 
			       @restrict dfloat *  q){

  for(dlong e=0;e<Nelements;++e; @outer(0)){  // for all elements
    for(int k=0;k<p_Nq;++k;@inner(2)){
      for(int j=0;j<p_Nq;++j;@inner(1)){
	for(int i=0;i<p_Nq;++i;@inner(0)){

	  const dlong idf  = i + j*p_Nq + k*p_Nq*p_Nq + p_Nfields*p_Np*e;
	  const dlong idn  = i + j*p_Nq + k*p_Nq*p_Nq + p_Nmacro*p_Np*e;

	  const dfloat rn = U[idn +0*p_Np]; 
          const dfloat un = U[idn +1*p_Np]; 
          const dfloat vn = U[idn +2*p_Np]; 
          const dfloat wn = U[idn +3*p_Np]; 

#pragma unroll p_Nfields
	  for(int fld=0; fld<p_Nfields;++fld){
	    const dfloat ew = LBM[fld + 0*p_Nfields]; 
            const dfloat ex = LBM[fld + 1*p_Nfields]; 
            const dfloat ey = LBM[fld + 2*p_Nfields]; 
            const dfloat ez = LBM[fld + 3*p_Nfields]; 
            //
            const dfloat fn = F[idf+fld*p_Np]; // external forcing 
            const dfloat qn = q[idf+fld*p_Np]; 
            
            dfloat qeq = 0.f; 
            equiDist3D(ew, ex, ey, ez, rn, un, vn, wn, &qeq);
            
            // Compute forcing term using unmodified equilibrium distribution
            const dfloat qext = fn*qeq*dt;  
            
            // modify equilibrium forcing here
            qeq -= 0.5*dt*fn; 
            
            // collision 
            q[idf+fld*p_Np] += (qext - 1.f/(gamma + 0.5f)*( qn - qeq)); 
	  }
	}
      }
    }
  }
}   


@kernel void lbsForcingHex3D(const dlong Nelements,
			     // @restrict const  dlong  *  elementIds,
			     const dfloat t,
			     const dfloat dt,
			     const dfloat gamma, // lambda/dt
			     const dfloat nu, // 1/Re
			     @restrict const dfloat * LBM, 
			     @restrict const dfloat * x, 
			     @restrict const dfloat * y, 
			     @restrict const dfloat * z, 
			     @restrict const dfloat * q, 
			     @restrict dfloat *  F,
			     @restrict dfloat *  U){

  
  for(dlong e=0;e<Nelements;++e; @outer(0)){  // for all elements
    for(int k=0;k<p_Nq;++k;@inner(2)){
      for(int j=0;j<p_Nq;++j;@inner(1)){
	for(int i=0;i<p_Nq;++i;@inner(0)){
	    
	  const dlong idf  = i + j*p_Nq + k*p_Nq*p_Nq + p_Nfields*p_Np*e;
	  const dlong idn  = i + j*p_Nq + k*p_Nq*p_Nq + p_Nmacro*p_Np*e;
	    		
	  const dfloat xn = x[i + j*p_Nq + k*p_Nq*p_Nq + e*p_Np]; 
	  const dfloat yn = y[i + j*p_Nq + k*p_Nq*p_Nq + e*p_Np]; 
	  const dfloat zn = z[i + j*p_Nq + k*p_Nq*p_Nq + e*p_Np]; 

	  dfloat rn = U[idn +0*p_Np]; 
          dfloat un = U[idn +1*p_Np]; 
          dfloat vn = U[idn +2*p_Np]; 
          dfloat wn = U[idn +3*p_Np]; 

	  // Compute force here!!!!
          // !!! This is currenlty only force, can be modified
          dfloat fx = 0.f, fy = 0.f, fz = 0.f; // Use previous rn un vn to compute fx, fy 
          lbsBodyForce3D(nu, t, xn, yn, zn, rn, un, vn, wn, &fx, &fy, &fz); 
          

	  // Now update velocity 
          rn =0.f, un =0.f, vn =0.f, wn=0.f; 
#pragma unroll p_Nfields
          for(int fld=0; fld<p_Nfields;++fld){
            // const dfloat ew = LBM[fld + 0*p_Nfields]; 
            const dfloat ex = LBM[fld + 1*p_Nfields]; 
            const dfloat ey = LBM[fld + 2*p_Nfields]; 
            const dfloat ez = LBM[fld + 3*p_Nfields]; 
            
            const dfloat qn = q[idf+fld*p_Np]; 
            rn  += qn; // density
            un  += ex*qn; 
            vn  += ey*qn; 
            wn  += ez*qn; 
          }

          // This is currenlty only force, can be modified
          un  = (un + 0.5*fx*dt)/rn;
          vn  = (vn + 0.5*fy*dt)/rn;
          wn  = (wn + 0.5*fz*dt)/rn;
          

          for(int fld=0; fld<p_Nfields;++fld){         
            const dfloat ex = LBM[fld + 1*p_Nfields]; 
            const dfloat ey = LBM[fld + 2*p_Nfields]; 
            const dfloat ez = LBM[fld + 3*p_Nfields]; 
            F[idf +fld*p_Np] =  1.f/rn*p_ic2*( (ex-un)*fx + (ey-vn)*fy + (ez-wn)*fz ); 
          }

          U[idn + 0*p_Np] = rn; 
          U[idn + 1*p_Np] = un; 
          U[idn + 2*p_Np] = vn; 
          U[idn + 3*p_Np] = wn; 

	}
      }
    }
  }   
}

// Compute collision step and update velocity field
@kernel void lbsMomentsHex3D(const dlong Nelements,
			     // @restrict const  dlong  *  elementIds,
			     @restrict const dfloat * LBM, 
			     @restrict const dfloat *  q,
			     @restrict dfloat *  U){

  for(dlong e=0;e<Nelements;++e; @outer(0)){  // for all elements
    for(int k=0;k<p_Nq;++k;@inner(2)){
      for(int j=0;j<p_Nq;++j;@inner(1)){
	for(int i=0;i<p_Nq;++i;@inner(0)){
	  const dlong idf  = i + j*p_Nq + k*p_Nq*p_Nq + p_Nfields*p_Np*e;
	  const dlong idn  = i + j*p_Nq + k*p_Nq*p_Nq + p_Nmacro*p_Np*e;

	  dfloat rn = 0.f; 
	  dfloat un = 0.f; 
	  dfloat vn = 0.f; 
	  dfloat wn = 0.f; 

#pragma unroll p_Nfields
	  for(int fld=0; fld<p_Nfields;++fld){
	    const dfloat qn = q[idf+fld*p_Np]; 
	    rn  += qn; // density
	    un  += LBM[fld + 1*p_Nfields]*qn; 
	    vn  += LBM[fld + 2*p_Nfields]*qn; 
	    wn  += LBM[fld + 3*p_Nfields]*qn; 
	  }
	  un = un/rn; //x-velocity
	  vn = vn/rn; //y-velocity
	  wn = wn/rn; //z-velocity

	  // const dlong idn = e*p_Nmacro*p_Np + i + j*p_Nq + k*p_Nq*p_Nq ;

	  U[idn + 0*p_Np] = rn; 
	  U[idn + 1*p_Np] = un; 
	  U[idn + 2*p_Np] = vn; 
	  U[idn + 3*p_Np] = wn; 

	}
      }
    }
  }
}



// Compute phase field from mocaro field
@kernel void lbsPhaseFieldHex3D(const dlong Nelements,
				// @restrict const  dlong  *  elementIds,
				const dfloat t,
				const dfloat dt,
				const dfloat gamma, // lambda/dt
				const dfloat nu, // 1/Re
				@restrict const dfloat * LBM, 
				@restrict const dfloat * x, 
				@restrict const dfloat * y, 
				@restrict const dfloat * z, 
				@restrict const dfloat *  U,
				@restrict dfloat *  q){

  
  for(dlong e=0;e<Nelements;++e; @outer(0)){  // for all elements
    for(int k=0;k<p_Nq;++k;@inner(2)){
      for(int j=0;j<p_Nq;++j;@inner(1)){
	for(int i=0;i<p_Nq;++i;@inner(0)){
	    
	  const dlong idf  = i + j*p_Nq + k*p_Nq*p_Nq + p_Nfields*p_Np*e;
	  const dlong idn  = i + j*p_Nq + k*p_Nq*p_Nq + p_Nmacro*p_Np*e;
	    		
	  const dfloat xn = x[i + j*p_Nq + k*p_Nq*p_Nq + e*p_Np]; 
	  const dfloat yn = y[i + j*p_Nq + k*p_Nq*p_Nq + e*p_Np]; 
	  const dfloat zn = z[i + j*p_Nq + k*p_Nq*p_Nq + e*p_Np]; 

	  const dfloat rn = U[idn +0*p_Np]; 
          const dfloat un = U[idn +1*p_Np]; 
          const dfloat vn = U[idn +2*p_Np]; 
          const dfloat wn = U[idn +3*p_Np]; 

	  // Compute force here!!!!
          // !!! This is currenlty only force, can be modified
          dfloat fx = 0.f, fy = 0.f, fz = 0.f; // Use previous rn un vn to compute fx, fy 
          lbsBodyForce3D(nu, t, xn, yn, zn, rn, un, vn, wn, &fx, &fy, &fz); 

#pragma unroll p_Nfields
          for(int fld=0; fld<p_Nfields;++fld){
            const dfloat ew = LBM[fld + 0*p_Nfields]; 
            const dfloat ex = LBM[fld + 1*p_Nfields]; 
            const dfloat ey = LBM[fld + 2*p_Nfields]; 
            const dfloat ez = LBM[fld + 3*p_Nfields]; 

            dfloat qeq = 0.f; 
            equiDist3D(ew, ex, ey, ez, rn, un, vn, wn, &qeq); 
            const dfloat qext =  1.f/rn*p_ic2*((ex-un)*fx + (ey-vn)*fy + (ez-wn)*fz); 

            q[idf + fld*p_Np]  = qeq*(1.f- 0.5f*dt*qext);

          }

	}
      }
    }
  }
}
