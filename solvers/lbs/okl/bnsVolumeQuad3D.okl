/*

  The MIT License (MIT)

  Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.

*/
#define TDIR 1
// Only difference with boltzmannVolume2D is size of rhsq and shifting
@kernel void bnsVolumeQuad3D(const dlong Nelements,
			     @restrict const  dlong *  elementIds,
			     const dlong offset,
			     const int shift,
			     const dfloat fx,
			     const dfloat fy,
			     const dfloat fz,
			     @restrict const  dfloat *  vgeo,
			     @restrict const  dfloat * x, 
			     @restrict const  dfloat * y,
			     @restrict const  dfloat * z, 
			     @restrict const  dfloat *  Dmatrices,
			     @restrict const  dfloat *  q,
			     @restrict dfloat *  rhsq){
  
  for(dlong eo=0;eo<Nelements;eo+=p_NblockV;@outer(0)){  // for all elements
    
    @shared dfloat s_q[p_Nfields][p_NblockV][p_Nq][p_Nq];
    @shared dfloat s_D[p_Nq][p_Nq];
    @shared dfloat s_DW[p_Nq][p_Nq];

    for(int es=0;es<p_NblockV;++es;@inner(2)){
      for(int j=0;j<p_Nq;++j;@inner(1)){
	for(int i=0;i<p_Nq;++i;@inner(0)){

	  const dlong et = eo+es; // element in block
	  if(et<Nelements){
	    const dlong e = elementIds[et];
	    const int base = i + j*p_Nq + p_Nfields*p_Np*e;
	    for(int fld=0;fld<p_Nfields;++fld){
	      s_q[fld][es][j][i] = q[base+fld*p_Np];
	    }
	  }
	  
	  if(es==0){
	    s_D[j][i] = Dmatrices[j*p_Nq+i];
	    s_DW[j][i] = Dmatrices[p_Nq*p_Nq + j*p_Nq+i];
	  }
	}
      }
    }
    
    // make sure all node data is loaded into shared
    @barrier("local");
    
    for(int es=0;es<p_NblockV;++es;@inner(2)){
      for(int j=0;j<p_Nq;++j;@inner(1)){
	for(int i=0;i<p_Nq;++i;@inner(0)){
	  const dlong et = eo+es; // element in block

	  if(et<Nelements){
            const dlong e = elementIds[et];   
	    const int n=j*p_Nq+i;

	    // prefetch geometric factors (constant on triangle)
	    const int gbase = e*p_Np*p_Nvgeo + n;
	    const dfloat drdx = vgeo[gbase + p_Np*p_RXID];
	    const dfloat drdy = vgeo[gbase + p_Np*p_RYID];
	    const dfloat drdz = vgeo[gbase + p_Np*p_RZID];
	    const dfloat dsdx = vgeo[gbase + p_Np*p_SXID];
	    const dfloat dsdy = vgeo[gbase + p_Np*p_SYID];
	    const dfloat dsdz = vgeo[gbase + p_Np*p_SZID];
#if TDIR
	    const dfloat dtdx = vgeo[gbase + p_Np*p_TXID];
	    const dfloat dtdy = vgeo[gbase + p_Np*p_TYID];
	    const dfloat dtdz = vgeo[gbase + p_Np*p_TZID];
#endif

	    // compute 'r' and 's' derivatives of (q_m) at node n
	    dfloat dqdr[p_Nfields], dqds[p_Nfields];
	    
#pragma unroll p_Nfields
	    for(int fld=0;fld<p_Nfields;++fld){
	      dqdr[fld] = 0;
	      dqds[fld] = 0;
	    }
	    
#pragma unroll p_Nq
	    for(int m=0;m<p_Nq;++m){
	      const dfloat Dim = s_D[i][m]; // could L1
	      const dfloat Djm = s_D[j][m];
	      
	      // differentiate q components with respect to 'r'
#pragma unroll p_Nfields
	      for(int fld=0;fld<p_Nfields;++fld)
		dqdr[fld] += Dim*s_q[fld][es][j][m]; // 4 bytes per flop (2TF max)

	      // differentiate q components with respect to 's'
#pragma unroll p_Nfields
	      for(int fld=0;fld<p_Nfields;++fld)
		dqds[fld] += Djm*s_q[fld][es][m][i];
	    }
	    
	    const dfloat q1  = s_q[0][es][j][i];
	    const dfloat q2  = s_q[1][es][j][i];
	    const dfloat q3  = s_q[2][es][j][i];
	    const dfloat q4  = s_q[3][es][j][i];
	    const dfloat q5  = s_q[4][es][j][i];
	    const dfloat q6  = s_q[5][es][j][i];
	    const dfloat q7  = s_q[6][es][j][i];
	    const dfloat q8  = s_q[7][es][j][i];
	    const dfloat q9  = s_q[8][es][j][i];
	    const dfloat q10 = s_q[9][es][j][i];

	    const dfloat invq1 = 1.f/q1;
#if TDIR
	    const dfloat dq1dx = drdx*dqdr[0] + dsdx*dqds[0] + dtdx*q1;
	    const dfloat dq1dy = drdy*dqdr[0] + dsdy*dqds[0] + dtdy*q1;
	    const dfloat dq1dz = drdz*dqdr[0] + dsdz*dqds[0] + dtdz*q1;

	    const dfloat dq2dx = drdx*dqdr[1] + dsdx*dqds[1] + dtdx*q2;
	    const dfloat dq2dy = drdy*dqdr[1] + dsdy*dqds[1] + dtdy*q2;
	    const dfloat dq2dz = drdz*dqdr[1] + dsdz*dqds[1] + dtdz*q2;

	    const dfloat dq3dx = drdx*dqdr[2] + dsdx*dqds[2] + dtdx*q3;
	    const dfloat dq3dy = drdy*dqdr[2] + dsdy*dqds[2] + dtdy*q3;
	    const dfloat dq3dz = drdz*dqdr[2] + dsdz*dqds[2] + dtdz*q3;

	    const dfloat dq4dx = drdx*dqdr[3] + dsdx*dqds[3] + dtdx*q4;
	    const dfloat dq4dy = drdy*dqdr[3] + dsdy*dqds[3] + dtdy*q4;
	    const dfloat dq4dz = drdz*dqdr[3] + dsdz*dqds[3] + dtdz*q4;

	    const dfloat dq5dx = drdx*dqdr[4] + dsdx*dqds[4] + dtdx*q5;
	    const dfloat dq6dy = drdy*dqdr[5] + dsdy*dqds[5] + dtdy*q6;
	    const dfloat dq7dz = drdz*dqdr[6] + dsdz*dqds[6] + dtdz*q7;

	    const dfloat dq8dx = drdx*dqdr[7] + dsdx*dqds[7] + dtdx*q8;
	    const dfloat dq8dy = drdy*dqdr[7] + dsdy*dqds[7] + dtdy*q8;

	    const dfloat dq9dx = drdx*dqdr[8] + dsdx*dqds[8] + dtdx*q9;
	    const dfloat dq9dz = drdz*dqdr[8] + dsdz*dqds[8] + dtdz*q9;

	    const dfloat dq10dy = drdy*dqdr[9] + dsdy*dqds[9] + dtdy*q10;
	    const dfloat dq10dz = drdz*dqdr[9] + dsdz*dqds[9] + dtdz*q10;
#else
			const dfloat dq1dx = drdx*dqdr[0] + dsdx*dqds[0];
			const dfloat dq1dy = drdy*dqdr[0] + dsdy*dqds[0];
			const dfloat dq1dz = drdz*dqdr[0] + dsdz*dqds[0];

			const dfloat dq2dx = drdx*dqdr[1] + dsdx*dqds[1];
			const dfloat dq2dy = drdy*dqdr[1] + dsdy*dqds[1];
			const dfloat dq2dz = drdz*dqdr[1] + dsdz*dqds[1];

			const dfloat dq3dx = drdx*dqdr[2] + dsdx*dqds[2];
			const dfloat dq3dy = drdy*dqdr[2] + dsdy*dqds[2];
			const dfloat dq3dz = drdz*dqdr[2] + dsdz*dqds[2];

			const dfloat dq4dx = drdx*dqdr[3] + dsdx*dqds[3];
			const dfloat dq4dy = drdy*dqdr[3] + dsdy*dqds[3];
			const dfloat dq4dz = drdz*dqdr[3] + dsdz*dqds[3];

			const dfloat dq5dx = drdx*dqdr[4] + dsdx*dqds[4];
			const dfloat dq6dy = drdy*dqdr[5] + dsdy*dqds[5];
			const dfloat dq7dz = drdz*dqdr[6] + dsdz*dqds[6];

			const dfloat dq8dx = drdx*dqdr[7] + dsdx*dqds[7];
			const dfloat dq8dy = drdy*dqdr[7] + dsdy*dqds[7];

			const dfloat dq9dx = drdx*dqdr[8] + dsdx*dqds[8];
			const dfloat dq9dz = drdz*dqdr[8] + dsdz*dqds[8];

			const dfloat dq10dy = drdy*dqdr[9] + dsdy*dqds[9];
			const dfloat dq10dz = drdz*dqdr[9] + dsdz*dqds[9];
#endif

	    const dfloat rhsq1 = -p_sqrtRT*(dq2dx + dq3dy + dq4dz);

	    dfloat rhsq2 = -p_sqrtRT*(dq1dx + p_sqrt2*dq5dx + dq8dy + dq9dz);
	    dfloat rhsq3 = -p_sqrtRT*(dq1dy + p_sqrt2*dq6dy + dq8dx + dq10dz);
	    dfloat rhsq4 = -p_sqrtRT*(dq1dz + p_sqrt2*dq7dz + dq9dx + dq10dy);

	    const dfloat rhsq5 = -p_sqrtRT*p_sqrt2*dq2dx;
	    const dfloat rhsq6 = -p_sqrtRT*p_sqrt2*dq3dy;
	    const dfloat rhsq7 = -p_sqrtRT*p_sqrt2*dq4dz;

	    const dfloat rhsq8  = -p_sqrtRT*(dq3dx+dq2dy);
	    const dfloat rhsq9  = -p_sqrtRT*(dq4dx+dq2dz);
	    const dfloat rhsq10 = -p_sqrtRT*(dq4dy+dq3dz);

	    // constrain momentum changes to lie on sphere
	    const dfloat xij = x[i+j*p_Nq+e*p_Np];
	    const dfloat yij = y[i+j*p_Nq+e*p_Np];
	    const dfloat zij = z[i+j*p_Nq+e*p_Np];


	    // add coriolis force to momentum equation
	    rhsq2 -= p_fainv*zij*(yij*q4-zij*q3);
	    rhsq3 -= p_fainv*zij*(zij*q2-xij*q4);
	    rhsq4 -= p_fainv*zij*(xij*q3-yij*q2);

#if 0
	    // remove radial component of momentum change
	    const dfloat xdotrhsq = (rhsq2*xij + rhsq3*yij + rhsq4*zij)*p_invRadiusSq;

	    rhsq2 -= xij*xdotrhsq;
	    rhsq3 -= yij*xdotrhsq;
	    rhsq4 -= zij*xdotrhsq;
#endif

	    int base = e*p_Np*p_Nfields+n;

	    if(p_MRSAAB){
	      base += shift*offset;
	    }

	    rhsq[base+0*p_Np] = rhsq1;
	    rhsq[base+1*p_Np] = rhsq2;
	    rhsq[base+2*p_Np] = rhsq3;
	    rhsq[base+3*p_Np] = rhsq4;
	    rhsq[base+4*p_Np] = rhsq5;
	    rhsq[base+5*p_Np] = rhsq6;
	    rhsq[base+6*p_Np] = rhsq7;
	    rhsq[base+7*p_Np] = rhsq8;
	    rhsq[base+8*p_Np] = rhsq9;
	    rhsq[base+9*p_Np] = rhsq10;
	    
	  }
	}
      }
    }
  }
}
