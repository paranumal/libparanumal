/*

The MIT License (MIT)

Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

// Roe averaged Riemann solver
void upwindRoeAveraged(const dfloat nx,
                       const dfloat ny,
                       const dfloat gamma,
                       const dfloat rM,
                       const dfloat uM,
                       const dfloat vM,
                       const dfloat pM,
                       const dfloat rP,
                       const dfloat uP,
                       const dfloat vP,
                       const dfloat pP,
                       dfloat *rflux,
                       dfloat *ruflux,
                       dfloat *rvflux,
                       dfloat *Eflux){

  const dfloat EM = pM/(gamma-1) + 0.5*rM*(uM*uM+vM*vM);
  const dfloat EP = pP/(gamma-1) + 0.5*rP*(uP*uP+vP*vP);
  const dfloat HM = (EM+pM)/rM;
  const dfloat HP = (EP+pP)/rP;

  // Compute Roe average variables
  const dfloat sqrtrM = sqrt(rM);
  const dfloat sqrtrP = sqrt(rP);

  const dfloat r = sqrtrM*sqrtrP;
  const dfloat u = (sqrtrM*uM + sqrtrP*uP)/(sqrtrM + sqrtrP);
  const dfloat v = (sqrtrM*vM + sqrtrP*vP)/(sqrtrM + sqrtrP);
  const dfloat H = (sqrtrM*HM + sqrtrP*HP)/(sqrtrM + sqrtrP);

  const dfloat c2 = (gamma-1)*(H-0.5*(u*u+v*v));
  const dfloat c = sqrt(c2);

  // normal velocity
  const dfloat qP = nx*uP+ny*vP;
  const dfloat qM = nx*uM+ny*vM;
  const dfloat q  = nx*u +ny*v;

  // jump terms
  const dfloat dp = pP-pM;
  const dfloat dr = rP-rM;
  const dfloat du = uP-uM;
  const dfloat dv = vP-vM;
  const dfloat dq = qP-qM;

  const dfloat W1 = fabs(q-c) * 0.5*(dp-r*c*dq)/(c2);
  const dfloat W2 = fabs(q  ) * r;
  const dfloat W3 = fabs(q+c) * 0.5*(dp+r*c*dq)/(c2);
  const dfloat W4 = fabs(q  ) * (dr-(dp/c2));

  // Fluxes from traces n.F(uP) and n.F(uM)
  *rflux  = 0.5*((rP*qP         ) + (rM*qM         ));
  *ruflux = 0.5*((rP*uP*qP+nx*pP) + (rM*uM*qM+nx*pM));
  *rvflux = 0.5*((rP*vP*qP+ny*pP) + (rM*vM*qM+ny*pM));
  *Eflux  = 0.5*((qP*(EP+pP)    ) + (qM*(EM+pM)    ));

  // Roe flux
  *rflux  -= 0.5*(W1*1.0      + W2*0.0              + W3*1.0      + W4*1.0          );
  *ruflux -= 0.5*(W1*(u-nx*c) + W2*(du-nx*dq)       + W3*(u+nx*c) + W4*u            );
  *rvflux -= 0.5*(W1*(v-ny*c) + W2*(dv-ny*dq)       + W3*(v+ny*c) + W4*v            );
  *Eflux  -= 0.5*(W1*(H- q*c) + W2*(u*du+v*dv-q*dq) + W3*(H+ q*c) + W4*0.5*(u*u+v*v));
}

void surfaceTerms(const int face,
                  const int m,
                  const int i,
                  const int j,
                  const dfloat time,
                  dfloat s_cubProject[p_cubNq][p_Nq],
                  dfloat s_rflux[p_Nfaces][p_cubNq],
                  dfloat s_ruflux[p_Nfaces][p_cubNq],
                  dfloat s_rvflux[p_Nfaces][p_cubNq],
                  dfloat s_Eflux[p_Nfaces][p_cubNq],
                  dfloat s_rhsq[p_Nfields][p_Nq][p_Nq]){

  dfloat r = 0.f, ru = 0.f, rv = 0.f, E = 0.f;

  #pragma unroll p_cubNq
    for(int n=0;n<p_cubNq;++n){
      const dfloat Pni = s_cubProject[n][m];
      r   += Pni*s_rflux [face][n];
      ru  += Pni*s_ruflux[face][n];
      rv  += Pni*s_rvflux[face][n];
      E   += Pni*s_Eflux [face][n];
    }

  s_rhsq[0][j][i] += r;
  s_rhsq[1][j][i] += ru;
  s_rhsq[2][j][i] += rv;
  s_rhsq[3][j][i] += E;
}

// batch process elements
@kernel void cnsCubatureSurfaceQuad2D(const dlong Nelements,
                                     @restrict const  dfloat *  vgeo,
                                     @restrict const  dfloat *  cubsgeo,
                                     @restrict const  dlong  *  vmapM,
                                     @restrict const  dlong  *  vmapP,
                                     @restrict const  int    *  EToB,
                                     @restrict const  dfloat *  cubInterp,
                                     @restrict const  dfloat *  cubProject,
                                     @restrict const  dfloat *  intx,
                                     @restrict const  dfloat *  inty,
                                     @restrict const  dfloat *  intz,
                                     const dfloat time,
                                     const dfloat mu,
                                     const dfloat gamma,
                                     @restrict const  dfloat *  q,
                                     @restrict const  dfloat *  gradq,
                                     @restrict dfloat *  rhsq){

  // for all elements
  for(dlong e=0;e<Nelements;e++;@outer(0)){

    // @shared storage for flux terms
    @shared dfloat s_rhsq[p_Nfields][p_Nq][p_Nq];

    @shared dfloat s_qM[p_Nfields][p_Nfaces][p_cubNq];
    @shared dfloat s_qP[p_Nfields][p_Nfaces][p_cubNq];
    @shared dfloat s_gradqM[p_Ngrads][p_Nfaces][p_cubNq];
    @shared dfloat s_gradqP[p_Ngrads][p_Nfaces][p_cubNq];

    // reuse @shared memory buffers
#define s_rflux  s_qM[0]
#define s_ruflux s_qM[1]
#define s_rvflux s_qM[2]
#define s_Eflux  s_qM[3]

    @exclusive dfloat r_qM[p_Nfields*p_Nfaces], r_qP[p_Nfields*p_Nfaces];
    @exclusive dfloat r_gradqM[p_Nfields*p_Nfaces], r_gradqP[p_Nfields*p_Nfaces];

    @shared dfloat s_cubInterp[p_Nq][p_cubNq];
    @shared dfloat s_cubProject[p_cubNq][p_Nq];

    //for all face nodes of all elements
    for(int i=0;i<p_cubNq;++i;@inner(0)){
      if(i<p_Nq){
        #pragma unroll p_Nfaces
          for (int face=0;face<p_Nfaces;face++) {
            const dlong id  = e*p_Nfp*p_Nfaces + face*p_Nq + i;
            const dlong idM = vmapM[id];
            const dlong idP = vmapP[id];

            const dlong eM = e;
            const dlong eP = idP/p_Np;
            const int vidM = idM%p_Np;
            const int vidP = idP%p_Np;

            const dlong qbaseM = eM*p_Np*p_Nfields + vidM;
            const dlong qbaseP = eP*p_Np*p_Nfields + vidP;

            const dlong sbaseM = eM*p_Np*p_Ngrads + vidM;
            const dlong sbaseP = eP*p_Np*p_Ngrads + vidP;

            s_qM[0][face][i] = q[qbaseM + 0*p_Np];
            s_qM[1][face][i] = q[qbaseM + 1*p_Np];
            s_qM[2][face][i] = q[qbaseM + 2*p_Np];
            s_qM[3][face][i] = q[qbaseM + 3*p_Np];

            s_qP[0][face][i] = q[qbaseP + 0*p_Np];
            s_qP[1][face][i] = q[qbaseP + 1*p_Np];
            s_qP[2][face][i] = q[qbaseP + 2*p_Np];
            s_qP[3][face][i] = q[qbaseP + 3*p_Np];

            s_gradqM[0][face][i] = gradq[sbaseM+0*p_Np];
            s_gradqM[1][face][i] = gradq[sbaseM+1*p_Np];
            s_gradqM[2][face][i] = gradq[sbaseM+2*p_Np];
            s_gradqM[3][face][i] = gradq[sbaseM+3*p_Np];

            s_gradqP[0][face][i] = gradq[sbaseP+0*p_Np];
            s_gradqP[1][face][i] = gradq[sbaseP+1*p_Np];
            s_gradqP[2][face][i] = gradq[sbaseP+2*p_Np];
            s_gradqP[3][face][i] = gradq[sbaseP+3*p_Np];
          }
      }

      //zero out resulting surface contributions
      if (i<p_Nq) {
        #pragma unroll p_Nq
          for(int j=0;j<p_Nq;++j){
            s_rhsq[0][j][i] = 0.;
            s_rhsq[1][j][i] = 0.;
            s_rhsq[2][j][i] = 0.;
            s_rhsq[3][j][i] = 0.;
          }
      }

      //fetch reference operators
      #pragma unroll p_Nq
      for(int j=0;j<p_Nq;++j){
        const int id = i+j*p_cubNq;
        s_cubInterp[j][i] = cubInterp[i+j*p_cubNq];
      }

      if (i<p_Nq) {
        #pragma unroll p_cubNq
        for(int j=0;j<p_cubNq;++j){
          s_cubProject[j][i] = cubProject[i+j*p_Nq];
        }
      }
    }

    @barrier("local");


    //interpolate traces, store flux in register
    for(int i=0;i<p_cubNq;++i;@inner(0)){
      #pragma unroll p_Nfaces
        for (int face=0;face<p_Nfaces;face++) {
          r_qM[0*p_Nfaces+face] = 0.; r_qM[1*p_Nfaces+face] = 0.;
          r_qM[2*p_Nfaces+face] = 0.; r_qM[3*p_Nfaces+face] = 0.;
          r_qP[0*p_Nfaces+face] = 0.; r_qP[1*p_Nfaces+face] = 0.;
          r_qP[2*p_Nfaces+face] = 0.; r_qP[3*p_Nfaces+face] = 0.;
          r_gradqM[0*p_Nfaces+face] = 0.; r_gradqM[1*p_Nfaces+face] = 0.;
          r_gradqM[2*p_Nfaces+face] = 0.; r_gradqM[3*p_Nfaces+face] = 0.;
          r_gradqP[0*p_Nfaces+face] = 0.; r_gradqP[1*p_Nfaces+face] = 0.;
          r_gradqP[2*p_Nfaces+face] = 0.; r_gradqP[3*p_Nfaces+face] = 0.;
        }

      #pragma unroll p_Nq
        for (int n=0;n<p_Nq;n++) {
          const dfloat Ini = s_cubInterp[n][i];

          #pragma unroll p_Nfaces
            for (int face=0;face<p_Nfaces;face++) {
              r_qM[0*p_Nfaces+face] += Ini*s_qM[0][face][n];
              r_qM[1*p_Nfaces+face] += Ini*s_qM[1][face][n];
              r_qM[2*p_Nfaces+face] += Ini*s_qM[2][face][n];
              r_qM[3*p_Nfaces+face] += Ini*s_qM[3][face][n];
              r_qP[0*p_Nfaces+face] += Ini*s_qP[0][face][n];
              r_qP[1*p_Nfaces+face] += Ini*s_qP[1][face][n];
              r_qP[2*p_Nfaces+face] += Ini*s_qP[2][face][n];
              r_qP[3*p_Nfaces+face] += Ini*s_qP[3][face][n];
              r_gradqM[0*p_Nfaces+face] += Ini*s_gradqM[0][face][n];
              r_gradqM[1*p_Nfaces+face] += Ini*s_gradqM[1][face][n];
              r_gradqM[2*p_Nfaces+face] += Ini*s_gradqM[2][face][n];
              r_gradqM[3*p_Nfaces+face] += Ini*s_gradqM[3][face][n];
              r_gradqP[0*p_Nfaces+face] += Ini*s_gradqP[0][face][n];
              r_gradqP[1*p_Nfaces+face] += Ini*s_gradqP[1][face][n];
              r_gradqP[2*p_Nfaces+face] += Ini*s_gradqP[2][face][n];
              r_gradqP[3*p_Nfaces+face] += Ini*s_gradqP[3][face][n];
            }
        }
    }

    @barrier("local");

    //write fluxes to @shared
    for(int i=0;i<p_cubNq;++i;@inner(0)){
      #pragma unroll p_Nfaces
        for (int face=0;face<p_Nfaces;face++) {
          const dlong sk = e*p_cubNq*p_Nfaces + face*p_cubNq + i;
          const dfloat nx = cubsgeo[sk*p_Nsgeo+p_NXID];
          const dfloat ny = cubsgeo[sk*p_Nsgeo+p_NYID];
          const dfloat WsJ = cubsgeo[sk*p_Nsgeo+p_WSJID];

          const dfloat rM  = r_qM[0*p_Nfaces+face];
          const dfloat ruM = r_qM[1*p_Nfaces+face];
          const dfloat rvM = r_qM[2*p_Nfaces+face];
          const dfloat EM  = r_qM[3*p_Nfaces+face];

          const dfloat dudxM = r_gradqM[0*p_Nfaces+face];
          const dfloat dudyM = r_gradqM[1*p_Nfaces+face];
          const dfloat dvdxM = r_gradqM[2*p_Nfaces+face];
          const dfloat dvdyM = r_gradqM[3*p_Nfaces+face];

          dfloat rP  = r_qP[0*p_Nfaces+face];
          dfloat ruP = r_qP[1*p_Nfaces+face];
          dfloat rvP = r_qP[2*p_Nfaces+face];
          dfloat EP  = r_qP[3*p_Nfaces+face];

          dfloat dudxP = r_gradqP[0*p_Nfaces+face];
          dfloat dudyP = r_gradqP[1*p_Nfaces+face];
          dfloat dvdxP = r_gradqP[2*p_Nfaces+face];
          dfloat dvdyP = r_gradqP[3*p_Nfaces+face];

          const dfloat uM = ruM/rM;
          const dfloat vM = rvM/rM;
          const dfloat pM = (gamma-1)*(EM-0.5*rM*(uM*uM+vM*vM));

          dfloat uP = ruP/rP;
          dfloat vP = rvP/rP;
          dfloat pP = (gamma-1)*(EP-0.5*rP*(uP*uP+vP*vP));

          const int bc = EToB[face+p_Nfaces*e];
          if(bc>0){
            cnsBoundaryConditions2D(bc, gamma, mu,
                                      time, intx[sk], inty[sk], nx, ny,
                                      rM, uM, vM, pM, dudxM, dudyM, dvdxM, dvdyM,
                                      &rP, &uP, &vP, &pP, &dudxP, &dudyP, &dvdxP, &dvdyP);
          }

          dfloat rflux, ruflux, rvflux, Eflux;
          upwindRoeAveraged(nx, ny, gamma, rM, uM, vM, pM, rP, uP, vP, pP, &rflux, &ruflux, &rvflux, &Eflux);

          const dfloat T11M = mu*(2.0*dudxM - 2.0*(dudxM+dvdyM)/3.0);
          const dfloat T12M = mu*(dudyM+dvdxM);
          const dfloat T22M = mu*(2.0*dvdyM - 2.0*(dudxM+dvdyM)/3.0);
          const dfloat T31M = uM*T11M + vM*T12M;
          const dfloat T32M = uM*T12M + vM*T22M;

          const dfloat T11P = mu*(2.0*dudxP - 2.0*(dudxP+dvdyP)/3.0);
          const dfloat T12P = mu*(dudyP+dvdxP);
          const dfloat T22P = mu*(2.0*dvdyP - 2.0*(dudxP+dvdyP)/3.0);
          const dfloat T31P = uP*T11P + vP*T12P;
          const dfloat T32P = uP*T12P + vP*T22P;

          ruflux -= 0.5*(nx*(T11P+T11M) + ny*(T12P+T12M));
          rvflux -= 0.5*(nx*(T12P+T12M) + ny*(T22P+T22M));
          Eflux  -= 0.5*(nx*(T31P+T31M) + ny*(T32P+T32M));

          s_rflux [face][i] = WsJ*(-rflux);
          s_ruflux[face][i] = WsJ*(-ruflux);
          s_rvflux[face][i] = WsJ*(-rvflux);
          s_Eflux [face][i] = WsJ*(-Eflux);
        }
    }

    @barrier("local");

    // for all face nodes of all elements
    // face 0 & 2
    for(int i=0;i<p_cubNq;++i;@inner(0)){
      if(i<p_Nq){
        //surfaceTerms(0,i,i,0     );
        surfaceTerms(0, i, i, 0,
                      time, s_cubProject, s_rflux, s_ruflux, s_rvflux, s_Eflux, s_rhsq);


        //surfaceTerms(2,i,i,p_Nq-1);
        surfaceTerms(2, i, i, p_Nq-1,
                      time, s_cubProject, s_rflux, s_ruflux, s_rvflux, s_Eflux, s_rhsq);
      }
    }

    @barrier("local");

    // face 1 & 3
    for(int j=0;j<p_cubNq;++j;@inner(0)){
      if(j<p_Nq){
        //surfaceTerms(1,j,p_Nq-1,j);
        surfaceTerms(1, j, p_Nq-1, j,
                      time, s_cubProject, s_rflux, s_ruflux, s_rvflux, s_Eflux, s_rhsq);

        //surfaceTerms(3,j,0     ,j);
        surfaceTerms(3, j, 0, j,
                      time, s_cubProject, s_rflux, s_ruflux, s_rvflux, s_Eflux, s_rhsq);
      }
    }

    @barrier("local");

    for(int i=0;i<p_cubNq;++i;@inner(0)){
      if(i<p_Nq) {
        #pragma unroll p_Nq
          for(int j=0;j<p_Nq;++j){
            const dlong gid = e*p_Np*p_Nvgeo+ j*p_Nq +i;
            const dfloat invJW = vgeo[gid + p_IJWID*p_Np];

            const dlong base = e*p_Np*p_Nfields+j*p_Nq+i;
            rhsq[base+0*p_Np] += invJW*s_rhsq[0][j][i];
            rhsq[base+1*p_Np] += invJW*s_rhsq[1][j][i];
            rhsq[base+2*p_Np] += invJW*s_rhsq[2][j][i];
            rhsq[base+3*p_Np] += invJW*s_rhsq[3][j][i];
          }
      }
    }
  }
}
