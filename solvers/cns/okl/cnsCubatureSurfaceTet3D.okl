/*

The MIT License (MIT)

Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/



// Roe averaged Riemann solver
void upwindRoeAveraged(const dfloat nx,
                       const dfloat ny,
                       const dfloat nz,
		       const dfloat tx,
                       const dfloat ty,
                       const dfloat tz,
		       const dfloat bx,
                       const dfloat by,
                       const dfloat bz,	
                       const dfloat rM,
                       const dfloat ruM,
                       const dfloat rvM,
                       const dfloat rwM,
                       const dfloat rP,
                       const dfloat ruP,
                       const dfloat rvP,
                       const dfloat rwP,
                       dfloat *rflux,
                       dfloat *ruflux,
                       dfloat *rvflux,
		       dfloat *rwflux
		       ){

  // Rotate "-" trace momentum to face normal-tangent coordinates
  dfloat runM = nx*ruM + ny*rvM + nz*rwM;
  dfloat rutM = tx*ruM + ty*rvM + tz*rwM;
  dfloat rubM = bx*ruM + by*rvM + bz*rwM;

  dfloat runP = nx*ruP + ny*rvP + nz*rwP;
  dfloat rutP = tx*ruP + ty*rvP + tz*rwP;
  dfloat rubP = bx*ruP + by*rvP + bz*rwP;
  
  dfloat unM = runM/rM;
  dfloat utM = rutM/rM;
  dfloat ubM = rubM/rM;

  dfloat unP = runP/rP;
  dfloat utP = rutP/rP;
  dfloat ubP = rubP/rP;

  dfloat pM = p_RT*rM;
  dfloat pP = p_RT*rP;
  
  // Compute Roe average variables
  dfloat rMsqr = sqrt(rM);
  dfloat rPsqr = sqrt(rP); 

  dfloat r = rMsqr*rPsqr;
  dfloat un = (rMsqr*unM + rPsqr*unP)/(rMsqr + rPsqr);
  dfloat ut = (rMsqr*utM + rPsqr*utP)/(rMsqr + rPsqr);
  dfloat ub = (rMsqr*ubM + rPsqr*ubP)/(rMsqr + rPsqr);
  
  dfloat c2  = p_RT;
  dfloat c   = p_sqrtRT;

  /* 
     Riemann fluxes

     V = [0 0 1   1; 
     0 0 u+c u-c; 
     0 1 v   v;
     1 0 w   w];
     >> inv(V)

     ans =

     [            -w,        0, 0, 1]
     [            -v,        0, 1, 0]
     [ (c - u)/(2*c),  1/(2*c), 0, 0]
     [ (c + u)/(2*c), -1/(2*c), 0, 0]
  */
  
  dfloat W1M = rubM - ub*rM;
  dfloat W2M = rutM - ut*rM;
  dfloat W3M = p_half*((c-un)*rM + runM)/c;
  dfloat W4M = p_half*((c+un)*rM - runM)/c;

  dfloat W1P = rubP - ub*rP;
  dfloat W2P = rutP - ut*rP;
  dfloat W3P = p_half*((c-un)*rP + runP)/c;
  dfloat W4P = p_half*((c+un)*rP - runP)/c;

  // check inequalities
  dfloat W1 = (un>0) ? W1M:W1P;
  dfloat W2 = (un>0) ? W2M:W2P;
  dfloat W3 = (un+c>0) ? W3M:W3P;
  dfloat W4 = (un-c>0) ? W4M:W4P;

  dfloat rS   = W3+W4;
  dfloat runS = (c+un)*W3 + (un-c)*W4;
  dfloat rutS = W2 + ut*(W3+W4);
  dfloat rubS = W1 + ub*(W3+W4);

  dfloat ruS = nx*runS + tx*rutS + bx*rubS;
  dfloat rvS = ny*runS + ty*rutS + by*rubS;
  dfloat rwS = nz*runS + tz*rutS + bz*rubS;

  dfloat uS = ruS/rS;
  dfloat vS = rvS/rS;
  dfloat wS = rwS/rS;
  dfloat pS = p_RT*rS;

  *rflux  = nx*(ruS) + ny*(rvS) + nz*(rwS);
  *ruflux = nx*(ruS*uS) + ny*(ruS*vS) + nz*(ruS*wS);
  *rvflux = nx*(rvS*uS) + ny*(rvS*vS) + nz*(rvS*wS);
  *rwflux = nx*(rwS*uS) + ny*(rwS*vS) + nz*(rwS*wS);

  *ruflux += nx*(pS);
  *rvflux += ny*(pS);
  *rwflux += nz*(pS);
  
}

// batch process elements
@kernel void cnsCubatureSurfaceTet3D_v0(const dlong Nelements,
				       const int advSwitch,
				       @restrict const  dfloat *  vgeo,
				       @restrict const  dfloat *  sgeo,
				       @restrict const  dlong  *  vmapM,
				       @restrict const  dlong  *  vmapP,
				       @restrict const  int    *  EToB,
				       @restrict const  dfloat *  intInterpT, // interpolate to integration nodes
				       @restrict const  dfloat *  intLIFTT, // lift from integration to interpolation nodes
				       const dfloat time,
				       @restrict const  dfloat *  intx,
				       @restrict const  dfloat *  inty,
				       @restrict const  dfloat *  intz,
				       const dfloat mu,
				       const dfloat intfx,
				       const dfloat intfy,
				       const dfloat intfz,
				       @restrict const  dfloat *  q,
				       @restrict const  dfloat *  viscousStresses,
				       @restrict dfloat *  rhsq){
  
  // for all elements
  for(dlong e=0;e<Nelements;e++;@outer(0)){
    
    // @shared storage for flux terms
    @shared dfloat s_qM[p_Nfields][p_NfacesNfp];
    @shared dfloat s_qP[p_Nfields][p_NfacesNfp];
    @shared dfloat s_vSM[p_Nstresses][p_NfacesNfp];
    @shared dfloat s_vSP[p_Nstresses][p_NfacesNfp];

    @shared dfloat s_rflux [p_intNfpNfaces];
    @shared dfloat s_ruflux[p_intNfpNfaces];
    @shared dfloat s_rvflux[p_intNfpNfaces];
    @shared dfloat s_rwflux[p_intNfpNfaces];

    for(int n=0;n<p_cubMaxNodes;++n;@inner(0)){
      if(n<p_NfacesNfp){
        // indices of negative and positive traces of face node
        const dlong id  = e*p_Nfp*p_Nfaces + n;
        const dlong idM = vmapM[id];
        const dlong idP = vmapP[id];

        // load traces
        const dlong eM = e;
        const dlong eP = idP/p_Np;
        const int vidM = idM%p_Np;
        const int vidP = idP%p_Np;

        const dlong qbaseM = eM*p_Np*p_Nfields + vidM;
        const dlong qbaseP = eP*p_Np*p_Nfields + vidP;

        const dlong sbaseM = eM*p_Np*p_Nstresses + vidM;
        const dlong sbaseP = eP*p_Np*p_Nstresses + vidP;
        
        s_qM[0][n] = q[qbaseM + 0*p_Np];
        s_qM[1][n] = q[qbaseM + 1*p_Np];
        s_qM[2][n] = q[qbaseM + 2*p_Np];
	s_qM[3][n] = q[qbaseM + 3*p_Np];

        s_qP[0][n] = q[qbaseP + 0*p_Np];
        s_qP[1][n] = q[qbaseP + 1*p_Np];
        s_qP[2][n] = q[qbaseP + 2*p_Np];
	s_qP[3][n] = q[qbaseP + 3*p_Np];

        s_vSM[0][n] = viscousStresses[sbaseM+0*p_Np];
        s_vSM[1][n] = viscousStresses[sbaseM+1*p_Np];
        s_vSM[2][n] = viscousStresses[sbaseM+2*p_Np];
        s_vSM[3][n] = viscousStresses[sbaseM+3*p_Np];
        s_vSM[4][n] = viscousStresses[sbaseM+4*p_Np];
        s_vSM[5][n] = viscousStresses[sbaseM+5*p_Np];
        
        s_vSP[0][n] = viscousStresses[sbaseP+0*p_Np];
        s_vSP[1][n] = viscousStresses[sbaseP+1*p_Np];
        s_vSP[2][n] = viscousStresses[sbaseP+2*p_Np];
	s_vSP[3][n] = viscousStresses[sbaseP+3*p_Np];
        s_vSP[4][n] = viscousStresses[sbaseP+4*p_Np];
        s_vSP[5][n] = viscousStresses[sbaseP+5*p_Np];
      }
    }

    @barrier("local");

    // interpolate to surface integration nodes
    for(int n=0;n<p_cubMaxNodes;++n;@inner(0)){ // maxNodes = max(Nfp*Nfaces,Np)
      if(n<p_intNfpNfaces){
        // find face that owns this node
        const int face = n/p_intNfp;
      
        // load surface geofactors for this face
        const dlong sid    = p_Nsgeo*(e*p_Nfaces+face);
        const dfloat nx   = sgeo[sid+p_NXID];
        const dfloat ny   = sgeo[sid+p_NYID];
	const dfloat nz   = sgeo[sid+p_NZID];
	const dfloat tx   = sgeo[sid+p_STXID];
	const dfloat ty   = sgeo[sid+p_STYID];
	const dfloat tz   = sgeo[sid+p_STZID];
	const dfloat bx   = sgeo[sid+p_SBXID];
	const dfloat by   = sgeo[sid+p_SBYID];
	const dfloat bz   = sgeo[sid+p_SBZID];
        const dfloat sJ   = sgeo[sid+p_SJID];
        const dfloat invJ = sgeo[sid+p_IJID];

        dfloat rM  = 0., ruM = 0., rvM = 0., rwM = 0.;
        dfloat rP  = 0., ruP = 0., rvP = 0., rwP = 0.;
        dfloat T11M  = 0., T12M = 0., T13M = 0., T22M = 0., T23M = 0., T33M = 0.;
	dfloat T11P  = 0., T12P = 0., T13P = 0., T22P = 0., T23P = 0., T33P = 0.;

        // local block interpolation (face nodes to integration nodes)
        #pragma unroll p_Nfp
	  for(int m=0;m<p_Nfp;++m){
	    const dfloat iInm = intInterpT[n+m*p_Nfaces*p_intNfp];
	    const int fm = face*p_Nfp+m;
	    rM  += iInm*s_qM[0][fm];
	    ruM += iInm*s_qM[1][fm];
	    rvM += iInm*s_qM[2][fm];
	    rwM += iInm*s_qM[3][fm];

	    rP  += iInm*s_qP[0][fm];
	    ruP += iInm*s_qP[1][fm];
	    rvP += iInm*s_qP[2][fm];
	    rwP += iInm*s_qP[3][fm];

	    T11M += iInm*s_vSM[0][fm];
	    T12M += iInm*s_vSM[1][fm];
	    T13M += iInm*s_vSM[2][fm];
	    T22M += iInm*s_vSM[3][fm];
	    T23M += iInm*s_vSM[4][fm];
	    T33M += iInm*s_vSM[5][fm];

	    T11P += iInm*s_vSP[0][fm];
	    T12P += iInm*s_vSP[1][fm];
	    T13P += iInm*s_vSP[2][fm];
	    T22P += iInm*s_vSP[3][fm];
	    T23P += iInm*s_vSP[4][fm];
	    T33P += iInm*s_vSP[5][fm];
	  }

        const dfloat uM = ruM/rM;
        const dfloat vM = rvM/rM;
	const dfloat wM = rwM/rM;
        const dfloat pM = p_RT*rM;

        dfloat uP = ruP/rP;
        dfloat vP = rvP/rP;
	dfloat wP = rwP/rP;
        dfloat pP = p_RT*rP;
        
        // apply boundary condition
        const int bc = EToB[face+p_Nfaces*e];
        if(bc>0){
          cnsDirichletConditions3D(bc, time, intx[n+e*p_Nfaces*p_intNfp], inty[n+e*p_Nfaces*p_intNfp],  intz[n+e*p_Nfaces*p_intNfp], nx, ny, nz, intfx, intfy, intfz, rM, uM, vM, wM, &rP, &uP, &vP, &wP);
          ruP = rP*uP;
          rvP = rP*vP;
	  rwP = rP*wP;
          pP = p_RT*rP;
          //should also add the Neumann BC here, but need uxM, uyM, vxM, abd vyM somehow
        }
        
        // evaluate "flux" terms: (sJ/J)*(A*nx+B*ny)*(q^* - q^-)
        const dfloat sc = invJ*sJ;

#if 1
        dfloat rflux, ruflux, rvflux, rwflux;
        
        upwindRoeAveraged(nx, ny, nz, tx, ty, tz, bx, by, bz, rM, ruM, rvM, rwM, rP, ruP, rvP, rwP, &rflux, &ruflux, &rvflux, &rwflux);

        rflux  *= advSwitch;
        ruflux *= advSwitch;
        rvflux *= advSwitch;
	rwflux *= advSwitch;
        
        // const dfloat hinv = sgeo[sid + p_IHID];
        // dfloat penalty = p_Nq*p_Nq*hinv*mu;

        ruflux -= p_half*(nx*(T11P+T11M) + ny*(T12P+T12M) + nz*(T13P+T13M));// + penalty*(uP-uM)); // should add viscous penalty
        rvflux -= p_half*(nx*(T12P+T12M) + ny*(T22P+T22M) + nz*(T23P+T23M));// + penalty*(vP-vM)); // should add viscous penalty
	rwflux -= p_half*(nx*(T13P+T13M) + ny*(T23P+T23M) + nz*(T33P+T33M));// + penalty*(vP-vM)); // should add viscous penalty
        
        s_rflux [n] = sc*(-rflux );
        s_ruflux[n] = sc*(-ruflux);
        s_rvflux[n] = sc*(-rvflux);
	s_rwflux[n] = sc*(-rwflux);
        
#else
        const dfloat lambdaM = sqrt(uM*uM+vM*vM+wM*wM) + p_sqrtRT;
        const dfloat lambdaP = sqrt(uP*uP+vP*vP+wP*wP) + p_sqrtRT;

        dfloat lambda = (lambdaM>lambdaP) ? lambdaM:lambdaP;
        
        // simple Lax Friedrichs flux to get started (change later)
        {
          const dfloat fM = -ruM, gM = -rvM, hM = -rwM;
          const dfloat fP = -ruP, gP = -rvP, hP = -rwP;
          const dfloat rflux = nx*(fP-fM) + ny*(gP-gM) + nz*(hP-hM) + lambda*(rP-rM);

          s_rflux[es][n] = p_half*sc*(rflux);
        }

        const dfloat hinv = sgeo[sid + p_IHID];
        dfloat penalty = p_Nq*p_Nq*hinv*mu;       

        {
          
          const dfloat fM = T11M - ruM*uM - pM, gM = T12M - ruM*vM, hM = T13M - ruM*wM;
          const dfloat fP = T11P - ruP*uP - pP, gP = T12P - ruP*vP, hP = T13P - ruP*wP;

          const dfloat ruflux = nx*(fP-fM) + ny*(gP-gM) + nz*(hP-hM) + lambda*(ruP-ruM) + penalty*(uP-uM); // should add viscous penalty
          s_ruflux[es][n] = p_half*sc*(ruflux);
        }

        {
          const dfloat fM = T12M - rvM*uM, gM = T22M - rvM*vM - pM, hM = T23M - rvM*wM;
          const dfloat fP = T12P - rvP*uP, gP = T22P - rvP*vP - pP, hP = T23P - rvP*wP;

          const dfloat rvflux = nx*(fP-fM) + ny*(gP-gM) + nz*(hP-hM) + lambda*(rvP-rvM) + penalty*(vP-vM); // should add viscous penalty
          s_rvflux[es][n] = p_half*sc*(rvflux);
        }

	{
          const dfloat fM = T13M - rwM*uM, gM = T23M - rwM*vM, hM = T33M - rwM*wM - pM;
          const dfloat fP = T13P - rwP*uP, gP = T23P - rwP*vP, hP = T33P - rwP*wP - pP;

          const dfloat rwflux = nx*(fP-fM) + ny*(gP-gM) + nz*(hP-hM) + lambda*(rwP-rwM) + penalty*(wP-wM); // should add viscous penalty
          s_rwflux[es][n] = p_half*sc*(rwflux);
        }
#endif
      }
    }
    
    // wait for all @shared memory writes of the previous inner loop to complete
    @barrier("local");

    // for each node in the element
    for(int n=0;n<p_cubMaxNodes;++n;@inner(0)){
      if(n<p_Np){            
        // load rhs data from volume fluxes
        dfloat Lrflux = 0.f, Lruflux = 0.f, Lrvflux = 0.f, Lrwflux = 0.f;
        
        // rhs += LIFT*((sJ/J)*(A*nx+B*ny)*(q^* - q^-))
        #pragma unroll p_intNfpNfaces
          for(int m=0;m<p_intNfpNfaces;++m){
            const dfloat L = intLIFTT[n+m*p_Np];
            Lrflux  += L*s_rflux[m];
            Lruflux += L*s_ruflux[m];
            Lrvflux += L*s_rvflux[m];
	    Lrwflux += L*s_rwflux[m];
          }
        
        const dlong base = e*p_Np*p_Nfields+n;
        rhsq[base+0*p_Np] += Lrflux;
        rhsq[base+1*p_Np] += Lruflux;
        rhsq[base+2*p_Np] += Lrvflux;
	rhsq[base+3*p_Np] += Lrwflux;
      }
    }
  }
}

@kernel void cnsCubatureSurfaceTet3D_v1(const dlong Nelements,
				       const int advSwitch,
				       @restrict const  dfloat *  vgeo,
				       @restrict const  dfloat *  sgeo,
				       @restrict const  dlong  *  vmapM,
				       @restrict const  dlong  *  vmapP,
				       @restrict const  int    *  EToB,
				       @restrict const  dfloat *  intInterpT, // interpolate to integration nodes
				       @restrict const  dfloat *  intLIFTT, // lift from integration to interpolation nodes
				       const dfloat time,
				       @restrict const  dfloat *  intx,
				       @restrict const  dfloat *  inty,
				       @restrict const  dfloat *  intz,
				       const dfloat mu,
				       const dfloat intfx,
				       const dfloat intfy,
				       const dfloat intfz,
				       @restrict const  dfloat *  q,
				       @restrict const  dfloat *  viscousStresses,
				       @restrict dfloat *  rhsq){
  
  // for all elements
  for(dlong e=0;e<Nelements;e++;@outer(0)){
    
    // @shared storage for flux terms
    @shared dfloat s_qM[p_Nfields][p_NfacesNfp];
    @shared dfloat s_qP[p_Nfields][p_NfacesNfp];
    @shared dfloat s_vSA[p_Nstresses][p_NfacesNfp];

    @shared dfloat s_rflux [p_intNfpNfaces];
    @shared dfloat s_ruflux[p_intNfpNfaces];
    @shared dfloat s_rvflux[p_intNfpNfaces];
    @shared dfloat s_rwflux[p_intNfpNfaces];

    for(int n=0;n<p_cubMaxNodes;++n;@inner(0)){
      if(n<p_NfacesNfp){
        // indices of negative and positive traces of face node
        const dlong id  = e*p_Nfp*p_Nfaces + n;
        const dlong idM = vmapM[id];
        const dlong idP = vmapP[id];

        // load traces
        const dlong eM = e;
        const dlong eP = idP/p_Np;
        const int vidM = idM%p_Np;
        const int vidP = idP%p_Np;

        const dlong qbaseM = eM*p_Np*p_Nfields + vidM;
        const dlong qbaseP = eP*p_Np*p_Nfields + vidP;

        const dlong sbaseM = eM*p_Np*p_Nstresses + vidM;
        const dlong sbaseP = eP*p_Np*p_Nstresses + vidP;
        
        s_qM[0][n] = q[qbaseM + 0*p_Np];
        s_qM[1][n] = q[qbaseM + 1*p_Np];
        s_qM[2][n] = q[qbaseM + 2*p_Np];
	s_qM[3][n] = q[qbaseM + 3*p_Np];

        s_qP[0][n] = q[qbaseP + 0*p_Np];
        s_qP[1][n] = q[qbaseP + 1*p_Np];
        s_qP[2][n] = q[qbaseP + 2*p_Np];
	s_qP[3][n] = q[qbaseP + 3*p_Np];

        s_vSA[0][n] = p_half*(viscousStresses[sbaseM+0*p_Np] + viscousStresses[sbaseP+0*p_Np]);
        s_vSA[1][n] = p_half*(viscousStresses[sbaseM+1*p_Np] + viscousStresses[sbaseP+1*p_Np]);
        s_vSA[2][n] = p_half*(viscousStresses[sbaseM+2*p_Np] + viscousStresses[sbaseP+2*p_Np]);
        s_vSA[3][n] = p_half*(viscousStresses[sbaseM+3*p_Np] + viscousStresses[sbaseP+3*p_Np]);
        s_vSA[4][n] = p_half*(viscousStresses[sbaseM+4*p_Np] + viscousStresses[sbaseP+4*p_Np]);
        s_vSA[5][n] = p_half*(viscousStresses[sbaseM+5*p_Np] + viscousStresses[sbaseP+5*p_Np]);
        
      }
    }

    @barrier("local");

    // interpolate to surface integration nodes
    for(int n=0;n<p_cubMaxNodes;++n;@inner(0)){ // maxNodes = max(Nfp*Nfaces,Np)
      if(n<p_intNfpNfaces){
        // find face that owns this node
        const int face = n/p_intNfp;
      
        // load surface geofactors for this face
        const dlong sid    = p_Nsgeo*(e*p_Nfaces+face);
        const dfloat nx   = sgeo[sid+p_NXID];
        const dfloat ny   = sgeo[sid+p_NYID];
	const dfloat nz   = sgeo[sid+p_NZID];
	const dfloat tx   = sgeo[sid+p_STXID];
	const dfloat ty   = sgeo[sid+p_STYID];
	const dfloat tz   = sgeo[sid+p_STZID];
	const dfloat bx   = sgeo[sid+p_SBXID];
	const dfloat by   = sgeo[sid+p_SBYID];
	const dfloat bz   = sgeo[sid+p_SBZID];
        const dfloat sJ   = sgeo[sid+p_SJID];
        const dfloat invJ = sgeo[sid+p_IJID];

        dfloat rM  = 0., ruM = 0., rvM = 0., rwM = 0.;
        dfloat rP  = 0., ruP = 0., rvP = 0., rwP = 0.;
        dfloat T11A  = 0., T12A = 0., T13A = 0., T22A = 0., T23A = 0., T33A = 0.;

        // local block interpolation (face nodes to integration nodes)
        #pragma unroll p_Nfp
	  for(int m=0;m<p_Nfp;++m){
	    const dfloat iInm = intInterpT[n+m*p_Nfaces*p_intNfp];
	    const int fm = face*p_Nfp+m;
	    rM  += iInm*s_qM[0][fm];
	    ruM += iInm*s_qM[1][fm];
	    rvM += iInm*s_qM[2][fm];
	    rwM += iInm*s_qM[3][fm];

	    rP  += iInm*s_qP[0][fm];
	    ruP += iInm*s_qP[1][fm];
	    rvP += iInm*s_qP[2][fm];
	    rwP += iInm*s_qP[3][fm];
	  
	    T11A += iInm*s_vSA[0][fm];
	    T12A += iInm*s_vSA[1][fm];
	    T13A += iInm*s_vSA[2][fm];
	    T22A += iInm*s_vSA[3][fm];
	    T23A += iInm*s_vSA[4][fm];
	    T33A += iInm*s_vSA[5][fm];
	  }

        const dfloat uM = ruM/rM;
        const dfloat vM = rvM/rM;
	const dfloat wM = rwM/rM;
        const dfloat pM = p_RT*rM;

        dfloat uP = ruP/rP;
        dfloat vP = rvP/rP;
	dfloat wP = rwP/rP;
        dfloat pP = p_RT*rP;
        
        // apply boundary condition
        const int bc = EToB[face+p_Nfaces*e];
        if(bc>0){
          cnsDirichletConditions3D(bc, time, intx[n+e*p_Nfaces*p_intNfp], inty[n+e*p_Nfaces*p_intNfp],  intz[n+e*p_Nfaces*p_intNfp], nx, ny, nz, intfx, intfy, intfz, rM, uM, vM, wM, &rP, &uP, &vP, &wP);
          ruP = rP*uP;
          rvP = rP*vP;
	  rwP = rP*wP;
          pP = p_RT*rP;
          //should also add the Neumann BC here, but need uxM, uyM, vxM, abd vyM somehow
        }
        
        // evaluate "flux" terms: (sJ/J)*(A*nx+B*ny)*(q^* - q^-)
        const dfloat sc = invJ*sJ;

        dfloat rflux, ruflux, rvflux, rwflux;
        
        upwindRoeAveraged(nx, ny, nz, tx, ty, tz, bx, by, bz, rM, ruM, rvM, rwM, rP, ruP, rvP, rwP, &rflux, &ruflux, &rvflux, &rwflux);

        rflux  *= advSwitch;
        ruflux *= advSwitch;
        rvflux *= advSwitch;
	rwflux *= advSwitch;
        
        // const dfloat hinv = sgeo[sid + p_IHID];
        // dfloat penalty = p_Nq*p_Nq*hinv*mu;

        ruflux -= nx*T11A + ny*T12A + nz*T13A;// + penalty*(uP-uM)); // should add viscous penalty
        rvflux -= nx*T12A + ny*T22A + nz*T23A;// + penalty*(vP-vM)); // should add viscous penalty
	rwflux -= nx*T13A + ny*T23A + nz*T33A;// + penalty*(vP-vM)); // should add viscous penalty
        
        s_rflux [n] = sc*(-rflux );
        s_ruflux[n] = sc*(-ruflux);
        s_rvflux[n] = sc*(-rvflux);
	s_rwflux[n] = sc*(-rwflux);

      }
    }
    
    // wait for all @shared memory writes of the previous inner loop to complete
    @barrier("local");

    // for each node in the element
    for(int n=0;n<p_cubMaxNodes;++n;@inner(0)){
      if(n<p_Np){            
        // load rhs data from volume fluxes
        dfloat Lrflux = 0.f, Lruflux = 0.f, Lrvflux = 0.f, Lrwflux = 0.f;
        
        // rhs += LIFT*((sJ/J)*(A*nx+B*ny)*(q^* - q^-))
        #pragma unroll p_intNfpNfaces
          for(int m=0;m<p_intNfpNfaces;++m){
            const dfloat L = intLIFTT[n+m*p_Np];
            Lrflux  += L*s_rflux[m];
            Lruflux += L*s_ruflux[m];
            Lrvflux += L*s_rvflux[m];
	    Lrwflux += L*s_rwflux[m];
          }
        
        const dlong base = e*p_Np*p_Nfields+n;
        rhsq[base+0*p_Np] += Lrflux;
        rhsq[base+1*p_Np] += Lruflux;
        rhsq[base+2*p_Np] += Lrvflux;
	rhsq[base+3*p_Np] += Lrwflux;
      }
    }
  }
}

// use max(Np, intNfp) threads
@kernel void cnsCubatureSurfaceTet3D(const dlong Nelements,				    
				    const int advSwitch,
				    @restrict const  dfloat *  vgeo,
				    @restrict const  dfloat *  sgeo,
				    @restrict const  dlong  *  vmapM,
				    @restrict const  dlong  *  vmapP,
				    @restrict const  int    *  EToB,
				    @restrict const  dfloat *  intInterpT, // interpolate to integration nodes
				    @restrict const  dfloat *  intLIFTT, // lift from integration to interpolation nodes
				    const dfloat time,
				    @restrict const  dfloat *  intx,
				    @restrict const  dfloat *  inty,
				    @restrict const  dfloat *  intz,
				    const dfloat mu,
				    const dfloat intfx,
				    const dfloat intfy,
				    const dfloat intfz,
				    @restrict const  dfloat *  q,
				    @restrict const  dfloat *  viscousStresses,
				    @restrict dfloat *  rhsq){
  
  // for all elements
  for(dlong e=0;e<Nelements;e++;@outer(0)){
    
    // @shared storage for flux terms
    @shared dfloat s_qM[p_Nfields][p_Nfp];
    @shared dfloat s_qP[p_Nfields][p_Nfp];
    @shared dfloat s_vSA[p_Nstresses][p_Nfp];

    @shared dfloat s_rflux [p_intNfp];
    @shared dfloat s_ruflux[p_intNfp];
    @shared dfloat s_rvflux[p_intNfp];
    @shared dfloat s_rwflux[p_intNfp];

    @exclusive dfloat Lrflux, Lruflux, Lrvflux, Lrwflux;
    
    for(int n=0;n<p_cubMaxNodes1;++n;@inner(0)){
      Lrflux = 0;
      Lruflux = 0;
      Lrvflux = 0;
      Lrwflux = 0;
    }

    #pragma unroll p_Nfaces
      for(int face=0;face<p_Nfaces;++face){

	for(int n=0;n<p_cubMaxNodes1;++n;@inner(0)){
	  if(n<p_Nfp){
	    // indices of negative and positive traces of face node
	    const dlong id  = e*p_Nfp*p_Nfaces + (n + face*p_Nfp);
	    const dlong idM = vmapM[id];
	    const dlong idP = vmapP[id];
	  
	    // load traces
	    const dlong eM = e;
	    const dlong eP = idP/p_Np;
	    const int vidM = idM%p_Np;
	    const int vidP = idP%p_Np;
	  
	    const dlong qbaseM = eM*p_Np*p_Nfields + vidM;
	    const dlong qbaseP = eP*p_Np*p_Nfields + vidP;
	  
	    const dlong sbaseM = eM*p_Np*p_Nstresses + vidM;
	    const dlong sbaseP = eP*p_Np*p_Nstresses + vidP;
	  
	    s_qM[0][n] = q[qbaseM + 0*p_Np];
	    s_qM[1][n] = q[qbaseM + 1*p_Np];
	    s_qM[2][n] = q[qbaseM + 2*p_Np];
	    s_qM[3][n] = q[qbaseM + 3*p_Np];
	  
	    s_qP[0][n] = q[qbaseP + 0*p_Np];
	    s_qP[1][n] = q[qbaseP + 1*p_Np];
	    s_qP[2][n] = q[qbaseP + 2*p_Np];
	    s_qP[3][n] = q[qbaseP + 3*p_Np];
	  
	    s_vSA[0][n] = p_half*(viscousStresses[sbaseM+0*p_Np] + viscousStresses[sbaseP+0*p_Np]);
	    s_vSA[1][n] = p_half*(viscousStresses[sbaseM+1*p_Np] + viscousStresses[sbaseP+1*p_Np]);
	    s_vSA[2][n] = p_half*(viscousStresses[sbaseM+2*p_Np] + viscousStresses[sbaseP+2*p_Np]);
	    s_vSA[3][n] = p_half*(viscousStresses[sbaseM+3*p_Np] + viscousStresses[sbaseP+3*p_Np]);
	    s_vSA[4][n] = p_half*(viscousStresses[sbaseM+4*p_Np] + viscousStresses[sbaseP+4*p_Np]);
	    s_vSA[5][n] = p_half*(viscousStresses[sbaseM+5*p_Np] + viscousStresses[sbaseP+5*p_Np]);
	  
	  }
	}
    
	@barrier("local");
      
	// interpolate to surface integration nodes
	for(int n=0;n<p_cubMaxNodes1;++n;@inner(0)){ // maxNodes = max(Nfp*Nfaces,Np)
	  if(n<p_intNfp){
	  
	    // load surface geofactors for this face
	    const dlong sid    = p_Nsgeo*(e*p_Nfaces+face);
	    const dfloat nx   = sgeo[sid+p_NXID];
	    const dfloat ny   = sgeo[sid+p_NYID];
	    const dfloat nz   = sgeo[sid+p_NZID];
	    const dfloat tx   = sgeo[sid+p_STXID];
	    const dfloat ty   = sgeo[sid+p_STYID];
	    const dfloat tz   = sgeo[sid+p_STZID];
	    const dfloat bx   = sgeo[sid+p_SBXID];
	    const dfloat by   = sgeo[sid+p_SBYID];
	    const dfloat bz   = sgeo[sid+p_SBZID];
	    const dfloat sJ   = sgeo[sid+p_SJID];
	    const dfloat invJ = sgeo[sid+p_IJID];
	  
	    dfloat rM  = 0., ruM = 0., rvM = 0., rwM = 0.;
	    dfloat rP  = 0., ruP = 0., rvP = 0., rwP = 0.;
	    dfloat T11A  = 0., T12A = 0., T13A = 0., T22A = 0., T23A = 0., T33A = 0.;
	  
	    // local block interpolation (face nodes to integration nodes)
	    #pragma unroll p_Nfp
	      for(int m=0;m<p_Nfp;++m){
		const dfloat iInm = intInterpT[ (n+face*p_intNfp) + m*p_Nfaces*p_intNfp];
		const int fm = m;
		rM  += iInm*s_qM[0][fm];
		ruM += iInm*s_qM[1][fm];
		rvM += iInm*s_qM[2][fm];
		rwM += iInm*s_qM[3][fm];
	      
		rP  += iInm*s_qP[0][fm];
		ruP += iInm*s_qP[1][fm];
		rvP += iInm*s_qP[2][fm];
		rwP += iInm*s_qP[3][fm];
	      
		T11A += iInm*s_vSA[0][fm];
		T12A += iInm*s_vSA[1][fm];
		T13A += iInm*s_vSA[2][fm];
		T22A += iInm*s_vSA[3][fm];
		T23A += iInm*s_vSA[4][fm];
		T33A += iInm*s_vSA[5][fm];
	      }
	  
	    const dfloat uM = ruM/rM;
	    const dfloat vM = rvM/rM;
	    const dfloat wM = rwM/rM;
	    const dfloat pM = p_RT*rM;
	  
	    dfloat uP = ruP/rP;
	    dfloat vP = rvP/rP;
	    dfloat wP = rwP/rP;
	    dfloat pP = p_RT*rP;
	  
	    // apply boundary condition
	    const int bc = EToB[face+p_Nfaces*e];
	    if(bc>0){
	      dfloat ix = intx[n+face*p_intNfp + e*p_Nfaces*p_intNfp];
	      dfloat iy = inty[n+face*p_intNfp + e*p_Nfaces*p_intNfp];
	      dfloat iz = intz[n+face*p_intNfp + e*p_Nfaces*p_intNfp];
	      cnsDirichletConditions3D(bc, time, ix, iy, iz, nx, ny, nz, intfx, intfy, intfz, rM, uM, vM, wM, &rP, &uP, &vP, &wP);
	      ruP = rP*uP;
	      rvP = rP*vP;
	      rwP = rP*wP;
	      pP = p_RT*rP;
	      //should also add the Neumann BC here, but need uxM, uyM, vxM, abd vyM somehow
	    }
	  
	    // evaluate "flux" terms: (sJ/J)*(A*nx+B*ny)*(q^* - q^-)
	    const dfloat sc = invJ*sJ;
	  
	    dfloat rflux, ruflux, rvflux, rwflux;
	  
	    upwindRoeAveraged(nx, ny, nz, tx, ty, tz, bx, by, bz, rM, ruM, rvM, rwM, rP, ruP, rvP, rwP, &rflux, &ruflux, &rvflux, &rwflux);
	  
	    rflux  *= advSwitch;
	    ruflux *= advSwitch;
	    rvflux *= advSwitch;
	    rwflux *= advSwitch;
	  
	    // const dfloat hinv = sgeo[sid + p_IHID];
	    // dfloat penalty = p_Nq*p_Nq*hinv*mu;

	    ruflux -= nx*T11A + ny*T12A + nz*T13A;// + penalty*(uP-uM)); // should add viscous penalty
	    rvflux -= nx*T12A + ny*T22A + nz*T23A;// + penalty*(vP-vM)); // should add viscous penalty
	    rwflux -= nx*T13A + ny*T23A + nz*T33A;// + penalty*(vP-vM)); // should add viscous penalty
	  
	    s_rflux [n] = sc*(-rflux );
	    s_ruflux[n] = sc*(-ruflux);
	    s_rvflux[n] = sc*(-rvflux);
	    s_rwflux[n] = sc*(-rwflux);
	  
	  }
	}
      
	// wait for all @shared memory writes of the previous inner loop to complete
	@barrier("local");
      
	// for each node in the element
	for(int n=0;n<p_cubMaxNodes1;++n;@inner(0)){
	  if(n<p_Np){            
	    // rhs += LIFT*((sJ/J)*(A*nx+B*ny)*(q^* - q^-))
	    #pragma unroll p_intNfp
	      for(int m=0;m<p_intNfp;++m){
		const dfloat L = intLIFTT[n+(m+face*p_intNfp)*p_Np];
		Lrflux  += L*s_rflux[m];
		Lruflux += L*s_ruflux[m];
		Lrvflux += L*s_rvflux[m];
		Lrwflux += L*s_rwflux[m];
	      }
	  }
	}
      }

    @barrier("local");
    
    // for each node in the element
    for(int n=0;n<p_cubMaxNodes1;++n;@inner(0)){
      if(n<p_Np){            
	const dlong base = e*p_Np*p_Nfields+n;
	rhsq[base+0*p_Np] += Lrflux;
        rhsq[base+1*p_Np] += Lruflux;
        rhsq[base+2*p_Np] += Lrvflux;
	rhsq[base+3*p_Np] += Lrwflux;
      }
    }
  }
}



@kernel void cnsStressesSurfaceTet3D(const dlong Nelements,
				    @restrict const  dfloat *  sgeo,
				    @restrict const  dfloat *  LIFTT,
				    @restrict const  dlong  *  vmapM,
				    @restrict const  dlong  *  vmapP,
				    @restrict const  int    *  EToB,
				    const dfloat time,
				    @restrict const  dfloat *  x,
				    @restrict const  dfloat *  y,
				    @restrict const  dfloat *  z,
				    const dfloat mu,
				    const dfloat intfx,
				    const dfloat intfy,
				    const dfloat intfz,
				    @restrict const  dfloat *  q,
				    @restrict dfloat *  viscousStresses){
  
  // for all elements
  for(dlong eo=0;eo<Nelements;eo+=p_NblockS;@outer(0)){
    
    // @shared storage for flux terms
    @shared dfloat s_T11flux[p_NblockS][p_NfacesNfp];
    @shared dfloat s_T12flux[p_NblockS][p_NfacesNfp];
    @shared dfloat s_T13flux[p_NblockS][p_NfacesNfp];
    @shared dfloat s_T22flux[p_NblockS][p_NfacesNfp];
    @shared dfloat s_T23flux[p_NblockS][p_NfacesNfp];
    @shared dfloat s_T33flux[p_NblockS][p_NfacesNfp];

    // for all face nodes of all elements
    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int n=0;n<p_maxNodes;++n;@inner(0)){ // maxNodes = max(Nfp*Nfaces,Np)
        const dlong e = eo + es;
        if(e<Nelements){
          if(n<p_NfacesNfp){
            // find face that owns this node
            const int face = n/p_Nfp;
          
            // load surface geofactors for this face
            const dlong sid    = p_Nsgeo*(e*p_Nfaces+face);
            const dfloat nx   = sgeo[sid+p_NXID];
            const dfloat ny   = sgeo[sid+p_NYID];
	    const dfloat nz   = sgeo[sid+p_NZID];
            const dfloat sJ   = sgeo[sid+p_SJID];
            const dfloat invJ = sgeo[sid+p_IJID];

            // indices of negative and positive traces of face node
            const dlong id  = e*p_Nfp*p_Nfaces + n;
            const dlong idM = vmapM[id];
            const dlong idP = vmapP[id];

            // load traces
            const dlong eM = e;
            const dlong eP = idP/p_Np;
            const int vidM = idM%p_Np;
            const int vidP = idP%p_Np;

            const dlong baseM = eM*p_Np*p_Nfields + vidM;
            const dlong baseP = eP*p_Np*p_Nfields + vidP;

            const dfloat rM  = q[baseM + 0*p_Np];
            const dfloat ruM = q[baseM + 1*p_Np];
            const dfloat rvM = q[baseM + 2*p_Np];
	    const dfloat rwM = q[baseM + 3*p_Np];

            dfloat uM = ruM/rM;
            dfloat vM = rvM/rM;
	    dfloat wM = rwM/rM;
            
            dfloat rP  = q[baseP + 0*p_Np];
            dfloat ruP = q[baseP + 1*p_Np];
            dfloat rvP = q[baseP + 2*p_Np];
	    dfloat rwP = q[baseP + 3*p_Np];
            
            dfloat uP = ruP/rP;
            dfloat vP = rvP/rP;
	    dfloat wP = rwP/rP;

            // apply boundary condition
            const int bc = EToB[face+p_Nfaces*e];
            if(bc>0) {
              cnsDirichletConditions3D(bc, time, x[idM], y[idM], z[idM], nx, ny, nz, intfx, intfy, intfz, rM, uM, vM, wM, &rP, &uP, &vP, &wP);
            }
            
            const dfloat dS11 = p_half*(nx*(p_two*(uP-uM))) - p_third*(nx*(uP-uM)+ny*(vP-vM)+nz*(wP-wM));
            const dfloat dS12 = p_half*(ny*(uP-uM) + nx*(vP-vM));
	    const dfloat dS13 = p_half*(nz*(uP-uM) + nx*(wP-wM));
            const dfloat dS22 = p_half*(ny*(p_two*(vP-vM))) - p_third*(nx*(uP-uM)+ny*(vP-vM)+nz*(wP-wM));
	    const dfloat dS23 = p_half*(nz*(vP-vM) + ny*(wP-wM));
	    const dfloat dS33 = p_half*(nz*(p_two*(wP-wM))) - p_third*(nx*(uP-uM)+ny*(vP-vM)+nz*(wP-wM));
            
            const dfloat sc = invJ*sJ;
            s_T11flux[es][n] = sc*p_two*mu*dS11;
            s_T12flux[es][n] = sc*p_two*mu*dS12;
	    s_T13flux[es][n] = sc*p_two*mu*dS13;
            s_T22flux[es][n] = sc*p_two*mu*dS22;
	    s_T23flux[es][n] = sc*p_two*mu*dS23;
	    s_T33flux[es][n] = sc*p_two*mu*dS33;
          }
        }
      }
    }
    
    @barrier("local");
    
    // for each node in the element
    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int n=0;n<p_maxNodes;++n;@inner(0)){
        const dlong e = eo + es;
        if(e<Nelements){
          if(n<p_Np){      
            // load rhs data from volume fluxes
            dfloat LT11flux = 0.f, LT12flux = 0.f, LT13flux = 0.f;
	    dfloat LT22flux = 0.f, LT23flux = 0.f, LT33flux = 0.f;
            
            // rhs += LIFT*((sJ/J)*(A*nx+B*ny)*(q^* - q^-))
            #pragma unroll p_NfacesNfp
              for(int m=0;m<p_NfacesNfp;++m){
                const dfloat L = LIFTT[n+m*p_Np];
                LT11flux += L*s_T11flux[es][m];
                LT12flux += L*s_T12flux[es][m];
		LT13flux += L*s_T13flux[es][m];
                LT22flux += L*s_T22flux[es][m];
		LT23flux += L*s_T23flux[es][m];
		LT33flux += L*s_T33flux[es][m];
              }
            
            const dlong base = e*p_Np*p_Nstresses+n;
            viscousStresses[base+0*p_Np] += LT11flux;
            viscousStresses[base+1*p_Np] += LT12flux;
	    viscousStresses[base+2*p_Np] += LT13flux;
            viscousStresses[base+3*p_Np] += LT22flux;
	    viscousStresses[base+4*p_Np] += LT23flux;
	    viscousStresses[base+5*p_Np] += LT33flux;
          }
        }
      }
    }
  }
}

  
