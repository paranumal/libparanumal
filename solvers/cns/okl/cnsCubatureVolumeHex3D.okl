/*

The MIT License (MIT)

Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

//unified @kernel, but might use too much memory
// Compressible Navier-Stokes
@kernel void cnsCubatureVolumeHex3D(const dlong Nelements,
                                    @restrict const  dfloat *  vgeo,
                                    @restrict const  dfloat *  cubvgeo,
                                    @restrict const  dfloat *  cubDT,
                                    @restrict const  dfloat *  cubPDT,
                                    @restrict const  dfloat *  cubInterp,
                                    @restrict const  dfloat *  cubProject,
                                    @restrict const  dfloat *  x,
                                    @restrict const  dfloat *  y,
                                    @restrict const  dfloat *  z,
                                    const dfloat t,
                                    const dfloat mu,
                                    const dfloat gamma,
                                    @restrict const  dfloat *  q,
                                    @restrict const  dfloat *  gradq,
                                    @restrict dfloat *  rhsq){

  for(dlong e=0; e<Nelements; ++e; @outer(0)) {

    @shared dfloat s_cubDT[p_cubNq][p_cubNq];
    @shared dfloat s_cubInterp[p_Nq][p_cubNq];
    @shared dfloat s_cubProject[p_cubNq][p_Nq];

    @shared dfloat s_F[p_Nfields][p_cubNq][p_cubNq];
    @shared dfloat s_G[p_Nfields][p_cubNq][p_cubNq];
    @shared dfloat s_H[p_Ngrads][p_cubNq][p_cubNq];

    #define s_q s_F
    #define s_gradq s_H
    #define s_rhsq s_F

    @exclusive dfloat r_q[p_Nfields][p_cubNq];
    @exclusive dfloat r_gradq[p_Ngrads][p_cubNq];
    @exclusive dfloat r_rhsq[p_Nfields][p_cubNq];

    @exclusive dfloat fx[p_Nq], fy[p_Nq], fz[p_Nq];

    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
        //fetch reference operators
        if (j<p_Nq) {
          s_cubInterp[j][i] = cubInterp[i+j*p_cubNq];
        }
        if (i<p_Nq) {
          s_cubProject[j][i] = cubProject[i+j*p_Nq];
        }
        s_cubDT[j][i] = cubDT[i+j*p_cubNq];

        for(int fld=0;fld<p_Nfields;++fld){
          #pragma unroll p_cubNq
          for(int k=0;k<p_cubNq;++k){
            r_q[fld][k] = 0.;
            r_rhsq[fld][k] = 0.;
          }
        }

        for(int fld=0;fld<p_Ngrads;++fld){
          #pragma unroll p_cubNq
          for(int k=0;k<p_cubNq;++k){
            r_gradq[fld][k] = 0.;
          }
        }
      }
    }

    @barrier("local");

    //read in and interpolate in k
    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
        if (i<p_Nq && j<p_Nq) {
          #pragma unroll p_Nq
          for(int k=0;k<p_Nq;++k){
            //conserved variables
            const dlong qbase = e*p_Np*p_Nfields + k*p_Nq*p_Nq + j*p_Nq + i;
            const dfloat r  = q[qbase+0*p_Np];
            const dfloat ru = q[qbase+1*p_Np];
            const dfloat rv = q[qbase+2*p_Np];
            const dfloat rw = q[qbase+3*p_Np];
            const dfloat E  = q[qbase+4*p_Np];

            // primitive variables (velocity)
            const dfloat u = ru/r, v = rv/r, w = rw/r;
            const dfloat p = (gamma-1)*(E-0.5*r*(u*u+v*v+w*w));

            const dlong id = e*p_Np*p_Ngrads + k*p_Nq*p_Nq + j*p_Nq + i;

            #pragma unroll p_cubNq
            for(int n=0;n<p_cubNq;++n){
              const dfloat Ik = s_cubInterp[k][n];
              r_q[0][n] += Ik*r;
              r_q[1][n] += Ik*ru;
              r_q[2][n] += Ik*rv;
              r_q[3][n] += Ik*rw;
              r_q[4][n] += Ik*E;

              for (int fld=0;fld<p_Ngrads;fld++) {
                r_gradq[fld][n] += Ik*gradq[id+fld*p_Np];
              }
            }

            //Body force contribution
            fx[k] = 0.0; fy[k] = 0.0; fz[k] = 0.0;
            const int n = k*p_Nq*p_Nq + j*p_Nq + i;
            cnsBodyForce3D(gamma, mu, t, x[e*p_Np+n], y[e*p_Np+n], z[e*p_Np+n],
                            r, u, v, w, p, &(fx[k]), &(fy[k]), &(fz[k]));
            fx[k] *= r; fy[k] *= r; fz[k] *= r;
          }
        }
      }
    }

    @barrier("local");

    #pragma unroll p_cubNq
    for(int k=0;k<p_cubNq;++k){
      //load slice to @shared
      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          if (i<p_Nq && j<p_Nq) {
            for(int fld=0;fld<p_Nfields;++fld){
              s_q[fld][j][i] = r_q[fld][k];
            }
            for(int fld=0;fld<p_Ngrads;++fld){
              s_gradq[fld][j][i] = r_gradq[fld][k];
            }
          }
        }
      }

      @barrier("local");

      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          if(j<p_Nq){
            for(int fld=0;fld<p_Nfields;++fld){
              r_q[fld][k] = 0.0;
            }
            for(int fld=0;fld<p_Ngrads;++fld){
              r_gradq[fld][k] = 0.0;
            }

            #pragma unroll p_Nq
            for (int n=0;n<p_Nq;n++) {
              const dfloat Ii = s_cubInterp[n][i];
              for(int fld=0;fld<p_Nfields;++fld){
                r_q[fld][k] += Ii*s_q[fld][j][n];
              }
              for(int fld=0;fld<p_Ngrads;++fld){
                r_gradq[fld][k] += Ii*s_gradq[fld][j][n];
              }
            }
          }
        }
      }

      @barrier("local");

      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          if(j<p_Nq){
            for(int fld=0;fld<p_Nfields;++fld){
              s_q[fld][j][i] = r_q[fld][k];
            }
            for(int fld=0;fld<p_Ngrads;++fld){
              s_gradq[fld][j][i] = r_gradq[fld][k];
            }
          }
        }
      }

      @barrier("local");

      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          for(int fld=0;fld<p_Nfields;++fld){
            r_q[fld][k] = 0.0;
          }
          for(int fld=0;fld<p_Ngrads;++fld){
            r_gradq[fld][k] = 0.0;
          }

          #pragma unroll p_Nq
          for (int n=0;n<p_Nq;n++) {
            const dfloat Ij = s_cubInterp[n][j];
            for(int fld=0;fld<p_Nfields;++fld){
              r_q[fld][k] += Ij*s_q[fld][n][i];
            }
            for(int fld=0;fld<p_Ngrads;++fld){
              r_gradq[fld][k] += Ij*s_gradq[fld][n][i];
            }
          }
        }
      }

      @barrier("local");
    }

    //#pragma unroll p_cubNq
    for(int k=0;k<p_cubNq;++k){

      //fetch slice
      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          const dlong gid = e*p_cubNp*p_Nvgeo+ k*p_cubNq*p_cubNq + j*p_cubNq +i;
          const dfloat drdx = cubvgeo[gid + p_RXID*p_cubNp];
          const dfloat drdy = cubvgeo[gid + p_RYID*p_cubNp];
          const dfloat drdz = cubvgeo[gid + p_RZID*p_cubNp];
          const dfloat dsdx = cubvgeo[gid + p_SXID*p_cubNp];
          const dfloat dsdy = cubvgeo[gid + p_SYID*p_cubNp];
          const dfloat dsdz = cubvgeo[gid + p_SZID*p_cubNp];
          const dfloat dtdx = cubvgeo[gid + p_TXID*p_cubNp];
          const dfloat dtdy = cubvgeo[gid + p_TYID*p_cubNp];
          const dfloat dtdz = cubvgeo[gid + p_TZID*p_cubNp];
          const dfloat JW   = cubvgeo[gid + p_JWID*p_cubNp];

          const dfloat r  = r_q[0][k];
          const dfloat ru = r_q[1][k];
          const dfloat rv = r_q[2][k];
          const dfloat rw = r_q[3][k];
          const dfloat E  = r_q[4][k];

          // primitive variables (velocity)
          const dfloat u = ru/r, v = rv/r, w = rw/r;
          const dfloat p = (gamma-1)*(E-0.5*r*(u*u+v*v+w*w));

          // gradients
          const dfloat dudx = r_gradq[0][k];
          const dfloat dudy = r_gradq[1][k];
          const dfloat dudz = r_gradq[2][k];
          const dfloat dvdx = r_gradq[3][k];
          const dfloat dvdy = r_gradq[4][k];
          const dfloat dvdz = r_gradq[5][k];
          const dfloat dwdx = r_gradq[6][k];
          const dfloat dwdy = r_gradq[7][k];
          const dfloat dwdz = r_gradq[8][k];

          const dfloat T11 = 2.0*dudx - 2.0*(dudx+dvdy+dwdz)/3.0;
          const dfloat T12 = dudy+dvdx;
          const dfloat T13 = dudz+dwdx;
          const dfloat T22 = 2.0*dvdy - 2.0*(dudx+dvdy+dwdz)/3.0;
          const dfloat T23 = dvdz+dwdy;
          const dfloat T33 = 2.0*dwdz - 2.0*(dudx+dvdy+dwdz)/3.0;

          // (1/J) \hat{div} (G*[F;G])
          {
            // F0 = ru, G0 = rv
            const dfloat f = -ru;
            const dfloat g = -rv;
            const dfloat h = -rw;
            s_F[0][j][i] = JW*(drdx*f + drdy*g + drdz*h);
            s_G[0][j][i] = JW*(dsdx*f + dsdy*g + dsdz*h);
            s_H[0][j][i] = JW*(dtdx*f + dtdy*g + dtdz*h);
          }

          {
            // F1 = mu*T11 - (ru^2+p), G1 = mu*T12 - (rvu), H1 = mu*T13 - (ruw)
            const dfloat f = mu*T11-(ru*u+p);
            const dfloat g = mu*T12-(rv*u);
            const dfloat h = mu*T13-(rw*u);
            s_F[1][j][i] = JW*(drdx*f + drdy*g + drdz*h);
            s_G[1][j][i] = JW*(dsdx*f + dsdy*g + dsdz*h);
            s_H[1][j][i] = JW*(dtdx*f + dtdy*g + dtdz*h);
          }

          {
            // F2 = mu*T21 - (ruv), G2 = mu*T22 - (rv^2+p), H2 = mu*T23 - (rvw)
            const dfloat f = mu*T12-(rv*u);
            const dfloat g = mu*T22-(rv*v+p);
            const dfloat h = mu*T23-(rv*w);
            s_F[2][j][i] = JW*(drdx*f + drdy*g + drdz*h);
            s_G[2][j][i] = JW*(dsdx*f + dsdy*g + dsdz*h);
            s_H[2][j][i] = JW*(dtdx*f + dtdy*g + dtdz*h);
          }

          {
            // F3 = mu*T31 - (ruw), G3 = mu*T32 - (rvw), H3 = mu*T33 - (rw^2+p)
            const dfloat f = mu*T13-(rw*u);
            const dfloat g = mu*T23-(rw*v);
            const dfloat h = mu*T33-(rw*w+p);
            s_F[3][j][i] = JW*(drdx*f + drdy*g + drdz*h);
            s_G[3][j][i] = JW*(dsdx*f + dsdy*g + dsdz*h);
            s_H[3][j][i] = JW*(dtdx*f + dtdy*g + dtdz*h);
          }

          {
            // F4 = mu*(u*T11+v*T12+w*T13) - (uE+up),
            // G4 = mu*(u*T12+v*T22+w*T23) - (vE+vp),
            // H4 = mu*(u*T13+v*T23+w*T33) - (wE+wp)
            const dfloat f = mu*(u*T11+v*T12+w*T13)-u*(E+p);
            const dfloat g = mu*(u*T12+v*T22+w*T23)-v*(E+p);
            const dfloat h = mu*(u*T13+v*T23+w*T33)-w*(E+p);
            s_F[4][j][i] = JW*(drdx*f + drdy*g + drdz*h);
            s_G[4][j][i] = JW*(dsdx*f + dsdy*g + dsdz*h);
            s_H[4][j][i] = JW*(dtdx*f + dtdy*g + dtdz*h);
          }
        }
      }

      @barrier("local");

      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          #pragma unroll p_cubNq
          for (int n=0;n<p_cubNq;n++) {
            const dfloat Dr = s_cubDT[n][i];
            const dfloat Ds = s_cubDT[n][j];
            const dfloat Dt = s_cubDT[k][n];

            for(int fld=0;fld<p_Nfields;++fld){
              r_rhsq[fld][k] += Dr*s_F[fld][j][n];
              r_rhsq[fld][k] += Ds*s_G[fld][n][i];
              r_rhsq[fld][n] += Dt*s_H[fld][j][i];
            }
          }
        }
      }

      @barrier("local");
    } //k loop

    #pragma unroll p_cubNq
    for(int k=0;k<p_cubNq;++k){
      //load slice to @shared
      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          for(int fld=0;fld<p_Nfields;++fld){
            s_rhsq[fld][j][i] = r_rhsq[fld][k];
          }
        }
      }

      @barrier("local");

      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          if(j<p_Nq){
            for(int fld=0;fld<p_Nfields;++fld){
              r_rhsq[fld][k] = 0.0;
            }

            #pragma unroll p_cubNq
            for (int n=0;n<p_cubNq;n++) {
              const dfloat Pj = s_cubProject[n][j];
              for(int fld=0;fld<p_Nfields;++fld){
                r_rhsq[fld][k] += Pj*s_rhsq[fld][n][i];
              }
            }
          }
        }
      }

      @barrier("local");

      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          if(j<p_Nq){
            for(int fld=0;fld<p_Nfields;++fld){
              s_rhsq[fld][j][i] = r_rhsq[fld][k];
            }
          }
        }
      }

      @barrier("local");

      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          if ((i<p_Nq) && (j<p_Nq)) {
            for(int fld=0;fld<p_Nfields;++fld){
              r_rhsq[fld][k] = 0.0;
            }

            #pragma unroll p_cubNq
            for (int n=0;n<p_cubNq;n++) {
              const dfloat Pi = s_cubProject[n][i];
              for(int fld=0;fld<p_Nfields;++fld){
                r_rhsq[fld][k] += Pi*s_rhsq[fld][j][n];
              }
            }
          }
        }
      }

      @barrier("local");
    }

    //project in k and write out
    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
        if ((i<p_Nq) && (j<p_Nq)) {
          #pragma unroll p_Nq
          for(int k=0;k<p_Nq;++k){
            const dlong gid = e*p_Np*p_Nvgeo+ k*p_Nq*p_Nq + j*p_Nq +i;
            const dfloat invJW = vgeo[gid + p_IJWID*p_Np];

            dfloat rhsq0=0., rhsq1=0., rhsq2=0., rhsq3=0., rhsq4=0.;

            #pragma unroll p_cubNq
            for(int n=0;n<p_cubNq;++n){
              const dfloat Pk = s_cubProject[n][k];
              rhsq0 += Pk*r_rhsq[0][n];
              rhsq1 += Pk*r_rhsq[1][n];
              rhsq2 += Pk*r_rhsq[2][n];
              rhsq3 += Pk*r_rhsq[3][n];
              rhsq4 += Pk*r_rhsq[4][n];
            }

            // move to rhs
            const dlong id = e*p_Np*p_Nfields + k*p_Nq*p_Nq + j*p_Nq + i;
            rhsq[id+0*p_Np] = -invJW*rhsq0;
            rhsq[id+1*p_Np] = -invJW*rhsq1+fx[k];
            rhsq[id+2*p_Np] = -invJW*rhsq2+fy[k];
            rhsq[id+3*p_Np] = -invJW*rhsq3+fz[k];
            rhsq[id+4*p_Np] = -invJW*rhsq4;
          }
        }
      }
    }
  }
}
