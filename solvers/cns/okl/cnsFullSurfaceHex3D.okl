/*

The MIT License (MIT)

Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/


// https://www.cfd-online.com/Wiki/Navier-Stokes_equations
// http://www.mpia.de/homes/dullemon/lectures/hydrodynamicsII/chap_6.pdf

// 
// Roe averaged Riemann solver
void fullUpwindRoeAveraged(const dfloat nx,
                           const dfloat ny,
                           const dfloat nz,
                           const dfloat rM,
                           const dfloat ruM,
                           const dfloat rvM,
                           const dfloat rwM,       
                           const dfloat reM,
                           const dfloat rP,
                           const dfloat ruP,
                           const dfloat rvP,
                           const dfloat rwP,
                           const dfloat reP,
                           dfloat *rflux,
                           dfloat *ruflux,
                           dfloat *rvflux,
                           dfloat *rwflux,
                           dfloat *reflux
                           ){
  
  // Rotate "-" trace momentum to face normal-tangent coordinates

  dfloat sqrtrM = sqrt(rM);
  dfloat sqrtrP = sqrt(rP);

  // extract primitive variables from negative trace
  dfloat uM = ruM/rM;
  dfloat vM = rvM/rM;
  dfloat wM = rwM/rM;
  dfloat eM = reM/rM;
  dfloat pM = rM*(p_gamma-p_one)*(eM - p_half*(uM*uM+vM*vM+wM*wM));
  dfloat hM = eM + pM/rM;
  dfloat qnM = nx*uM+ny*vM+nz*wM;

  // extract primitive variables from positive trace
  dfloat uP = ruP/rP;
  dfloat vP = rvP/rP;
  dfloat wP = rwP/rP;
  dfloat eP = reP/rP;
  dfloat pP = rP*(p_gamma-p_one)*(eP - p_half*(uP*uP+vP*vP+wP*wP));  
  dfloat hP = eP + pP/rP;
  dfloat qnP = nx*uP+ny*vP+nz*wP;

  // Roe averaged variables
  dfloat r = sqrtrM*sqrtrP;
  dfloat u = (uM*sqrtrM + uP*sqrtrP)/(sqrtrM + sqrtrP);
  dfloat v = (vM*sqrtrM + vP*sqrtrP)/(sqrtrM + sqrtrP);
  dfloat w = (wM*sqrtrM + wP*sqrtrP)/(sqrtrM + sqrtrP);
  dfloat h = (hM*sqrtrM + hP*sqrtrP)/(sqrtrM + sqrtrP);
  dfloat a = sqrt( ((p_gamma-p_one)*(h-p_half*(u*u+v*v+w*w))) );
  dfloat qn = (qnM*sqrtrM + qnP*sqrtrP)/(sqrtrM + sqrtrP);

  // jump terms
  dfloat dp = pP-pM;
  dfloat dr = rP-rM;
  dfloat du = uP-uM;
  dfloat dv = vP-vM;
  dfloat dw = wP-wM;
  dfloat dqn = qnP-qnM;

  // weighting for characteristics
  dfloat w1 = fabs((qn-a))*p_half*(dp-r*a*dqn)/(a*a);
  dfloat w2 = fabs(qn)*(dr-(dp/(a*a)));
  dfloat w3 = fabs((qn+a))*p_half*(dp+r*a*dqn)/(a*a);
  dfloat w4 = fabs(qn)*r;

  // negative trace flux contribution to average (1/2 later)
   *rflux = qnM*rM;
  *ruflux = qnM*ruM + nx*pM;
  *rvflux = qnM*rvM + ny*pM;
  *rwflux = qnM*rwM + nz*pM;
  *reflux = qnM*hM;

  // positive trace flux contribution to average (1/2 later)
   *rflux += qnP*rP;
  *ruflux += qnP*ruP + nx*pP;
  *rvflux += qnP*rvP + ny*pP;
  *rwflux += qnP*rwP + nz*pP;
  *reflux += qnP*hP;

  // stabilization
   *rflux -= w1*p_one;
  *ruflux -= w1*(u-nx*a);
  *rvflux -= w1*(v-ny*a);
  *rwflux -= w1*(w-nz*a);
  *reflux -= w1*(h-qn*a);

   *rflux -= w2*p_one;
  *ruflux -= w2*u;
  *rvflux -= w2*v;
  *rwflux -= w2*w;
  *reflux -= w2*p_half*(u*u+v*v+w*w);

   *rflux -= w3*p_one;
  *ruflux -= w3*(u+nx*a);
  *rvflux -= w3*(v+ny*a);
  *rwflux -= w3*(w+nz*a);
  *reflux -= w3*(h+qn*a);

   *rflux -= w4*p_zero;
  *ruflux -= w4*(du-nx*dqn);
  *rvflux -= w4*(dv-ny*dqn);
  *rwflux -= w4*(dw-nz*dqn);
  *reflux -= w4*(u*du+v*dv+w*dw-qn*dqn);

  // scale to average
   *rflux *= p_half;
  *ruflux *= p_half;
  *rvflux *= p_half;
  *rwflux *= p_half;
  *reflux *= p_half;

}


#define surfaceTerms(sk,face, i, j, k)                                  \
  {                                                                     \
    const dfloat nx = sgeo[sk*p_Nsgeo+p_NXID];                          \
    const dfloat ny = sgeo[sk*p_Nsgeo+p_NYID];                          \
    const dfloat nz = sgeo[sk*p_Nsgeo+p_NZID];                          \
    const dfloat sJ = sgeo[sk*p_Nsgeo+p_SJID];                          \
    const dfloat invWJ = sgeo[sk*p_Nsgeo+p_WIJID];                      \
                                                                        \
    const dlong idM = vmapM[sk];                                        \
    const dlong idP = vmapP[sk];                                        \
                                                                        \
    const dlong eM = e;                                                 \
    const dlong eP = idP/p_Np;                                          \
    const int vidM = idM%p_Np;                                          \
    const int vidP = idP%p_Np;                                          \
                                                                        \
    const dlong qbaseM = eM*p_Np*p_Nfields + vidM;                      \
    const dlong qbaseP = eP*p_Np*p_Nfields + vidP;                      \
                                                                        \
    const dlong sbaseM = eM*p_Np*p_Nstresses + vidM;                    \
    const dlong sbaseP = eP*p_Np*p_Nstresses + vidP;                    \
                                                                        \
    const dfloat rM  = q[qbaseM + 0*p_Np];                              \
    const dfloat ruM = q[qbaseM + 1*p_Np];                              \
    const dfloat rvM = q[qbaseM + 2*p_Np];                              \
    const dfloat rwM = q[qbaseM + 3*p_Np];                              \
    const dfloat reM = q[qbaseM + 4*p_Np];                              \
                                                                        \
    const dfloat T11M = viscousStresses[sbaseM+0*p_Np];                 \
    const dfloat T12M = viscousStresses[sbaseM+1*p_Np];                 \
    const dfloat T13M = viscousStresses[sbaseM+2*p_Np];                 \
    const dfloat T22M = viscousStresses[sbaseM+3*p_Np];                 \
    const dfloat T23M = viscousStresses[sbaseM+4*p_Np];                 \
    const dfloat T33M = viscousStresses[sbaseM+5*p_Np];                 \
                                                                        \
    dfloat rP  = q[qbaseP + 0*p_Np];                                    \
    dfloat ruP = q[qbaseP + 1*p_Np];                                    \
    dfloat rvP = q[qbaseP + 2*p_Np];                                    \
    dfloat rwP = q[qbaseP + 3*p_Np];                                    \
    dfloat reP = q[qbaseP + 4*p_Np];                                    \
                                                                        \
    const dfloat T11P = viscousStresses[sbaseP+0*p_Np];                 \
    const dfloat T12P = viscousStresses[sbaseP+1*p_Np];                 \
    const dfloat T13P = viscousStresses[sbaseP+2*p_Np];                 \
    const dfloat T22P = viscousStresses[sbaseP+3*p_Np];                 \
    const dfloat T23P = viscousStresses[sbaseP+4*p_Np];                 \
    const dfloat T33P = viscousStresses[sbaseP+5*p_Np];                 \
                                                                        \
    const dfloat uM = ruM/rM;                                           \
    const dfloat vM = rvM/rM;                                           \
    const dfloat wM = rwM/rM;                                           \
    const dfloat eM = reM/rM;                                           \
                                                                        \
    dfloat uP = ruP/rP;                                                 \
    dfloat vP = rvP/rP;                                                 \
    dfloat wP = rwP/rP;                                                 \
    dfloat eP = reP/rP;                                                 \
                                                                        \
    const int bc = EToB[face+p_Nfaces*e];                               \
                                                                        \
    if(bc>0){                                                           \
      /*  need to update bcs to handle r,u,v,w,e */                     \
      cnsFullDirichletConditions3D(bc, time, x[idM], y[idM], z[idM], nx, ny, nz, rM, uM, vM, wM, eM, &rP, &uP, &vP, &wP, &eM); \
      ruP = rP*uP;                                                      \
      rvP = rP*vP;                                                      \
      rwP = rP*wP;                                                      \
      reP = rP*eP;                                                      \
    }                                                                   \
                                                                        \
    dfloat T41M = uM*T11M + vM*T12M + wM*T13M;                          \
    dfloat T42M = uM*T12M + vM*T22M + wM*T23M;                          \
    dfloat T43M = uM*T13M + vM*T23M + wM*T33M;                          \
    dfloat T41P = uP*T11P + vP*T12P + wP*T13P;                          \
    dfloat T42P = uP*T12P + vP*T22P + wP*T23P;                          \
    dfloat T43P = uP*T13P + vP*T23P + wP*T33P;                          \
                                                                        \
    const dfloat sc = invWJ*sJ;                                         \
                                                                        \
    dfloat rflux, ruflux, rvflux, rwflux, reflux;                       \
                                                                        \
    fullUpwindRoeAveraged (nx, ny, nz, rM, ruM, rvM, rwM, reM, rP, ruP, rvP, rwP, reP, &rflux, &ruflux, &rvflux, &rwflux, &reflux); \
                                                                        \
    rflux *= advSwitch;                                                 \
    ruflux *= advSwitch;                                                \
    rvflux *= advSwitch;                                                \
    rwflux *= advSwitch;                                                \
    reflux *= advSwitch;                                                \
                                                                        \
    ruflux -= p_half*(nx*(T11P+T11M) + ny*(T12P+T12M) + nz*(T13P+T13M)); \
    rvflux -= p_half*(nx*(T12P+T12M) + ny*(T22P+T22M) + nz*(T23P+T23M)); \
    rwflux -= p_half*(nx*(T13P+T13M) + ny*(T23P+T23M) + nz*(T33P+T33M)); \
    reflux -= p_half*(nx*(T41P+T41M) + ny*(T42P+T42M) + nz*(T43P+T43M)); \
                                                                        \
    const dlong base = e*p_Np*p_Nfields+k*p_Nq*p_Nq + j*p_Nq+i;         \
    rhsq[base+0*p_Np] += sc*(-rflux);                                   \
    rhsq[base+1*p_Np] += sc*(-ruflux);                                  \
    rhsq[base+2*p_Np] += sc*(-rvflux);                                  \
    rhsq[base+3*p_Np] += sc*(-rwflux);                                  \
    rhsq[base+4*p_Np] += sc*(-reflux);                                  \
}

// batch process elements
@kernel void cnsFullSurfaceHex3D(const dlong Nelements,
                                const int advSwitch,
                                @restrict const  dfloat *  sgeo,
                                @restrict const  dlong  *  vmapM,
                                @restrict const  dlong  *  vmapP,
                                @restrict const  int    *  EToB,
                                const dfloat time,
                                @restrict const  dfloat *  x,
                                @restrict const  dfloat *  y,
                                @restrict const  dfloat *  z,
                                const dfloat mu,
                                @restrict const  dfloat *  q,
                                @restrict const  dfloat *  viscousStresses,
                                @restrict dfloat *  rhsq){
  
  // for all elements
  for(dlong eo=0;eo<Nelements;eo+=p_NblockS;@outer(0)){
    
    // for all face nodes of all elements
    // face 0 & 5
    for(int es=0;es<p_NblockS;++es;@inner(2)){
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){
          const dlong e = eo + es;
          if(e<Nelements){
            const dlong sk0 = e*p_Nfp*p_Nfaces + 0*p_Nfp + j*p_Nq + i;
            const dlong sk5 = e*p_Nfp*p_Nfaces + 5*p_Nfp + j*p_Nq + i;
            
            surfaceTerms(sk0,0,i,j,0     );
            surfaceTerms(sk5,5,i,j,(p_Nq-1));
          }
        }
      }
    }
    
    @barrier("global");
    
    // face 1 & 3
    for(int es=0;es<p_NblockS;++es;@inner(2)){
      for(int k=0;k<p_Nq;++k;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){
          const dlong e = eo + es;
          if(e<Nelements){
            const dlong sk1 = e*p_Nfp*p_Nfaces + 1*p_Nfp + k*p_Nq + i;
            const dlong sk3 = e*p_Nfp*p_Nfaces + 3*p_Nfp + k*p_Nq + i;
            
            surfaceTerms(sk1,1,i,0     ,k);
            surfaceTerms(sk3,3,i,(p_Nq-1),k);
          }
        }
      }
    }
    
    @barrier("global");
    
    // face 2 & 4
    for(int es=0;es<p_NblockS;++es;@inner(2)){
      for(int k=0;k<p_Nq;++k;@inner(1)){
        for(int j=0;j<p_Nq;++j;@inner(0)){
          const dlong e = eo + es;
          if(e<Nelements){
            const dlong sk2 = e*p_Nfp*p_Nfaces + 2*p_Nfp + k*p_Nq + j;
            const dlong sk4 = e*p_Nfp*p_Nfaces + 4*p_Nfp + k*p_Nq + j;
            
            surfaceTerms(sk2,2,(p_Nq-1),j,k);
            surfaceTerms(sk4,4,0     ,j,k);
          }
        }
      }
    }
  }
}

