/*

The MIT License (MIT)

Copyright (c) 2017-2022 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

// Gradients of all conservative fields
@kernel void cnsForcesVolumeTet3D(const dlong Nelements,
                                  @restrict const  dfloat *  vgeo,
                                  @restrict const  dfloat *  D,
                                  @restrict const  dfloat *  q,
                                  @restrict        dfloat *  gradq){

  for(dlong e=0;e<Nelements;++e;@outer(0)){

    @shared dfloat s_u[p_Np];
    @shared dfloat s_v[p_Np];
    @shared dfloat s_w[p_Np];

    for(int n=0;n<p_Np;++n;@inner(0)){
      const dlong qbase = e*p_Nfields*p_Np + n;
      const dfloat r  = q[qbase + 0*p_Np];
      const dfloat ru = q[qbase + 1*p_Np];
      const dfloat rv = q[qbase + 2*p_Np];
      const dfloat rw = q[qbase + 3*p_Np];

      s_u[n] = ru/r;
      s_v[n] = rv/r;
      s_w[n] = rw/r;
    }


    for(int n=0;n<p_Np;++n;@inner(0)){
      // prefetch geometric factors (constant on triangle)
      const dfloat drdx = vgeo[e*p_Nvgeo + p_RXID];
      const dfloat drdy = vgeo[e*p_Nvgeo + p_RYID];
      const dfloat drdz = vgeo[e*p_Nvgeo + p_RZID];

      const dfloat dsdx = vgeo[e*p_Nvgeo + p_SXID];
      const dfloat dsdy = vgeo[e*p_Nvgeo + p_SYID];
      const dfloat dsdz = vgeo[e*p_Nvgeo + p_SZID];

      const dfloat dtdx = vgeo[e*p_Nvgeo + p_TXID];
      const dfloat dtdy = vgeo[e*p_Nvgeo + p_TYID];
      const dfloat dtdz = vgeo[e*p_Nvgeo + p_TZID];

      dfloat dudr = 0., duds = 0., dudt = 0.; 
      dfloat dvdr = 0., dvds = 0., dvdt = 0.; 
      dfloat dwdr = 0., dwds = 0., dwdt = 0.; 

      for(int i=0;i<p_Np;++i){
        const dfloat Drni = D[n+i*p_Np+0*p_Np*p_Np];
        const dfloat Dsni = D[n+i*p_Np+1*p_Np*p_Np];
        const dfloat Dtni = D[n+i*p_Np+2*p_Np*p_Np];
        const dfloat u = s_u[i];
        const dfloat v = s_v[i];
        const dfloat w = s_w[i];
        dudr += Drni*u, duds += Dsni*u, dudt += Dtni*u;
        dvdr += Drni*v, dvds += Dsni*v, dvdt += Dtni*v;
        dwdr += Drni*w, dwds += Dsni*w, dwdt += Dtni*w;
      }

      const dfloat dudx = drdx*dudr + dsdx*duds+ dtdx*dudt;
      const dfloat dudy = drdy*dudr + dsdy*duds+ dtdy*dudt;
      const dfloat dudz = drdz*dudr + dsdz*duds+ dtdz*dudt;
    
      const dfloat dvdx = drdx*dvdr + dsdx*dvds+ dtdx*dvdt;
      const dfloat dvdy = drdy*dvdr + dsdy*dvds+ dtdy*dvdt;
      const dfloat dvdz = drdz*dvdr + dsdz*dvds+ dtdz*dvdt;

      const dfloat dwdx = drdx*dwdr + dsdx*dwds+ dtdx*dwdt;
      const dfloat dwdy = drdy*dwdr + dsdy*dwds+ dtdy*dwdt;
      const dfloat dwdz = drdz*dwdr + dsdz*dwds+ dtdz*dwdt;

      const dlong sbase = e*p_Np*9 + n;
      gradq[sbase + 0*p_Np] = dudx;
      gradq[sbase + 1*p_Np] = dudy;
      gradq[sbase + 2*p_Np] = dudz;

      gradq[sbase + 3*p_Np] = dvdx;
      gradq[sbase + 4*p_Np] = dvdy;
      gradq[sbase + 5*p_Np] = dvdz;
      
      gradq[sbase + 6*p_Np] = dwdx;
      gradq[sbase + 7*p_Np] = dwdy;
      gradq[sbase + 8*p_Np] = dwdz;

    }
  }
}




@kernel void cnsForcesSurfaceTet3D(const dlong Nelements,
                                  const int refStateID, 
                                  const int targetGroupID, 
                                  @restrict const  dfloat *  sgeo,
                                  @restrict const  dfloat *  SM,
                                  @restrict const  dlong  *  vmapM,
                                  @restrict const  int    *  EToG,
                                  @restrict const  int    *  reportGroups,
                                  @restrict const  dfloat *  flowStates,
                                  @restrict const  dfloat *  x,
                                  @restrict const  dfloat *  y,
                                  @restrict const  dfloat *  z,
                                  @restrict const  dfloat *  XC, 
                                  @restrict const  dfloat * pCoeff,
                                  @restrict const  dfloat *  q,
                                  @restrict const  dfloat *  gradq,
                                  @restrict        dfloat *  F){

  for(dlong e=0;e<Nelements;++e;@outer(0)){
   
    // not sure if we enforce single boundary face per element!
    @shared dfloat s_vFx[p_NfacesNfp];
    @shared dfloat s_vFy[p_NfacesNfp];
    @shared dfloat s_vFz[p_NfacesNfp];

    @shared dfloat s_pFx[p_NfacesNfp];
    @shared dfloat s_pFy[p_NfacesNfp];
    @shared dfloat s_pFz[p_NfacesNfp];

    @shared dfloat s_Mx[p_NfacesNfp];
    @shared dfloat s_My[p_NfacesNfp];
    @shared dfloat s_Mz[p_NfacesNfp];

    for(int n=0;n<p_maxNodes;++n;@inner(0)){ // maxNodes = max(Nfp*Nfaces,Np)
      if(n<p_NfacesNfp){
        // apply boundary condition
        const int face            = n/p_Nfp;
        const int geometricID     = EToG[face+p_Nfaces*e];
        int computeForces = 0; 
        if(geometricID){ // if this is a BC face
          for(int id =0; id<p_NrIDs; id++){
            int targetGeoID = reportGroups[id*2 + 0]; 
            int groupID     = reportGroups[id*2 + 1]; 
            computeForces = (groupID==targetGroupID && geometricID==targetGeoID)? 
                            1:computeForces; 
          }
        }
        s_vFx[n] = 0.0, s_vFy[n] = 0.0, s_vFz[n] = 0.0;
        s_pFx[n] = 0.0, s_pFy[n] = 0.0, s_pFz[n] = 0.0; 
        s_Mx[n]  = 0.0, s_My[n]  = 0.0, s_Mz[n]  = 0.0; 

        if(computeForces){

          const dfloat gamma = pCoeff[p_GMID]; // gamma
          const dfloat R     = pCoeff[p_RRID]; // gas constant
                dfloat mu    = pCoeff[p_MUID]; // bulk viscosity

          const dfloat PREF    = flowStates[refStateID*p_NsP + 4]; 



          // load surface geofactors for this face
          const dlong sid   = p_Nsgeo*(e*p_Nfaces+face);
          const dfloat nx   = sgeo[sid+p_NXID];
          const dfloat ny   = sgeo[sid+p_NYID];
          const dfloat nz   = sgeo[sid+p_NZID];
          const dfloat sJ   = sgeo[sid+p_SJID];

          // indices of negative and positive traces of face node
          const dlong id  = e*p_Nfp*p_Nfaces + n;
          const dlong idM = vmapM[id];

          // load traces
          const dlong eM = e;
          const int vidM = idM%p_Np;

          const dlong qbaseM = eM*p_Np*p_Nfields + vidM;
          const dlong sbaseM = eM*p_Np*p_Ngrads  + vidM;

          const dfloat rM  = q[qbaseM + 0*p_Np];
          const dfloat ruM = q[qbaseM + 1*p_Np];
          const dfloat rvM = q[qbaseM + 2*p_Np];
          const dfloat rwM = q[qbaseM + 3*p_Np];
          const dfloat EM  = q[qbaseM + 4*p_Np];

          const dfloat drrdx = gradq[sbaseM+0*p_Np];
          const dfloat drrdy = gradq[sbaseM+1*p_Np];
          const dfloat drrdz = gradq[sbaseM+2*p_Np];

          const dfloat drudx = gradq[sbaseM+3*p_Np];
          const dfloat drudy = gradq[sbaseM+4*p_Np];
          const dfloat drudz = gradq[sbaseM+5*p_Np];
          
          const dfloat drvdx = gradq[sbaseM+6*p_Np];
          const dfloat drvdy = gradq[sbaseM+7*p_Np];
          const dfloat drvdz = gradq[sbaseM+8*p_Np];

          const dfloat drwdx = gradq[sbaseM+ 9*p_Np];
          const dfloat drwdy = gradq[sbaseM+10*p_Np];
          const dfloat drwdz = gradq[sbaseM+11*p_Np];

          const dfloat uM = ruM/rM;
          const dfloat vM = rvM/rM;
          const dfloat wM = rwM/rM;
          const dfloat pM = (gamma-1)*(EM-0.5*rM*(uM*uM+vM*vM+wM*wM));

          // Derivative of velocities
          const dfloat dudx = (drudx - drrdx*uM)/rM;
          const dfloat dvdx = (drvdx - drrdx*vM)/rM;
          const dfloat dwdx = (drwdx - drrdx*wM)/rM;
         
          // Derivative of velocities
          const dfloat dudy = (drudy - drrdy*uM)/rM;
          const dfloat dvdy = (drvdy - drrdy*vM)/rM;
          const dfloat dwdy = (drwdy - drrdy*wM)/rM;

          // Derivative of velocities
          const dfloat dudz = (drudz - drrdz*uM)/rM;
          const dfloat dvdz = (drvdz - drrdz*vM)/rM;
          const dfloat dwdz = (drwdz - drrdz*wM)/rM;

          if(p_viscType==2){ // Sutherland     
            const dfloat exp  = pCoeff[p_EXID]; // Exponential term
            const dfloat tr   = pCoeff[p_TRID]; // 1/Tref 
            const dfloat ts   = pCoeff[p_TSID]; // Ts/Tref
            const dfloat cs   = pCoeff[p_CSID]; // precomuted value to simlify
            const dfloat tn   = pM*tr/ (rM *R);  // non-dimensional temp
            mu  = (tn > ts) ? (mu*pow(tn, exp)*(1.0+ts)/(tn + ts)) : mu*tn*cs;  
          }else if(p_viscType==3){ // Powerlaw
            const dfloat exp  = pCoeff[p_EXID];   // Exponential term
            const dfloat TempM  = pM/(R*rM);      // Temperature
            mu =  mu*pow(TempM, exp); 
          }

          const dfloat sbeta = 2.0/3.0; 
          const dfloat T11 = mu*(2.0*dudx - sbeta*(dudx+dvdy+dwdz));
          const dfloat T12 = mu*(dudy+dvdx);
          const dfloat T13 = mu*(dudz+dwdx);

          const dfloat T22 = mu*(2.0*dvdy - sbeta*(dudx+dvdy+dwdz));
          const dfloat T23 = mu*(dvdz+dwdy);
          const dfloat T33 = mu*(2.0*dwdz - sbeta*(dudx+dvdy+dwdz));
          
          const dfloat px = (pM-PREF)*nx; 
          const dfloat py = (pM-PREF)*ny;
          const dfloat pz = (pM-PREF)*nz;

          const dfloat vx = -(nx*T11 + ny*T12 + nz*T13); 
          const dfloat vy = -(nx*T12 + ny*T22 + nz*T23);
          const dfloat vz = -(nx*T13 + ny*T23 + nz*T33);
          
          const dfloat fx = px + vx;
          const dfloat fy = py + vy;
          const dfloat fz = pz + vz;

          const dfloat dxf   = x[idM] - XC[0]; 
          const dfloat dyf   = y[idM] - XC[1];
          const dfloat dzf   = z[idM] - XC[2];
              
          s_vFx[n] = sJ*vx;
          s_vFy[n] = sJ*vy;
          s_vFz[n] = sJ*vz;
          
          s_pFx[n] = sJ*px;
          s_pFy[n] = sJ*py;
          s_pFz[n] = sJ*pz;

          s_Mx[n]  = sJ*(fz*dyf - fy*dzf); 
          s_My[n]  = sJ*(fx*dzf - fz*dxf); 
          s_Mz[n]  = sJ*(fy*dxf - fx*dyf); 
        }
      }
    }

    // for each node in the element
    for(int n=0;n<p_maxNodes;++n;@inner(0)){
      if(n<p_Np){
        dfloat vfxI  = 0., vfyI = 0., vfzI = 0.; 
        dfloat pfxI  = 0., pfyI = 0., pfzI = 0.; 
        dfloat mxI   = 0., myI  = 0., mzI  = 0.; 
        #pragma unroll p_NfacesNfp
        for(int m=0;m<p_NfacesNfp;++m){
          const dfloat sM = SM[n+m*p_Np];
          vfxI     += sM*s_vFx[m];
          vfyI     += sM*s_vFy[m];
          vfzI     += sM*s_vFz[m];

          pfxI     += sM*s_pFx[m];
          pfyI     += sM*s_pFy[m];
          pfzI     += sM*s_pFz[m];

          mxI      += sM*s_Mx[m];
          myI      += sM*s_My[m];
          mzI      += sM*s_Mz[m];
        }
        const dlong shift = Nelements*p_Np;
        F[e*p_Np+n+0*shift] = vfxI; 
        F[e*p_Np+n+1*shift] = vfyI;
        F[e*p_Np+n+2*shift] = vfzI;
 
        F[e*p_Np+n+3*shift] = pfxI; 
        F[e*p_Np+n+4*shift] = pfyI;
        F[e*p_Np+n+5*shift] = pfzI;

        F[e*p_Np+n+6*shift] = mxI; 
        F[e*p_Np+n+7*shift] = myI;
        F[e*p_Np+n+8*shift] = mzI;
        }
      }
    } 
  }





// @kernel void cnsForcesSurfaceTet3D(const dlong Nelements,
//                                   const int targetGroupID, 
//                                   @restrict const  dfloat *  sgeo,
//                                   @restrict const  dfloat *  SM,
//                                   @restrict const  dlong  *  vmapM,
//                                   @restrict const  int    *  EToG,
//                                   @restrict const  int    *  reportGroups,
//                                   @restrict const  dfloat *  x,
//                                   @restrict const  dfloat *  y,
//                                   @restrict const  dfloat *  z,
//                                   @restrict const  dfloat *  XC, 
//                                   @restrict const  dfloat * pCoeff,
//                                   @restrict const  dfloat *  q,
//                                   @restrict const  dfloat *  gradq,
//                                   @restrict        dfloat *  F){

//   for(dlong e=0;e<Nelements;++e;@outer(0)){
   
//     // not sure if we enforce single boundary face per element!
//     @shared dfloat s_vFx[p_NfacesNfp];
//     @shared dfloat s_vFy[p_NfacesNfp];
//     @shared dfloat s_vFz[p_NfacesNfp];

//     @shared dfloat s_pFx[p_NfacesNfp];
//     @shared dfloat s_pFy[p_NfacesNfp];
//     @shared dfloat s_pFz[p_NfacesNfp];

//     @shared dfloat s_Mx[p_NfacesNfp];
//     @shared dfloat s_My[p_NfacesNfp];
//     @shared dfloat s_Mz[p_NfacesNfp];

//     for(int n=0;n<p_maxNodes;++n;@inner(0)){ // maxNodes = max(Nfp*Nfaces,Np)
//       if(n<p_NfacesNfp){
//         // apply boundary condition
//         const int face            = n/p_Nfp;
//         const int geometricID     = EToG[face+p_Nfaces*e];
//         int computeForces = 0; 
//         if(geometricID){ // if this is a BC face
//           for(int id =0; id<p_NrIDs; id++){
//             int targetGeoID = reportGroups[id*2 + 0]; 
//             int groupID     = reportGroups[id*2 + 1]; 
//             computeForces = (groupID==targetGroupID && geometricID==targetGeoID)? 
//                             1:computeForces; 
//           }
//         }
//         s_vFx[n] = 0.0, s_vFy[n] = 0.0, s_vFz[n] = 0.0;
//         s_pFx[n] = 0.0, s_pFy[n] = 0.0, s_pFz[n] = 0.0; 
//         s_Mx[n]  = 0.0, s_My[n]  = 0.0, s_Mz[n]  = 0.0; 

//         if(computeForces){

//           const dfloat gamma = pCoeff[p_GMID]; // gamma
//           const dfloat R     = pCoeff[p_RRID]; // gas constant
//                 dfloat mu    = pCoeff[p_MUID]; // bulk viscosity

//           // load surface geofactors for this face
//           const dlong sid   = p_Nsgeo*(e*p_Nfaces+face);
//           const dfloat nx   = sgeo[sid+p_NXID];
//           const dfloat ny   = sgeo[sid+p_NYID];
//           const dfloat nz   = sgeo[sid+p_NZID];
//           const dfloat sJ   = sgeo[sid+p_SJID];

//           // indices of negative and positive traces of face node
//           const dlong id  = e*p_Nfp*p_Nfaces + n;
//           const dlong idM = vmapM[id];

//           // load traces
//           const dlong eM = e;
//           const int vidM = idM%p_Np;

//           const dlong qbaseM = eM*p_Np*p_Nfields    + vidM;
//           const dlong sbaseM = eM*p_Np*p_dim*p_dim  + vidM;

//           const dfloat rM  = q[qbaseM + 0*p_Np];
//           const dfloat ruM = q[qbaseM + 1*p_Np];
//           const dfloat rvM = q[qbaseM + 2*p_Np];
//           const dfloat rwM = q[qbaseM + 3*p_Np];
//           const dfloat EM  = q[qbaseM + 4*p_Np];

//           const dfloat dudx = gradq[sbaseM+0*p_Np];
//           const dfloat dudy = gradq[sbaseM+1*p_Np];
//           const dfloat dudz = gradq[sbaseM+2*p_Np];
          
//           const dfloat dvdx = gradq[sbaseM+3*p_Np];
//           const dfloat dvdy = gradq[sbaseM+4*p_Np];
//           const dfloat dvdz = gradq[sbaseM+5*p_Np];

//           const dfloat dwdx = gradq[sbaseM+6*p_Np];
//           const dfloat dwdy = gradq[sbaseM+7*p_Np];
//           const dfloat dwdz = gradq[sbaseM+8*p_Np];

//           const dfloat uM = ruM/rM;
//           const dfloat vM = rvM/rM;
//           const dfloat wM = rwM/rM;
//           const dfloat pM = (gamma-1)*(EM-0.5*rM*(uM*uM+vM*vM+wM*wM));

//           if(p_viscType==2){ // Sutherland     
//             const dfloat exp  = pCoeff[p_EXID]; // Exponential term
//             const dfloat tr   = pCoeff[p_TRID]; // 1/Tref 
//             const dfloat ts   = pCoeff[p_TSID]; // Ts/Tref
//             const dfloat cs   = pCoeff[p_CSID]; // precomuted value to simlify
//             const dfloat tn   = pM*tr/ (rM *R);  // non-dimensional temp
//             mu  = (tn > ts) ? (mu*pow(tn, exp)*(1.0+ts)/(tn + ts)) : mu*tn*cs;  
//           }else if(p_viscType==3){ // Powerlaw
//             const dfloat exp  = pCoeff[p_EXID];   // Exponential term
//             const dfloat TempM  = pM/(R*rM);      // Temperature
//             mu =  mu*pow(TempM, exp); 
//           }

//           const dfloat sbeta = 2.0/3.0; 
//           const dfloat T11 = mu*(2.0*dudx - sbeta*(dudx+dvdy+dwdz));
//           const dfloat T12 = mu*(dudy+dvdx);
//           const dfloat T13 = mu*(dudz+dwdx);

//           const dfloat T22 = mu*(2.0*dvdy - sbeta*(dudx+dvdy+dwdz));
//           const dfloat T23 = mu*(dvdz+dwdy);
//           const dfloat T33 = mu*(2.0*dwdz - sbeta*(dudx+dvdy+dwdz));
          
//           const dfloat fx = pM*nx - (nx*T11 + ny*T12 + nz*T13); 
//           const dfloat fy = pM*ny - (nx*T12 + ny*T22 + nz*T23);
//           const dfloat fz = pM*nz - (nx*T13 + ny*T23 + nz*T33);
          
//           const dfloat dxf   = x[idM] - XC[0]; 
//           const dfloat dyf   = y[idM] - XC[1];
//           const dfloat dzf   = z[idM] - XC[2];
              
//           s_vFx[n] = -sJ*(nx*T11 + ny*T12 + nz*T13);
//           s_vFy[n] = -sJ*(nx*T12 + ny*T22 + nz*T23);
//           s_vFz[n] = -sJ*(nx*T13 + ny*T23 + nz*T33);
          
//           s_pFx[n] = sJ*pM*nx;
//           s_pFy[n] = sJ*pM*ny;
//           s_pFz[n] = sJ*pM*nz;

//           s_Mx[n]  = sJ*(fz*dyf - fy*dzf); 
//           s_My[n]  = sJ*(fz*dxf - fx*dzf); 
//           s_Mz[n]  = sJ*(fy*dxf - fx*dyf); 
//         }
//       }
//     }

//     // for each node in the element
//     for(int n=0;n<p_maxNodes;++n;@inner(0)){
//       if(n<p_Np){
//         dfloat vfxI  = 0., vfyI = 0., vfzI = 0.; 
//         dfloat pfxI  = 0., pfyI = 0., pfzI = 0.; 
//         dfloat mxI   = 0., myI  = 0., mzI  = 0.; 
//         #pragma unroll p_NfacesNfp
//         for(int m=0;m<p_NfacesNfp;++m){
//           const dfloat sM = SM[n+m*p_Np];
//           vfxI     += sM*s_vFx[m];
//           vfyI     += sM*s_vFy[m];
//           vfzI     += sM*s_vFz[m];

//           pfxI     += sM*s_pFx[m];
//           pfyI     += sM*s_pFy[m];
//           pfzI     += sM*s_pFz[m];

//           mxI      += sM*s_Mx[m];
//           myI      += sM*s_My[m];
//           mzI      += sM*s_Mz[m];
//         }
//         const dlong shift = Nelements*p_Np;
//         F[e*p_Np+n+0*shift] = vfxI; 
//         F[e*p_Np+n+1*shift] = vfyI;
//         F[e*p_Np+n+2*shift] = vfzI;
 
//         F[e*p_Np+n+3*shift] = pfxI; 
//         F[e*p_Np+n+4*shift] = pfyI;
//         F[e*p_Np+n+5*shift] = pfzI;

//         F[e*p_Np+n+6*shift] = mxI; 
//         F[e*p_Np+n+7*shift] = myI;
//         F[e*p_Np+n+8*shift] = mzI;
//         }
//       }
//     } 
//   }

