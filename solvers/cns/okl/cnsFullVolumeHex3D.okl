/*

The MIT License (MIT)

Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/


// isothermal Compressible Navier-Stokes
@kernel void cnsFullVolumeHex3D(const dlong Nelements,
			       const int advSwitch,
			       @restrict const  dfloat *  vgeo,
			       @restrict const  dfloat *  D,
			       @restrict const  dfloat *  viscousStresses,
			       @restrict const  dfloat *  q,
			       @restrict dfloat *  rhsq){
  
  for(dlong e=0;e<Nelements;++e;@outer(0)){

    @shared dfloat s_D[p_Nq][p_Nq];
    @shared dfloat s_F[p_Nfields][p_Nq][p_Nq][p_Nq];
    @shared dfloat s_G[p_Nfields][p_Nq][p_Nq][p_Nq];
    @shared dfloat s_H[p_Nfields][p_Nq][p_Nq][p_Nq];

    for(int k=0;k<p_Nq;++k;@inner(2)){
      for(int j=0;j<p_Nq;++j;@inner(1)){
	for(int i=0;i<p_Nq;++i;@inner(0)){
	  if(k==0)
	    s_D[j][i] = D[j*p_Nq+i];
	  
	  // geometric factors
	  const dlong gbase = e*p_Np*p_Nvgeo + k*p_Nq*p_Nq + j*p_Nq + i;
	  const dfloat rx = vgeo[gbase+p_Np*p_RXID];
	  const dfloat ry = vgeo[gbase+p_Np*p_RYID];
	  const dfloat rz = vgeo[gbase+p_Np*p_RZID];
	  const dfloat sx = vgeo[gbase+p_Np*p_SXID];
	  const dfloat sy = vgeo[gbase+p_Np*p_SYID];
	  const dfloat sz = vgeo[gbase+p_Np*p_SZID];
	  const dfloat tx = vgeo[gbase+p_Np*p_TXID];
	  const dfloat ty = vgeo[gbase+p_Np*p_TYID];
	  const dfloat tz = vgeo[gbase+p_Np*p_TZID];
	  const dfloat JW = vgeo[gbase+p_Np*p_JWID];

	  // conserved variables
	  const dlong  qbase = e*p_Np*p_Nfields + k*p_Nq*p_Nq + j*p_Nq + i;
	  const dfloat r  = q[qbase+0*p_Np];
	  const dfloat ru = q[qbase+1*p_Np];
	  const dfloat rv = q[qbase+2*p_Np];
	  const dfloat rw = q[qbase+3*p_Np];
	  const dfloat re = q[qbase+4*p_Np];

	  // primitive variables (velocity)
	  const dfloat e = re/r;
	  const dfloat u = ru/r;
	  const dfloat v = rv/r;
	  const dfloat w = rw/r;
	  const dfloat p  = r*(p_gamma-p_one)*(e-p_half*(u*u+v*v+w*w));
	  const dfloat H = e + p/r;
	  
	  // viscous stresses (precomputed by cnsStressesVolumeHex3D)
	  const dlong id = e*p_Np*p_Nstresses + k*p_Nq*p_Nq + j*p_Nq + i;
	  const dfloat T11 = viscousStresses[id+0*p_Np];
	  const dfloat T12 = viscousStresses[id+1*p_Np];
	  const dfloat T13 = viscousStresses[id+2*p_Np];
	  const dfloat T22 = viscousStresses[id+3*p_Np];
	  const dfloat T23 = viscousStresses[id+4*p_Np];
	  const dfloat T33 = viscousStresses[id+5*p_Np];
	  
	  // (1/J) \hat{div} (G*[F;G])
	  // questionable: why JW
	  {
	    // F0 = ru, G0 = rv
	    const dfloat f = -advSwitch*ru;
	    const dfloat g = -advSwitch*rv;
	    const dfloat h = -advSwitch*rw;
	    s_F[0][k][j][i] = JW*(rx*f + ry*g + rz*h);
	    s_G[0][k][j][i] = JW*(sx*f + sy*g + sz*h);
	    s_H[0][k][j][i] = JW*(tx*f + ty*g + tz*h);
	  }
	  
	  {
	    // F1 = 2*mu*S11 - (ru^2+p), G1 = 2*mu*S12 - (rvu)
	    const dfloat f = T11-advSwitch*(ru*u+p);
	    const dfloat g = T12-advSwitch*(rv*u);
	    const dfloat h = T13-advSwitch*(rw*u);
	    s_F[1][k][j][i] = JW*(rx*f + ry*g + rz*h);
	    s_G[1][k][j][i] = JW*(sx*f + sy*g + sz*h);
	    s_H[1][k][j][i] = JW*(tx*f + ty*g + tz*h);
	  }
	  
	  {
	    // F2 = 2*mu*S21 - (ruv), G2 = 2*mu*S22 - (rv^2+p)
	    const dfloat f = T12-advSwitch*(rv*u);
	    const dfloat g = T22-advSwitch*(rv*v+p);
	    const dfloat h = T23-advSwitch*(rv*w);
	    s_F[2][k][j][i] = JW*(rx*f + ry*g + rz*h);
	    s_G[2][k][j][i] = JW*(sx*f + sy*g + sz*h);
	    s_H[2][k][j][i] = JW*(tx*f + ty*g + tz*h);
	  }
	  
	  {
	    const dfloat f = T13-advSwitch*(rw*u);
	    const dfloat g = T23-advSwitch*(rw*v);
	    const dfloat h = T33-advSwitch*(rw*w+p);
	    s_F[3][k][j][i] = JW*(rx*f + ry*g + rz*h);
	    s_G[3][k][j][i] = JW*(sx*f + sy*g + sz*h);
	    s_H[3][k][j][i] = JW*(tx*f + ty*g + tz*h);
	  }

	  {
	    const dfloat T41 = u*T11 + v*T12 + w*T13;
	    const dfloat T42 = u*T12 + v*T22 + w*T23;
	    const dfloat T43 = u*T13 + v*T23 + w*T33;
	    const dfloat f = T41-advSwitch*(ru*H);
	    const dfloat g = T42-advSwitch*(rv*H);
	    const dfloat h = T43-advSwitch*(rw*H);
	    s_F[4][k][j][i] = JW*(rx*f + ry*g + rz*h);
	    s_G[4][k][j][i] = JW*(sx*f + sy*g + sz*h);
	    s_H[4][k][j][i] = JW*(tx*f + ty*g + tz*h);
	  }
	}
      }
    }

    @barrier("local");

    for(int k=0;k<p_Nq;++k;@inner(2)){
      for(int j=0;j<p_Nq;++j;@inner(1)){
	for(int i=0;i<p_Nq;++i;@inner(0)){    
	  const dlong gid = e*p_Np*p_Nvgeo+ k*p_Nq*p_Nq + j*p_Nq +i;
	  const dfloat invJW = vgeo[gid + p_IJWID*p_Np];
	  
	  dfloat rhsq0 = 0, rhsq1 = 0, rhsq2 = 0, rhsq3 = 0, rhsq4 = 0;
	  
	  for(int n=0;n<p_Nq;++n){
	    const dfloat Din = s_D[n][i];
	    const dfloat Djn = s_D[n][j];
	    const dfloat Dkn = s_D[n][k];

	    rhsq0 += Din*s_F[0][k][j][n];
	    rhsq0 += Djn*s_G[0][k][n][i];
	    rhsq0 += Dkn*s_H[0][n][j][i];

	    rhsq1 += Din*s_F[1][k][j][n];
	    rhsq1 += Djn*s_G[1][k][n][i];
	    rhsq1 += Dkn*s_H[1][n][j][i];

	    rhsq2 += Din*s_F[2][k][j][n];
	    rhsq2 += Djn*s_G[2][k][n][i];
	    rhsq2 += Dkn*s_H[2][n][j][i];
	    
	    rhsq3 += Din*s_F[3][k][j][n];
	    rhsq3 += Djn*s_G[3][k][n][i];
	    rhsq3 += Dkn*s_H[3][n][j][i];

	    rhsq4 += Din*s_F[4][k][j][n];
	    rhsq4 += Djn*s_G[4][k][n][i];
	    rhsq4 += Dkn*s_H[4][n][j][i];

	  }
	  
	  const dlong base = e*p_Np*p_Nfields + k*p_Nq*p_Nq + j*p_Nq + i;
	  
	  // move to rhs
	  rhsq[base+0*p_Np] = -invJW*rhsq0;
	  rhsq[base+1*p_Np] = -invJW*rhsq1;
	  rhsq[base+2*p_Np] = -invJW*rhsq2;
	  rhsq[base+3*p_Np] = -invJW*rhsq3;
	  rhsq[base+4*p_Np] = -invJW*rhsq4;

	}
      }
    }
  }
}

