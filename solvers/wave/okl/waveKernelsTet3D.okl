/*

The MIT License (MIT)

Copyright (c) 2017-2022 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/


@kernel void waveStepInitializeTet3D(const dlong Nelements,
                                     const dfloat scD,
                                     const dfloat scP,
                                     const dfloat lambda,
                                     @restrict const dfloat *WJ,
                                     @restrict const dfloat *MM,
                                     @restrict const dfloat *DL,
                                     @restrict const dfloat *PL,
                                     @restrict       dfloat *DhatL,
                                     @restrict       dfloat *PhatL,
                                     @restrict       dfloat *DrhsL){
  
  for(dlong e=0;e<Nelements;++e;@outer(0)){
    @shared dfloat s_R[p_Np];

    for(dlong n=0;n<p_Np;++n;@inner(0)){
      const dlong id = e*p_Np + n;
      const dfloat Dn = DL[id];
      const dfloat Pn = PL[id];

      // start hat vars
      DhatL[id] = Dn;
      PhatL[id] = Pn;

      const dfloat Rn = scD*Dn + scP*Pn;
      
      s_R[n] = Rn;
    }
    
    @barrier();
 
    for(dlong n=0;n<p_Np;++n;@inner(0)){
      dfloat Drhs = 0;
      for(dlong m=0;m<p_Np;++m){
        Drhs += MM[n+m*p_Np]*s_R[m];
      }
      Drhs *= WJ[e];
      
      const dlong id = e*p_Np+n;
      DrhsL[id] = lambda*Drhs;
    }
  }
}


@kernel void waveStageFinalizeTet3D(const dlong Nelements,
                                    const dfloat dt,
                                    const dfloat invGammaDt,
                                    const dfloat invGamma,
                                    const dfloat gamma,
                                    const dfloat lambda,
                                    const int    Nstages,
                                    const int    stage,
                                    const dfloat scF,
                                    @restrict const dfloat *alpha,
                                    @restrict const dfloat *alphatilde,
                                    @restrict const dfloat *gammatilde,  
                                    @restrict const dfloat *WJ,
                                    @restrict const dfloat *MM,
                                    @restrict const dfloat *FL,
                                    @restrict       dfloat *DtildeL,
                                    @restrict       dfloat *DhatL,
                                    @restrict       dfloat *PhatL,
                                    @restrict       dfloat *DrhsL){
  
  for(dlong e=0;e<Nelements;++e;@outer(0)){
    @shared dfloat s_R[p_Np];

    for(dlong n=0;n<p_Np;++n;@inner(0)){
      const int i = stage-1;
      const dlong id = e*p_Np + n;
      
      const dfloat Dtilde = DtildeL[id];

      const dfloat Dn = DhatL[id];
      const dfloat Pn = PhatL[id];

      dfloat Di = Dtilde - gammatilde[i]*Pn/dt;

      dfloat Rnew = Dn;
      if(i+1<Nstages){
	Rnew += gammatilde[i+1]*Pn/dt;
      }
      
      for(int j=0;j<i;++j){
        dfloat Dj = DhatL[id+j*Nelements*p_Np];
        
        dfloat tildeAij = alphatilde[i*Nstages+j];
        
        Di -= tildeAij*Dj;
        
        if(i+1<Nstages){
          dfloat tmptilde = alphatilde[(i+1)*Nstages+j];          
          Rnew += tmptilde*Dj;
        }
      }
      
      if(i+1<Nstages){
        dfloat tmptilde = alphatilde[(i+1)*Nstages+i];          
        Rnew += tmptilde*Di;
        Rnew += dt*scF*FL[id];
      }
      
      DhatL[id+i*Nelements*p_Np] = Di;
      s_R[n] = Rnew;
    }
    
    @barrier();

    for(dlong n=0;n<p_Np;++n;@inner(0)){
      const int i = stage-1;
      if(i+1<Nstages){
        dfloat Drhs = 0;
        for(dlong m=0;m<p_Np;++m){
          Drhs += MM[n+m*p_Np]*s_R[m];
        }
        Drhs *= WJ[e];
        
        const dlong id = e*p_Np+n;
        DrhsL[id] = lambda*Drhs;
      }
    }
  }
}

  
@kernel void waveStepFinalizeTet3D(const dlong Nelements,
                                   const dfloat dt,
                                   const int Nstages,
                                   const dfloat scF,
                                   @restrict const dfloat *beta,
                                   const dfloat filtP,
                                   @restrict const dfloat *filtD,
                                   @restrict const dfloat *invWJ,
                                   @restrict const dfloat *invMM,
                                   @restrict const dfloat *ML_Phat_Beta,
                                   @restrict const dfloat *DhatL,
                                   @restrict const dfloat *PhatL,
                                   @restrict const dfloat *FL,
                                   @restrict       dfloat *DL,
                                   @restrict       dfloat *PL,
                                   @restrict       dfloat *filtPL){
  
  for(dlong e=0;e<Nelements;++e;@outer(0)){
    @shared dfloat s_tmp[p_Np];

    for(dlong n=0;n<p_Np;++n;@inner(0)){
      s_tmp[n] = ML_Phat_Beta[e*p_Np+n];
    }
    
    @barrier();

    for(dlong n=0;n<p_Np;++n;@inner(0)){
      dfloat Dres = 0;
      for(dlong m=0;m<p_Np;++m){
        Dres += invMM[n+m*p_Np]*s_tmp[m];
      }
      Dres *= invWJ[e];
    
      const dlong id = e*p_Np+n;
      DL[id] = DhatL[id] - dt*Dres +dt*scF*FL[id]; // NEGATE FOR LAPLACIAN

      dfloat Pres = 0, filtPres = 0;
      dfloat Pn = PhatL[id];
      
      for(int s=0;s<Nstages;++s){
        dfloat Dhats = DhatL[id+s*Nelements*p_Np];
        Pres += beta[s]*Dhats;
        filtPres += filtD[s]*Dhats; 
      }
      
      PL[id] = Pn + dt*Pres;
      filtPL[id] += dt*(filtP*Pn + dt*filtPres);
    }
  }
}

@kernel void waveInitialConditionsTet3D(const dlong N,
                                        const dfloat t,
                                        @restrict const dfloat *x,
                                        @restrict const dfloat *y,
                                        @restrict const dfloat *z,
                                        @restrict       dfloat *DL,
                                        @restrict       dfloat *PL){
  
  for(int n=0;n<N;++n;@tile(p_Np, @outer, @inner)){
    const dfloat xn = x[n];
    const dfloat yn = y[n];
    const dfloat zn = z[n];

    waveInitialConditionsFunction3D(t, xn, yn,  zn, DL[n], PL[n]);

  }
}

#if 0
@kernel void waveForcingTet3D(const dlong N,
                              const dfloat t,
                              const dfloat sigma,
                              const dfloat omega,
                              @restrict const dfloat *x,
                              @restrict const dfloat *y,
                              @restrict const dfloat *z,
                              @restrict       dfloat *FL){
  
  for(int n=0;n<N;++n;@tile(p_Np, @outer, @inner)){
    const dfloat xn = x[n];
    const dfloat yn = y[n];
    const dfloat zn = z[n];

    waveForcingFunction3D(t,xn, yn,  zn, sigma, omega, FL[n]);

  }
}



@kernel void waveStageRHSV2(const dlong Nelements,
                            const int Nstages,
                            const int stage,
                            const dfloat lambda,
                            const dfloat gamma,
                            const dfloat dt,
                            @restrict const dfloat *alpha,
                            @restrict const dfloat *WJL,
                            @restrict const dfloat *MM,
                            @restrict const dfloat *scratchL,
                            const dfloat scF,
                            @restrict const dfloat *FL,
                            @restrict const dfloat *DhatL,
                            @restrict const dfloat *PhatL,
                            @restrict       dfloat *DrhsL){
  
  for(dlong e=0;e<Nelements;++e;@outer(0)){

    @shared dfloat s_tmp[p_Np];

    for(int n=0;n<p_Np;++n;@inner(0)){
      dlong id = n + e*p_Np;
      dfloat res = dt*scF*FL[id];
      res += DhatL[id];
      s_tmp[n] = res;
    }

    @barrier();
    
    for(int n=0;n<p_Np;++n;@inner(0)){
      const dlong id = n + e*p_Np;
      dfloat Mres = 0;
      for(int m=0;m<p_Np;++m){
        Mres += MM[n+m*p_Np]*s_tmp[m];
      }
      Mres *= WJL[e];

      // note sign 
      Mres -= scratchL[id];

      DrhsL[id] = lambda*Mres;
    }
  }
}
#endif

@kernel void waveForcingTet3D(const dlong Nelements,
                              const int Nstages,
                              const int stage,
                              const dfloat t,
                              const dfloat dt,
                              @restrict const dfloat *esdirkA,
                              @restrict const dfloat *esdirkC,
                              const dfloat sigma,
                              const dfloat omega,
                              const dfloat lambda,
                              const dfloat scale,
                              @restrict const dfloat *x,
                              @restrict const dfloat *y,
                              @restrict const dfloat *z,
                              @restrict const dfloat *WJL,
                              @restrict const dfloat *MM,
                              @restrict       dfloat *FL){
  
  for(int e=0;e<Nelements;++e;@outer(0)){

    @shared dfloat s_rhs[p_Np];
    
    for(int n=0;n<p_Np;++n;@inner(0)){
      const dlong id = e*p_Np + n;
      const dfloat xn = x[id];
      const dfloat yn = y[id];
      const dfloat zn = z[id];

      int s = stage-1;
      int sp = (stage>Nstages) ? Nstages-1:s;
      dfloat rhs = 0;
      for(int i=0;i<=sp;++i){
        dfloat ti = t + dt*esdirkC[i];
        dfloat tmp = 0;
        waveForcingFunction3D(ti, xn, yn, zn, sigma, omega, tmp);
        rhs += esdirkA[s*Nstages + i]*tmp;
      }

      s_rhs[n] = rhs;
    }


    for(int n=0;n<p_Np;++n;@inner(0)){
      dfloat res = 0;
      for(int m=0;m<p_Np;++m){
        res += MM[n + m*p_Np]*s_rhs[m];
      }
      // increment forcing
      FL[e*p_Np+n] += dt*scale*lambda*WJL[e]*res;
    }
  }
}





