/*

The MIT License (MIT)

Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/


#define surfaceTermsIpdg(sk,face,m, i, j)                               \
{                                                                       \
  const dfloat nx = sgeo[sk*p_Nsgeo+p_NXID];                            \
  const dfloat ny = sgeo[sk*p_Nsgeo+p_NYID];                            \
  const dfloat nz = sgeo[sk*p_Nsgeo+p_NZID];                            \
  const dfloat WsJ = sgeo[sk*p_Nsgeo+p_WSJID];                          \
  const dfloat hinv= sgeo[sk*p_Nsgeo+p_IHID];                           \
                                                                        \
  dfloat dpdxP=0.f, dpdyP=0.f, dpdzP=0.f, pP=0.f;                       \
                                                                        \
  const int bc = EToB[face+p_Nfaces*e];                                 \
  if(bc==3) {                                                           \
    const dlong idM = vmapM[sk];                                        \
    insPressureDirichletConditions3D(bc,time, x[idM], y[idM], z[idM], nx, ny, nz, 0.f, &pP);\
    insPressureNeumannConditions3D(bc,time, x[idM], y[idM], z[idM], nx, ny, nz, 0.f, 0.f,0.f, &dpdxP, &dpdyP, &dpdzP);\
    for (int s=0;s<stage;s++) {\
      dfloat prkBn, ctime;\
      if (ARKswitch) {\
        prkBn = prkB[stage*(p_Nstages+1)+s];\
        ctime = time-(c[stage]-c[s])*dt;\
      } else {\
        prkBn = prkB[s];\
        ctime = time-(s+1)*dt;\
      }\
      \
      dfloat pPm, dpdxPm, dpdyPm, dpdzPm;\
      insPressureDirichletConditions3D(bc,ctime, x[idM], y[idM], z[idM], nx, ny, nz, 0.f, &pPm);\
      insPressureNeumannConditions3D(bc,ctime, x[idM], y[idM], z[idM], nx, ny, nz, 0.f, 0.f,0.f, &dpdxPm, &dpdyPm, &dpdzPm);\
      \
\
      pP    -= prkBn*pPm;\
      dpdxP -= prkBn*dpdxPm;\
      dpdyP -= prkBn*dpdyPm;\
      dpdzP -= prkBn*dpdzPm;\
    } \
  }                                                                     \
                                                                        \
  const dfloat dp = pP;                                                 \
                                                                        \
  s_dpdx[m][j][i] = WsJ*nx*dp;                                          \
  s_dpdy[m][j][i] = WsJ*ny*dp;                                          \
  s_dpdz[m][j][i] = WsJ*nz*dp;                                          \
                                                                        \
  s_rhsp[m][j][i] = -WsJ*(nx*dpdxP + ny*dpdyP + nz*dpdzP + tau*dp*hinv);\
}

// Actually solves for Pr increamnet not presssure
@kernel void insPressureIpdgBCHex3D(const dlong Nelements,
                                      @restrict const  dlong  *  vmapM,
                                      const dfloat tau,
                                      const dfloat time,
                                      const dfloat dt,
                                      const int stage,
                                      const int ARKswitch,
                                      @restrict const  dfloat *  c,
                                      @restrict const  dfloat *  prkB,
                                      @restrict const  dfloat *  x,
                                      @restrict const  dfloat *  y,
                                      @restrict const  dfloat *  z,
                                      @restrict const  dfloat *  vgeo,
                                      @restrict const  dfloat *  sgeo,
                                      @restrict const  int    *  EToB,
                                      @restrict const  dfloat *  D,
                                      @restrict const  dfloat *  LIFTT,
                                      @restrict const  dfloat *  MM,
                                            @restrict dfloat *  rhsP){
  
  for(dlong e=0;e<Nelements;++e;@outer(0)){

    @shared dfloat s_dpdx[2][p_Nq][p_Nq];
    @shared dfloat s_dpdy[2][p_Nq][p_Nq];
    @shared dfloat s_dpdz[2][p_Nq][p_Nq];
    @shared dfloat s_rhsp[2][p_Nq][p_Nq];

    @shared dfloat s_D[p_Nq][p_Nq];
    
    @exclusive dfloat r_dpdx[p_Nq], r_dpdy[p_Nq], r_dpdz[p_Nq], r_rhsp[p_Nq];
    @exclusive dfloat r_dpdt;

    // loop over slabs
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        #pragma unroll p_Nq
        for(int k=0;k<p_Nq;++k){
          r_dpdx[k] = 0.f;
          r_dpdy[k] = 0.f;
          r_dpdz[k] = 0.f;
          r_rhsp[k] = 0.f;
        }
          
        s_D[j][i] = D[j*p_Nq+i];
      }
    }
    
    @barrier("local");

    // face 0 & 5
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        const dlong sk0 = e*p_Nfp*p_Nfaces + 0*p_Nfp + j*p_Nq + i ;
        const dlong sk5 = e*p_Nfp*p_Nfaces + 5*p_Nfp + j*p_Nq + i ;             

        surfaceTermsIpdg(sk0,0,0,i,j);
        surfaceTermsIpdg(sk5,5,1,i,j); 
      }
    }

    @barrier("local");

    // face 0 & 5
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        //face 0
        r_dpdx[0] += s_dpdx[0][j][i];
        r_dpdy[0] += s_dpdy[0][j][i];
        r_dpdz[0] += s_dpdz[0][j][i];
        r_rhsp[0] += s_rhsp[0][j][i];

        //face 5
        r_dpdx[p_Nq-1] += s_dpdx[1][j][i];
        r_dpdy[p_Nq-1] += s_dpdy[1][j][i];
        r_dpdz[p_Nq-1] += s_dpdz[1][j][i];
        r_rhsp[p_Nq-1] += s_rhsp[1][j][i];
      }
    }

    @barrier("local");

    // face 1 & 3
    for(int k=0;k<p_Nq;++k;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        const dlong sk1 = e*p_Nfp*p_Nfaces + 1*p_Nfp + k*p_Nq + i ;
        const dlong sk3 = e*p_Nfp*p_Nfaces + 3*p_Nfp + k*p_Nq + i ;

        surfaceTermsIpdg(sk1,1,0,i,k);
        surfaceTermsIpdg(sk3,3,1,i,k); 
      }
    }

    @barrier("local");

    // face 1 & 3
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        if (j==0) {//face 1
          #pragma unroll p_Nq
          for (int k=0;k<p_Nq;k++) {
            r_dpdx[k] += s_dpdx[0][k][i];
            r_dpdy[k] += s_dpdy[0][k][i];
            r_dpdz[k] += s_dpdz[0][k][i];
            r_rhsp[k] += s_rhsp[0][k][i];
          }
        }
        if (j==p_Nq-1) {//face 3
          #pragma unroll p_Nq
          for (int k=0;k<p_Nq;k++) {
            r_dpdx[k] += s_dpdx[1][k][i];
            r_dpdy[k] += s_dpdy[1][k][i];
            r_dpdz[k] += s_dpdz[1][k][i];
            r_rhsp[k] += s_rhsp[1][k][i];
          }
        }
      }
    }

    @barrier("local");    

    // face 2 & 4
    for(int k=0;k<p_Nq;++k;@inner(1)){
      for(int j=0;j<p_Nq;++j;@inner(0)){

        const dlong sk2 = e*p_Nfp*p_Nfaces + 2*p_Nfp + k*p_Nq + j ;
        const dlong sk4 = e*p_Nfp*p_Nfaces + 4*p_Nfp + k*p_Nq + j ;
        
        surfaceTermsIpdg(sk2,2,0,j,k);
        surfaceTermsIpdg(sk4,4,1,j,k); 
      }
    }

    @barrier("local");

    // face 2 & 4
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        if (i==p_Nq-1) {//face 2
          #pragma unroll p_Nq
          for (int k=0;k<p_Nq;k++) {
            r_dpdx[k] += s_dpdx[0][k][j];
            r_dpdy[k] += s_dpdy[0][k][j];
            r_dpdz[k] += s_dpdz[0][k][j];
            r_rhsp[k] += s_rhsp[0][k][j];
          }
        }
        if (i==0) {//face 4
          #pragma unroll p_Nq
          for (int k=0;k<p_Nq;k++) {
            r_dpdx[k] += s_dpdx[1][k][j];
            r_dpdy[k] += s_dpdy[1][k][j];
            r_dpdz[k] += s_dpdz[1][k][j];
            r_rhsp[k] += s_rhsp[1][k][j];
          }
        }
      }
    }

    @barrier("local");

    //layer by layer
    #pragma unroll p_Nq
    for(int k=0;k<p_Nq;++k){
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){

          const dlong gid = i + j*p_Nq + k*p_Nq*p_Nq + e*p_Np*p_Nvgeo;     

          const dfloat drdx = vgeo[gid + p_RXID*p_Np];
          const dfloat drdy = vgeo[gid + p_RYID*p_Np];
          const dfloat drdz = vgeo[gid + p_RZID*p_Np];
          
          const dfloat dsdx = vgeo[gid + p_SXID*p_Np];
          const dfloat dsdy = vgeo[gid + p_SYID*p_Np];
          const dfloat dsdz = vgeo[gid + p_SZID*p_Np];

          const dfloat dtdx = vgeo[gid + p_TXID*p_Np];
          const dfloat dtdy = vgeo[gid + p_TYID*p_Np];
          const dfloat dtdz = vgeo[gid + p_TZID*p_Np];
          
          const dfloat dqdx = r_dpdx[k];
          const dfloat dqdy = r_dpdy[k];
          const dfloat dqdz = r_dpdz[k];
          
          s_dpdx[0][j][i] = (drdx*dqdx + drdy*dqdy + drdz*dqdz);
          s_dpdy[0][j][i] = (dsdx*dqdx + dsdy*dqdy + dsdz*dqdz);
          r_dpdt          = (dtdx*dqdx + dtdy*dqdy + dtdz*dqdz);
        }
      }

      @barrier("local");

      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){
          dfloat dr = 0, ds = 0;

          #pragma unroll p_Nq
          for(int n=0;n<p_Nq;++n){
            dr += s_D[n][i]*s_dpdx[0][j][n];
            r_rhsp[n] += s_D[k][n]*r_dpdt; // DT(m,k)*ut(i,j,k,e)
            ds += s_D[n][j]*s_dpdy[0][n][i];
          }
          
          r_rhsp[k] += dr + ds;
        }
      }

      @barrier("local");
    }

    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        
        #pragma unroll p_Nq
        for(int k=0;k<p_Nq;++k){
          const dlong id = e*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;
          rhsP[id] -= r_rhsp[k];
        }
      }
    }
  }
}

#define surfaceTerms(sk,face,m, i, j)                                   \
{                                                                       \
  const dlong idM = vmapM[sk];                                          \
  const dfloat nx = sgeo[sk*p_Nsgeo+p_NXID];                            \
  const dfloat ny = sgeo[sk*p_Nsgeo+p_NYID];                            \
  const dfloat nz = sgeo[sk*p_Nsgeo+p_NZID];                            \
  const dfloat WsJ = sgeo[sk*p_Nsgeo+p_WSJID];                          \
                                                                        \
  dfloat dpdxP=0.f, dpdyP=0.f, dpdzP=0.f, pP=0.f;                       \
                                                                        \
  const int bc = mapB[idM];                                             \
  if(bc==3) {                                                           \
    insPressureDirichletConditions3D(bc,time, x[idM], y[idM], z[idM], nx, ny, nz, 0.f, &pP);\
    insPressureNeumannConditions3D(bc,time, x[idM], y[idM], z[idM], nx, ny, nz, 0.f, 0.f,0.f, &dpdxP, &dpdyP, &dpdzP);\
    for (int s=0;s<stage;s++) {\
      dfloat prkBn, ctime;\
      if (ARKswitch) {\
        prkBn = prkB[stage*(p_Nstages+1)+s];\
        ctime = time-(c[stage]-c[s])*dt;\
      } else {\
        prkBn = prkB[s];\
        ctime = time-(s+1)*dt;\
      }\
      \
      dfloat pPm, dpdxPm, dpdyPm, dpdzPm;\
      insPressureDirichletConditions3D(bc,ctime, x[idM], y[idM], z[idM], nx, ny, nz, 0.f, &pPm);\
      insPressureNeumannConditions3D(bc,ctime, x[idM], y[idM], z[idM], nx, ny, nz, 0.f, 0.f,0.f, &dpdxPm, &dpdyPm, &dpdzPm);\
      \
\
      pP    -= prkBn*pPm;\
      dpdxP -= prkBn*dpdxPm;\
      dpdyP -= prkBn*dpdyPm;\
      dpdzP -= prkBn*dpdzPm;\
    } \
  }                                                                     \
                                                                        \
  s_p  [m][j][i] = pP;                                                  \
  s_ndp[m][j][i] = -WsJ*(nx*dpdxP + ny*dpdyP + nz*dpdzP);               \
}

//RHS contributions for continuous solver
@kernel void insPressureBCHex3D(const dlong Nelements,
                              @restrict const  dfloat *  ggeo,
                              @restrict const  dfloat *  sgeo,
                              @restrict const  dfloat *  D,
                              @restrict const  dfloat *  S,
                              @restrict const  dlong  *  vmapM,
				@restrict const  int  *  EToB,
                              @restrict const  dlong  *  sMT,
                              const dfloat time,
                              const dfloat dt,
                              const int stage,
                              const int ARKswitch,
                              @restrict const  dfloat *  c,
                              @restrict const  dfloat *  prkB,
                              @restrict const  dfloat *  x,
                              @restrict const  dfloat *  y,
                              @restrict const  dfloat *  z,
                              @restrict const  int    *  mapB,
                                   @restrict dfloat  *  rhsP){
  
  for(dlong e=0; e<Nelements; ++e; @outer(0)){

    @shared dfloat s_D[p_Nq][p_Nq];
    @shared dfloat s_p[2][p_Nq][p_Nq];
    @shared dfloat s_ndp[2][p_Nq][p_Nq];

    @exclusive dfloat r_pt, r_Gpt;
    @exclusive dfloat r_p[p_Nq]; // register array to hold u(i,j,0:N) private to thread
    @exclusive dfloat r_rhs[p_Nq];// array for results Au(i,j,0:N)

    dfloat r_G00, r_G01, r_G02, r_G11, r_G12, r_G22;

    // for all face nodes of all elements
    // face 0 & 5
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        //load D into local memory
        // s_D[i][j] = d \phi_i at node j
        s_D[j][i] = D[p_Nq*j+i]; // D is column major

        #pragma unroll p_Nq
        for(int k=0;k<p_Nq;++k){
          r_p[k] = 0.;
          r_rhs[k] = 0.;
        }

        const dlong sk0 = e*p_Nfp*p_Nfaces + 0*p_Nfp + i + j*p_Nq;
        const dlong sk5 = e*p_Nfp*p_Nfaces + 5*p_Nfp + i + j*p_Nq;

        surfaceTerms(sk0,0,0,i,j);
        surfaceTerms(sk5,5,1,i,j);
      }
    }

    @barrier("local");

    // face 0 & 5
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        //face 0
        r_p[0] = s_p[0][j][i];

	if(EToB[e*p_Nfaces+0]>0)
	  r_rhs[0] += s_ndp[0][j][i];

        //face 5
        r_p[p_Nq-1] = s_p[1][j][i];

	if(EToB[e*p_Nfaces+5]>0)
	  r_rhs[p_Nq-1] += s_ndp[1][j][i];
      }
    }

    @barrier("local");    

    // face 1 & 3
    for(int k=0;k<p_Nq;++k;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        const dlong sk1 = e*p_Nfp*p_Nfaces + 1*p_Nfp + i + k*p_Nq;
        const dlong sk3 = e*p_Nfp*p_Nfaces + 3*p_Nfp + i + k*p_Nq;

        surfaceTerms(sk1,1,0,i,k);
        surfaceTerms(sk3,3,1,i,k);
      }
    }

    @barrier("local");

    // face 1 & 3
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        if (j==0) {//face 1
          #pragma unroll p_Nq
          for (int k=0;k<p_Nq;k++) {
            r_p[k] = s_p[0][k][i];

	    if(EToB[e*p_Nfaces+1]>0)
	      r_rhs[k] += s_ndp[0][k][i];
          }
        }
        if (j==p_Nq-1) {//face 3
          #pragma unroll p_Nq
          for (int k=0;k<p_Nq;k++) {
            r_p[k] = s_p[1][k][i];

	    if(EToB[e*p_Nfaces+3]>0)
	      r_rhs[k] += s_ndp[1][k][i];
          }
        }
      }
    }

    @barrier("local");    

    // face 2 & 4
    for(int k=0;k<p_Nq;++k;@inner(1)){
      for(int j=0;j<p_Nq;++j;@inner(0)){
        const dlong sk2 = e*p_Nfp*p_Nfaces + 2*p_Nfp + j + k*p_Nq;
        const dlong sk4 = e*p_Nfp*p_Nfaces + 4*p_Nfp + j + k*p_Nq;

        surfaceTerms(sk2,2,0,j,k);
        surfaceTerms(sk4,4,1,j,k);
      }
    }

    @barrier("local");

    // face 2 & 4
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        if (i==p_Nq-1) {//face 2
          #pragma unroll p_Nq
          for (int k=0;k<p_Nq;k++) {
            r_p[k] = s_p[0][k][j];

	    if(EToB[e*p_Nfaces+2]>0)
	      r_rhs[k] += s_ndp[0][k][j];
          }
        }
        if (i==0) {//face 4
          #pragma unroll p_Nq
          for (int k=0;k<p_Nq;k++) {
            r_p[k] = s_p[1][k][j];

	    if(EToB[e*p_Nfaces+4]>0)
	      r_rhs[k] += s_ndp[1][k][j];
          }
        }
      }
    }

    @barrier("local"); 


    // Layer by layer
    #pragma unroll p_Nq
      for(int k = 0;k < p_Nq; k++){
        for(int j=0;j<p_Nq;++j;@inner(1)){
          for(int i=0;i<p_Nq;++i;@inner(0)){

            // prefetch geometric factors
            const dlong gbase = e*p_Nggeo*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;

            r_G00 = ggeo[gbase+p_G00ID*p_Np];
            r_G01 = ggeo[gbase+p_G01ID*p_Np];
            r_G02 = ggeo[gbase+p_G02ID*p_Np];

            r_G11 = ggeo[gbase+p_G11ID*p_Np];
            r_G12 = ggeo[gbase+p_G12ID*p_Np];
            r_G22 = ggeo[gbase+p_G22ID*p_Np];
          }
        }

        @barrier("local");

        for(int j=0;j<p_Nq;++j;@inner(1)){
          for(int i=0;i<p_Nq;++i;@inner(0)){

            // share u(:,:,k)
            s_p[0][j][i] = r_p[k];

            r_pt = 0;

            #pragma unroll p_Nq
              for(int m = 0; m < p_Nq; m++) {
                r_pt += s_D[k][m]*r_p[m];
              }
          }
        }

        @barrier("local");

        for(int j=0;j<p_Nq;++j;@inner(1)){
          for(int i=0;i<p_Nq;++i;@inner(0)){

            dfloat pr = 0.f;
            dfloat ps = 0.f;

            #pragma unroll p_Nq
              for(int m = 0; m < p_Nq; m++) {
                pr += s_D[i][m]*s_p[0][j][m];
                ps += s_D[j][m]*s_p[0][m][i];
              }

            //reuse the s_ndp array
            s_ndp[0][j][i] = (r_G01*pr + r_G11*ps + r_G12*r_pt);
            s_ndp[1][j][i] = (r_G00*pr + r_G01*ps + r_G02*r_pt);

            // put this here for a performance bump
            r_Gpt = (r_G02*pr + r_G12*ps + r_G22*r_pt);
          }
        }

        @barrier("local");

        for(int j=0;j<p_Nq;++j;@inner(1)){
          for(int i=0;i<p_Nq;++i;@inner(0)){
            dfloat Apk=0.f;

            #pragma unroll p_Nq
              for(int m = 0; m < p_Nq; m++){
                Apk      += s_D[m][j]*s_ndp[0][m][i];
                r_rhs[m] += s_D[k][m]*r_Gpt; // DT(m,k)*ut(i,j,k,e)
                Apk      += s_D[m][i]*s_ndp[1][j][m];
              }

            r_rhs[k] += Apk;
          }
        }
      }

    // write out

    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        #pragma unroll p_Nq
          for(int k = 0; k < p_Nq; k++){
            const dlong id = e*p_Np +k*p_Nq*p_Nq+ j*p_Nq + i;
            rhsP[id] -= r_rhs[k];
          }
      }
    }
  }
}

@kernel void insPressureAddBCHex3D(const dlong Nelements,
                                  const dfloat time,
                                  const dfloat dt,
                                  const int stage,
                                  const int ARKswitch,
                                  @restrict const  dfloat *  c,
                                  @restrict const  dfloat *  prkB,
                                  @restrict const  dfloat *  x,
                                  @restrict const  dfloat *  y,
                                  @restrict const  dfloat *  z,
                                  @restrict const  dlong  *  vmapM,
                                  @restrict const  int    *  mapB,
                                        @restrict dfloat *  P){
  
  for(dlong e=0;e<Nelements;e++;@outer(0)){
    for(int n=0;n<p_Nfp*p_Nfaces;++n;@inner(0)){
      const dlong idM = vmapM[e*p_Nfp*p_Nfaces + n];
      const int bc = mapB[idM];

      if(bc==3) {
        dfloat pP = 0.f;
        insPressureDirichletConditions3D(bc,time, x[idM], y[idM], z[idM], nx, ny, nz, 0.f, &pP);
        
        for (int s=0;s<stage;s++) {
          dfloat prkBn, ctime;
          if (ARKswitch) {
            prkBn = prkB[stage*(p_Nstages+1)+s];
            ctime = time-(c[stage]-c[s])*dt;
          } else {
            prkBn = prkB[s];
            ctime = time-(s+1)*dt;
          }
          
          dfloat pPm;
          insPressureDirichletConditions3D(bc,ctime, x[idM], y[idM], z[idM], nx, ny, nz, 0.f, &pPm);
         
          pP    -= prkBn*pPm;
        }

        P[idM] = pP;
      }    
    }
  }
}
