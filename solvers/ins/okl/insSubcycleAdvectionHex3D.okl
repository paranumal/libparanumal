/*

The MIT License (MIT)

Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/


// compute NU = -div(uxu) in collocation way (weak form)
@kernel void insSubcycleAdvectionVolumeHex3D(const dlong Nelements,
                                   @restrict const  dfloat *  vgeo,
                                   @restrict const  dfloat *  DT,
                                   @restrict const  dfloat *  Ue,
                                   @restrict const  dfloat *  U,
                                         @restrict  dfloat *  RHS){

  for(dlong e=0; e<Nelements; ++e; @outer(0)) {

    @shared dfloat s_F11[p_Nq][p_Nq];
    @shared dfloat s_F12[p_Nq][p_Nq];
    @shared dfloat s_F13[p_Nq][p_Nq];
    @shared dfloat s_F21[p_Nq][p_Nq];
    @shared dfloat s_F22[p_Nq][p_Nq];
    @shared dfloat s_F23[p_Nq][p_Nq];
    @shared dfloat s_F31[p_Nq][p_Nq];
    @shared dfloat s_F32[p_Nq][p_Nq];
    @shared dfloat s_F33[p_Nq][p_Nq];

    @shared dfloat s_DT[p_Nq][p_Nq];

    @exclusive dfloat r_NU[p_Nq], r_NV[p_Nq], r_NW[p_Nq];

    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        s_DT[j][i] = DT[i+j*p_Nq];

        #pragma unroll p_Nq
          for(int k=0;k<p_Nq;++k){
            r_NU[k] = 0.;
            r_NV[k] = 0.;
            r_NW[k] = 0.;
          }
      }
    }

    @barrier("local");

    #pragma unroll p_Nq
    for(int k=0;k<p_Nq;++k){

      //fetch slice
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){
          const dlong gid = e*p_Np*p_Nvgeo+ k*p_Nq*p_Nq + j*p_Nq +i;
          const dfloat drdx = vgeo[gid + p_RXID*p_Np];
          const dfloat drdy = vgeo[gid + p_RYID*p_Np];
          const dfloat drdz = vgeo[gid + p_RZID*p_Np];
          const dfloat dsdx = vgeo[gid + p_SXID*p_Np];
          const dfloat dsdy = vgeo[gid + p_SYID*p_Np];
          const dfloat dsdz = vgeo[gid + p_SZID*p_Np];
          const dfloat dtdx = vgeo[gid + p_TXID*p_Np];
          const dfloat dtdy = vgeo[gid + p_TYID*p_Np];
          const dfloat dtdz = vgeo[gid + p_TZID*p_Np];
          const dfloat JW   = vgeo[gid + p_JWID*p_Np];

          const dlong id = e*p_Np*p_NVfields + k*p_Nq*p_Nq + j*p_Nq + i;
          const dfloat Un = Ue[id+0*p_Np];
          const dfloat Vn = Ue[id+1*p_Np];
          const dfloat Wn = Ue[id+2*p_Np];
          const dfloat Udn = U[id+0*p_Np];
          const dfloat Vdn = U[id+1*p_Np];
          const dfloat Wdn = U[id+2*p_Np];

          const dfloat cUn = JW*(drdx*Un+drdy*Vn+drdz*Wn);
          const dfloat cVn = JW*(dsdx*Un+dsdy*Vn+dsdz*Wn);
          const dfloat cWn = JW*(dtdx*Un+dtdy*Vn+dtdz*Wn);

          s_F11[j][i] = cUn*Udn;
          s_F12[j][i] = cVn*Udn;
          s_F13[j][i] = cWn*Udn;
          s_F21[j][i] = cUn*Vdn;
          s_F22[j][i] = cVn*Vdn;
          s_F23[j][i] = cWn*Vdn;
          s_F31[j][i] = cUn*Wdn;
          s_F32[j][i] = cVn*Wdn;
          s_F33[j][i] = cWn*Wdn;
        }
      }

      @barrier("local");

      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){
          #pragma unroll p_Nq
            for (int n=0;n<p_Nq;n++) {
              const dfloat Dr = s_DT[n][i];
              const dfloat Ds = s_DT[n][j];
              const dfloat Dt = s_DT[k][n];
              r_NU[k] += Dr*s_F11[j][n];
              r_NV[k] += Dr*s_F21[j][n];
              r_NW[k] += Dr*s_F31[j][n];

              r_NU[k] += Ds*s_F12[n][i];
              r_NV[k] += Ds*s_F22[n][i];
              r_NW[k] += Ds*s_F32[n][i];

              r_NU[n] += Dt*s_F13[j][i];
              r_NV[n] += Dt*s_F23[j][i];
              r_NW[n] += Dt*s_F33[j][i];
            }
        }
      }

      @barrier("local");
    } //k loop

    //write out
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        #pragma unroll p_Nq
          for(int k=0;k<p_Nq;++k){
            const dlong gid = e*p_Np*p_Nvgeo+ k*p_Nq*p_Nq + j*p_Nq +i;
            const dfloat invJW = vgeo[gid + p_IJWID*p_Np];

            const dlong id = e*p_Np*p_NVfields + k*p_Nq*p_Nq + j*p_Nq + i;
            RHS[id+0*p_Np] = invJW*r_NU[k];
            RHS[id+1*p_Np] = invJW*r_NV[k];
            RHS[id+2*p_Np] = invJW*r_NW[k];
          }
      }
    }
  }
}


#define surfaceTerms(sk,face,m, i, j)                                   \
{                                                                       \
  const dlong  idM = vmapM[sk];                                         \
  const dlong  idP = vmapP[sk];                                         \
                                                                        \
  const dfloat nx = sgeo[sk*p_Nsgeo+p_NXID];                            \
  const dfloat ny = sgeo[sk*p_Nsgeo+p_NYID];                            \
  const dfloat nz = sgeo[sk*p_Nsgeo+p_NZID];                            \
  const dfloat sJ = sgeo[sk*p_Nsgeo+p_SJID];                            \
  const dfloat invWJ = sgeo[sk*p_Nsgeo+p_WIJID];                        \
                                                                        \
  const dlong eM = e;                                                   \
  const dlong eP = idP/p_Np;                                            \
  const int vidM = idM%p_Np;                                            \
  const int vidP = idP%p_Np;                                            \
                                                                        \
  const dlong qbaseM = eM*p_Np*p_NVfields + vidM;                       \
  const dlong qbaseP = eP*p_Np*p_NVfields + vidP;                       \
                                                                        \
  const dfloat uM  = Ue[qbaseM+0*p_Np],  vM  = Ue[qbaseM+1*p_Np],  wM  = Ue[qbaseM+2*p_Np];              \
  const dfloat uP  = Ue[qbaseP+0*p_Np],  vP  = Ue[qbaseP+1*p_Np],  wP  = Ue[qbaseP+2*p_Np];              \
  const dfloat udM = U[qbaseM+0*p_Np], vdM = U[qbaseM+1*p_Np], wdM = U[qbaseM+2*p_Np];             \
        dfloat udP = U[qbaseP+0*p_Np], vdP = U[qbaseP+1*p_Np], wdP = U[qbaseP+2*p_Np];             \
                                                                        \
  const int bc = EToB[face+p_Nfaces*e];                                 \
  if(bc>0) {                                                            \
    insVelocityDirichletConditions3D(bc, nu, time, x[vmapM[sk]], y[vmapM[sk]], z[vmapM[sk]], nx, ny, nz, uM, vM, wM, &udP, &vdP, &wdP); \
  }                                                                     \
                                                                        \
  const dfloat unM   = fabs(nx*uM + ny*vM + nz*wM);                 \
  const dfloat unP   = fabs(nx*uP + ny*vP + nz*wP);                 \
  const dfloat unMax = (unM > unP) ? unM : unP;                         \
                                                                        \
  const dfloat sc = invWJ * sJ;                                         \
  s_fluxNU[m][j][i] = sc*(.5f*(nx*(uP*udP + uM*udM)                     \
                             + ny*(vP*udP + vM*udM)                     \
                             + nz*(wP*udP + wM*udM)  + unMax*(udM-udP) )); \
  s_fluxNV[m][j][i] = sc*(.5f*(nx*(uP*vdP + uM*vdM)                     \
                             + ny*(vP*vdP + vM*vdM)                     \
                             + nz*(wP*vdP + wM*vdM)  + unMax*(vdM-vdP) )); \
  s_fluxNW[m][j][i] = sc*(.5f*(nx*(uP*wdP + uM*wdM)                     \
                             + ny*(vP*wdP + vM*wdM)                     \
                             + nz*(wP*wdP + wM*wdM)  + unMax*(wdM-wdP) )); \
}

@kernel void insSubcycleAdvectionSurfaceHex3D(const dlong Nelements,
                                    @restrict const  dfloat *  sgeo,
                                    @restrict const  dfloat *  LIFT,
                                    @restrict const  dlong  *  vmapM,
                                    @restrict const  dlong  *  vmapP,
                                    @restrict const  int    *  EToB,
                                    const dfloat time,
                                    @restrict const  dfloat *  x,
                                    @restrict const  dfloat *  y,
                                    @restrict const  dfloat *  z,
                                    const dfloat nu,
                                    @restrict const  dfloat *  Ue,
                                    @restrict const  dfloat *  U,
                                          @restrict  dfloat *  RHS){

  // for all elements
  for(dlong e=0;e<Nelements;e++;@outer(0)){
    // @shared storage for flux terms
    @shared dfloat s_fluxNU[2][p_Nq][p_Nq];
    @shared dfloat s_fluxNV[2][p_Nq][p_Nq];
    @shared dfloat s_fluxNW[2][p_Nq][p_Nq];

    @exclusive dfloat r_NU[p_Nq], r_NV[p_Nq], r_NW[p_Nq];

    // for all face nodes of all elements
    // face 0 & 5
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        #pragma unroll p_Nq
        for(int k=0;k<p_Nq;++k){
          r_NU[k] = 0.;
          r_NV[k] = 0.;
          r_NW[k] = 0.;
        }

        const dlong sk0 = e*p_Nfp*p_Nfaces + 0*p_Nfp + i + j*p_Nq;
        const dlong sk5 = e*p_Nfp*p_Nfaces + 5*p_Nfp + i + j*p_Nq;

        surfaceTerms(sk0,0,0,i,j);
        surfaceTerms(sk5,5,1,i,j);
      }
    }

    @barrier("local");

    // face 0 & 5
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        //face 0
        r_NU[0] += s_fluxNU[0][j][i];
        r_NV[0] += s_fluxNV[0][j][i];
        r_NW[0] += s_fluxNW[0][j][i];

        //face 5
        r_NU[p_Nq-1] += s_fluxNU[1][j][i];
        r_NV[p_Nq-1] += s_fluxNV[1][j][i];
        r_NW[p_Nq-1] += s_fluxNW[1][j][i];
      }
    }

    @barrier("local");

    // face 1 & 3
    for(int k=0;k<p_Nq;++k;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        const dlong sk1 = e*p_Nfp*p_Nfaces + 1*p_Nfp + i + k*p_Nq;
        const dlong sk3 = e*p_Nfp*p_Nfaces + 3*p_Nfp + i + k*p_Nq;

        surfaceTerms(sk1,1,0,i,k);
        surfaceTerms(sk3,3,1,i,k);
      }
    }

    @barrier("local");

    // face 1 & 3
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        if (j==0) {//face 1
          #pragma unroll p_Nq
          for (int n=0;n<p_Nq;n++) {
            r_NU[n] += s_fluxNU[0][n][i];
            r_NV[n] += s_fluxNV[0][n][i];
            r_NW[n] += s_fluxNW[0][n][i];
          }
        }
        if (j==p_Nq-1) {//face 3
          #pragma unroll p_Nq
          for (int n=0;n<p_Nq;n++) {
            r_NU[n] += s_fluxNU[1][n][i];
            r_NV[n] += s_fluxNV[1][n][i];
            r_NW[n] += s_fluxNW[1][n][i];
          }
        }
      }
    }

    @barrier("local");

    // face 2 & 4
    for(int k=0;k<p_Nq;++k;@inner(1)){
      for(int j=0;j<p_Nq;++j;@inner(0)){
        const dlong sk2 = e*p_Nfp*p_Nfaces + 2*p_Nfp + j + k*p_Nq;
        const dlong sk4 = e*p_Nfp*p_Nfaces + 4*p_Nfp + j + k*p_Nq;

        surfaceTerms(sk2,2,0,j,k);
        surfaceTerms(sk4,4,1,j,k);
      }
    }

    @barrier("local");

    // face 2 & 4
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        if (i==p_Nq-1) {//face 2
          #pragma unroll p_Nq
          for (int n=0;n<p_Nq;n++) {
            r_NU[n] += s_fluxNU[0][n][j];
            r_NV[n] += s_fluxNV[0][n][j];
            r_NW[n] += s_fluxNW[0][n][j];
          }
        }
        if (i==0) {//face 4
          #pragma unroll p_Nq
          for (int n=0;n<p_Nq;n++) {
            r_NU[n] += s_fluxNU[1][n][j];
            r_NV[n] += s_fluxNV[1][n][j];
            r_NW[n] += s_fluxNW[1][n][j];
          }
        }
      }
    }

    @barrier("local");

    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        #pragma unroll p_Nq
        for(int k=0;k<p_Nq;++k){
          const dlong id = e*p_Np*p_NVfields + k*p_Nq*p_Nq + j*p_Nq + i;

          RHS[id+0*p_Np] -= r_NU[k];
          RHS[id+1*p_Np] -= r_NV[k];
          RHS[id+2*p_Np] -= r_NW[k];
        }
      }
    }
  }
}
#undef surfaceTerms
