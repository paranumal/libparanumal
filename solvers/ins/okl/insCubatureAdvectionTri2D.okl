/*

The MIT License (MIT)

Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

// compute NU = -div(uxu) with cubature
@kernel void insAdvectionCubatureVolumeTri2D(const dlong Nelements,
                                            @restrict const  dfloat *  vgeo,
                                            @restrict const  dfloat *  cubvgeo,
                                            @restrict const  dfloat *  cubD,
                                            @restrict const  dfloat *  cubPDT,
                                            @restrict const  dfloat *  cubInterp,
                                            @restrict const  dfloat *  cubProject,
                                            const dfloat alpha,
                                            const dfloat beta,
                                            @restrict const  dfloat *  U,
                                                   @restrict dfloat *  RHS){

  for(dlong eo=0;eo<Nelements;eo+=p_cubNblockV;@outer(0)){  // for all elements

    // Hold Flux Vector on Shared, use symmetry f21 = f12
    @shared dfloat s_U[p_NblockV][p_Np];
    @shared dfloat s_V[p_NblockV][p_Np];
    @shared dfloat s_cF11[p_NblockV][p_cubNp];
    @shared dfloat s_cF12[p_NblockV][p_cubNp];
    @shared dfloat s_cF22[p_NblockV][p_cubNp];

    for(int es=0;es<p_cubNblockV;++es;@inner(1)){// for all elements in block
      for(int n=0;n<p_cubNp;++n;@inner(0)){      // for all nodes in this element
        const dlong e = eo+es; // element in block
        if(e<Nelements){
          if(n<p_Np){
            const dlong id = e*p_Np*p_NVfields+n;
            s_U[es][n] = U[id+0*p_Np];
            s_V[es][n] = U[id+1*p_Np];
          }
        }
      }
    }

    @barrier("local");

    for(int es=0;es<p_cubNblockV;++es;@inner(1)){// for all elements in block
      for(int n=0;n<p_cubNp;++n;@inner(0)){     // for all nodes in this element
        const dlong e = eo+es; // element in block
        if(e<Nelements && n<p_cubNp){
          dfloat cU = 0, cV = 0;
          #pragma unroll p_Np
            for(int i=0;i<p_Np;++i){
              const dfloat cIni = cubInterp[n+i*p_cubNp];
              cU += cIni*s_U[es][i];
              cV += cIni*s_V[es][i];
            }

          s_cF11[es][n] = cU*cU;
          s_cF12[es][n] = cU*cV;
          s_cF22[es][n] = cV*cV;
        }
      }
    }

    // Make sure all node data is loaded into @shared
    @barrier("local");

    for(int es=0;es<p_cubNblockV;++es;@inner(1)){// for all elements in block
      for(int n=0;n<p_cubNp;++n;@inner(0)){     // for all nodes in this element
        const dlong e = eo+es;
        if(e<Nelements && n<p_Np){
          // prefetch geometric factors (constant on triangle)
          const dfloat drdx = vgeo[e*p_Nvgeo + p_RXID];
          const dfloat drdy = vgeo[e*p_Nvgeo + p_RYID];
          const dfloat dsdx = vgeo[e*p_Nvgeo + p_SXID];
          const dfloat dsdy = vgeo[e*p_Nvgeo + p_SYID];
          // compute 'r' and 's' derivatives of (q_m) at node n
          dfloat df11dr = 0.f, df11ds = 0.f;
          dfloat df12dr = 0.f, df12ds = 0.f;
          dfloat df22dr = 0.f, df22ds = 0.f;

          #pragma unroll p_cubNp
            for(int i=0;i<p_cubNp;++i){
              const dfloat cDrWni = cubPDT[n+i*p_Np+0*p_cubNp*p_Np];
              const dfloat cDsWni = cubPDT[n+i*p_Np+1*p_cubNp*p_Np];

              df11dr += cDrWni*s_cF11[es][i];
              df11ds += cDsWni*s_cF11[es][i];

              df12dr += cDrWni*s_cF12[es][i];
              df12ds += cDsWni*s_cF12[es][i];

              df22dr += cDrWni*s_cF22[es][i];
              df22ds += cDsWni*s_cF22[es][i];
            }

          const dfloat nu = drdx*df11dr + dsdx*df11ds + drdy*df12dr + dsdy*df12ds;
          const dfloat nv = drdx*df12dr + dsdx*df12ds + drdy*df22dr + dsdy*df22ds;

          // Update
          const dlong id = e*p_Np*p_NVfields+n;
          if (beta!=0.0) {
            RHS[id+0*p_Np] = beta*RHS[id+0*p_Np] + alpha*nu; // note  change in sign
            RHS[id+1*p_Np] = beta*RHS[id+1*p_Np] + alpha*nv;
          } else {
            RHS[id+0*p_Np] = alpha*nu; // note  change in sign
            RHS[id+1*p_Np] = alpha*nv;
          }
        }
      }
    }
  }
}


@kernel void insAdvectionCubatureSurfaceTri2D(const dlong Nelements,
                                             @restrict const  dfloat *  vgeo,
                                             @restrict const  dfloat *  sgeo,
                                             @restrict const  dfloat *  intInterp, // interpolate to integration nodes
                                             @restrict const  dfloat *  intLIFT, // lift from integration to interpolation nodes
                                             @restrict const  dlong  *  vmapM,
                                             @restrict const  dlong  *  vmapP,
                                             @restrict const  int    *  EToB,
                                             const dfloat time,
                                             @restrict const  dfloat *  intx, // integration nodes
                                             @restrict const  dfloat *  inty,
                                             @restrict const  dfloat *  intz,
                                             const dfloat nu,
                                             const dfloat alpha,
                                             @restrict const  dfloat *  U,
                                                   @restrict  dfloat *  RHS){

  // for all elements
  for(dlong eo=0;eo<Nelements;eo+=p_cubNblockS;@outer(0)){

    // @shared storage for flux terms
    @shared dfloat s_UM[p_NblockS][p_NfacesNfp];
    @shared dfloat s_VM[p_NblockS][p_NfacesNfp];
    @shared dfloat s_UP[p_NblockS][p_NfacesNfp];
    @shared dfloat s_VP[p_NblockS][p_NfacesNfp];
    @shared dfloat s_iFluxNx[p_NblockS][p_intNfpNfaces];
    @shared dfloat s_iFluxNy[p_NblockS][p_intNfpNfaces];

    // for all face nodes of all elements
    for(int es=0;es<p_cubNblockS;++es;@inner(1)){
      for(int n=0;n<p_cubMaxNodes;++n;@inner(0)){
        const dlong e = eo + es;
        if(e<Nelements && n<(p_Nfaces*p_Nfp)){
          const dlong id  = e*p_Nfp*p_Nfaces + n;
          const dlong idM = vmapM[id];
          const dlong idP = vmapP[id];

          // load traces
          const dlong eM = e;
          const dlong eP = idP/p_Np;
          const int vidM = idM%p_Np;
          const int vidP = idP%p_Np;

          const dlong qbaseM = eM*p_Np*p_NVfields + vidM;
          const dlong qbaseP = eP*p_Np*p_NVfields + vidP;

          // load negative and positive trace node values of velocity
          s_UM[es][n] = U[qbaseM+0*p_Np];
          s_VM[es][n] = U[qbaseM+1*p_Np];
          s_UP[es][n] = U[qbaseP+0*p_Np];
          s_VP[es][n] = U[qbaseP+1*p_Np];
        }
      }
    }

    @barrier("local");

    // interpolate to surface integration nodes
    for(int es=0;es<p_cubNblockS;++es;@inner(1)){
      for(int n=0;n<p_cubMaxNodes;++n;@inner(0)){
        const dlong e = eo + es;
        if(e<Nelements && n<(p_Nfaces*p_intNfp)){
          const int face = n/p_intNfp; // find face that owns this integration node

          // load surface geofactors for this face
          const dlong sid = p_Nsgeo*(e*p_Nfaces+face);
          const dfloat nx   = sgeo[sid+p_NXID];
          const dfloat ny   = sgeo[sid+p_NYID];
          const dfloat sJ   = sgeo[sid+p_SJID];
          const dfloat invJ = sgeo[sid+p_IJID];

          dfloat iUM = 0.f, iVM = 0.f;
          dfloat iUP = 0.f, iVP = 0.f;

          // local block interpolation (face nodes to integration nodes)
          #pragma unroll p_Nfp
          for(int m=0;m<p_Nfp;++m){
            const dfloat iInm = intInterp[n+m*p_Nfaces*p_intNfp];
            const int fm = face*p_Nfp+m;
            iUM += iInm*s_UM[es][fm];
            iVM += iInm*s_VM[es][fm];

            iUP += iInm*s_UP[es][fm];
            iVP += iInm*s_VP[es][fm];
          }

          // apply boundary condition
          const int bc = EToB[face+p_Nfaces*e];
          if(bc>0){
            insVelocityDirichletConditions2D(bc,nu,time, intx[n+e*p_Nfaces*p_intNfp],inty[n+e*p_Nfaces*p_intNfp], nx, ny, iUM,iVM, &iUP, &iVP);
          }

          // Find max normal velocity on the face
          const dfloat unM   = fabs(nx*iUM + ny*iVM);
          const dfloat unP   = fabs(nx*iUP + ny*iVP);
          const dfloat unMax = (unM > unP) ? unM : unP;

          // evaluate "flux" terms: LLF
          const dfloat sc = invJ * sJ ;  // notice sign changes in flux because of weak form
          s_iFluxNx[es][n] = sc*(.5f*(   nx*(iUP*iUP + iUM*iUM)
                                       + ny*(iUP*iVP + iUM*iVM) + unMax*(iUM-iUP) ));
          s_iFluxNy[es][n] = sc*(.5f*(   nx*(iVP*iUP + iVM*iUM)
                                       + ny*(iVP*iVP + iVM*iVM) + unMax*(iVM-iVP) ));
        }
      }
    }

    // wait for all @shared memory writes of the previous inner loop to complete
    @barrier("local");

    // lift from surface integration to volume nodes
    for(int es=0;es<p_cubNblockS;++es;@inner(1)){
      for(int n=0;n<p_cubMaxNodes;++n;@inner(0)){
        const dlong e = eo + es;
        if(e<Nelements && n<p_Np ){
          const dlong id = n + p_NVfields*p_Np*e;

          dfloat NUn = 0.0;
          dfloat NVn = 0.0;
          #pragma unroll p_intNfp*p_Nfaces
          for(int m=0;m<(p_intNfp*p_Nfaces);++m){
            const dfloat L = intLIFT[n+m*p_Np];
            NUn += L*s_iFluxNx[es][m];
            NVn += L*s_iFluxNy[es][m];
          }

          RHS[id+0*p_Np] -= alpha*NUn;
          RHS[id+1*p_Np] -= alpha*NVn;
        }
      }
    }
  }
}
