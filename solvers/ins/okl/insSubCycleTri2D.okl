/*

The MIT License (MIT)

Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/



// compute div(NU)  = div(uxu) in collocation way
@kernel void insSubCycleVolumeTri2D(const dlong Nelements,
                                @restrict const  dfloat *  vgeo,
                                @restrict const  dfloat *  Dmatrices,
                                const dlong offset,
                                @restrict const  dfloat *  U,
                                @restrict const  dfloat *  Ud,
                                      @restrict dfloat *  rhsU){

  for(dlong eo=0;eo<Nelements;eo+=p_NblockV;@outer(0)){  // for all elements

    // Hold Flux Vector on Shared, use symmetry f21 = f12
    @shared dfloat s_F11[p_NblockV][p_Np];
    @shared dfloat s_F12[p_NblockV][p_Np];
    @shared dfloat s_F21[p_NblockV][p_Np];
    @shared dfloat s_F22[p_NblockV][p_Np];
    //
    for(int es=0;es<p_NblockV;++es;@inner(1)){// for all elements in block
      for(int n=0;n<p_Np;++n;@inner(0)){     // for all nodes in this element
        dlong e = eo+es; // element in block
        if(e<Nelements){ 
          const dlong id = e*p_Np+n;
          const dfloat ux = U[id+0*offset];
          const dfloat uy = U[id+1*offset];
          const dfloat px = Ud[id+0*offset];
          const dfloat py = Ud[id+1*offset];

          s_F11[es][n] = ux*px;
          s_F12[es][n] = uy*px;
          s_F21[es][n] = ux*py;
          s_F22[es][n] = uy*py;
        }
      }
    }

    // Make sure all node data is loaded into @shared
    @barrier("local");

    for(int es=0;es<p_NblockV;++es;@inner(1)){
      for(int n=0;n<p_Np;++n;@inner(0)){      
        const dlong e = eo+es; 
        if(e<Nelements){    
          // prefetch geometric factors (constant on triangle)
          const dfloat drdx = vgeo[e*p_Nvgeo + p_RXID];
          const dfloat drdy = vgeo[e*p_Nvgeo + p_RYID];
          const dfloat dsdx = vgeo[e*p_Nvgeo + p_SXID];
          const dfloat dsdy = vgeo[e*p_Nvgeo + p_SYID];
          // compute 'r' and 's' derivatives of (q_m) at node n
          dfloat df11dr = 0.f, df11ds = 0.f; 
          dfloat df12dr = 0.f, df12ds = 0.f; 
          dfloat df21dr = 0.f, df21ds = 0.f; 
          dfloat df22dr = 0.f, df22ds = 0.f; 

          #pragma unroll p_Np
          for(int i=0;i<p_Np;++i){
            const dfloat Drni = Dmatrices[n+i*p_Np+0*p_Np*p_Np];
            const dfloat Dsni = Dmatrices[n+i*p_Np+1*p_Np*p_Np];

            df11dr += Drni*s_F11[es][i];
            df11ds += Dsni*s_F11[es][i];

            df12dr += Drni*s_F12[es][i];
            df12ds += Dsni*s_F12[es][i];

            df21dr += Drni*s_F21[es][i];
            df21ds += Dsni*s_F21[es][i];

            df22dr += Drni*s_F22[es][i];
            df22ds += Dsni*s_F22[es][i];
          }

          const dfloat rhsux   = drdx*df11dr + dsdx*df11ds 
                               + drdy*df12dr + dsdy*df12ds;

          const dfloat rhsuy   = drdx*df21dr + dsdx*df21ds 
                               + drdy*df22dr + dsdy*df22ds;

          const dlong id = e*p_Np+n;
          // Compute div(uxu)
          rhsU[id+0*offset]   = rhsux;
          rhsU[id+1*offset]   = rhsuy;     
        }
      }
    }
  }
}


@kernel void insSubCycleSurfaceTri2D(const dlong Nelements,
                                    @restrict const  dfloat *  sgeo,
                                    @restrict const  dfloat *  LIFTT,
                                    @restrict const  dlong  *  vmapM,
                                    @restrict const  dlong  *  vmapP,
                                    @restrict const  int    *  EToB,
                                    const dfloat bScale,
                                    const dfloat time,
                                    @restrict const  dfloat *  x,
                                    @restrict const  dfloat *  y,
                                    @restrict const  dfloat *  z,
                                    const dlong offset,
                                    @restrict const  dfloat *  U,
                                    @restrict const  dfloat *  Ud,
                                          @restrict dfloat *  rhsU){

  // for all elements
  for(dlong eo=0;eo<Nelements;eo+=p_NblockS;@outer(0)){
    // @shared storage for flux terms
    @shared dfloat s_fluxUx[p_NblockS][p_Nfp*p_Nfaces];
    @shared dfloat s_fluxUy[p_NblockS][p_Nfp*p_Nfaces];
    
    // for all face nodes of all elements
    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int n=0;n<p_maxNodes;++n;@inner(0)){ // maxNodes = max(Nfp*Nfaces,Np)
        const dlong e = eo + es;
        if(e<Nelements && n<p_Nfp*p_Nfaces){
          // find face that owns this node
          const int face = n/p_Nfp;
          // load surface geofactors for this face
          const dlong sid    = p_Nsgeo*(e*p_Nfaces+face);
          const dfloat nx   = sgeo[sid+p_NXID];
          const dfloat ny   = sgeo[sid+p_NYID];
          const dfloat sJ   = sgeo[sid+p_SJID];
          const dfloat invJ = sgeo[sid+p_IJID];

          // indices of negative and positive traces of face node
          const dlong id  = e*p_Nfp*p_Nfaces + n;
          const dlong idM = vmapM[id];
          const dlong idP = vmapP[id];

          // load negative and positive trace node values of U, V, Pr
          const dfloat  uxM = U[idM+0*offset], uxP = U[idP+0*offset];
          const dfloat  uyM = U[idM+1*offset], uyP = U[idP+1*offset];

          const dfloat  pxM = Ud[idM+0*offset], pyM = Ud[idM+1*offset];
                dfloat  pxP = Ud[idP+0*offset], pyP = Ud[idP+1*offset];

          // apply boundary condition
          const int bc = EToB[face+p_Nfaces*e];
          if(bc>0) {
            insVelocityDirichletConditions2D(bc, time, x[idM], y[idM], nx, ny, pxM, pyM, &pxP, &pyP);
            pxP *= bScale; 
            pyP *= bScale; 
          }

          // Find max normal velocity on the face
          dfloat unM   = fabs(nx*uxM + ny*uyM);
          dfloat unP   = fabs(nx*uxP + ny*uyP);    
          dfloat unMax = (unM > unP) ? unM : unP;

          // evaluate "flux" terms: LLF
          const dfloat sc = invJ * sJ ; 
          s_fluxUx[es][n] = sc*(.5f*( nx*(uxP*pxP + uxM*pxM) 
                                    + ny*(uyP*pxP + uyM*pxM) + unMax*(pxM-pxP) ));
          s_fluxUy[es][n] = sc*(.5f*( nx*(uxP*pyP + uxM*pyP) 
                                    + ny*(uyP*pyP + uyM*pyM) + unMax*(pyM-pyP) ));
        }
      }
    }

    // wait for all flux functions are written to @shared 
    @barrier("local");

    // for each node in the element
    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int n=0;n<p_maxNodes;++n;@inner(0)){
        const dlong e = eo + es;
        if(e<Nelements && n<p_Np){
          const dlong id = e*p_Np + n;
          dfloat rhsux = rhsU[id+0*offset];
          dfloat rhsuy = rhsU[id+1*offset];
          // Lift
          #pragma unroll p_NfacesNfp
            for(int m=0;m<p_Nfaces*p_Nfp;++m){
              const dfloat L = LIFTT[n+m*p_Np];
              rhsux  += L*s_fluxUx[es][m];
              rhsuy  += L*s_fluxUy[es][m];
            }

          // M^-1* (div(u*u)) + Lift*(F*-F))
          rhsU[id+0*offset] = -rhsux;
          rhsU[id+1*offset] = -rhsuy;
        }
      }
    }
  }
}


// // Optimized sizes for @kernel 6, currently best one !!!!
#if p_N==1
#define p_NbV 20
#define p_Nmt 1
#endif

#if p_N==2
#define p_NbV 5
#define p_Nmt 2
#endif

#if p_N==3
#define p_NbV 6
#define p_Nmt 2
#endif

#if p_N==4
#define p_NbV 2
#define p_Nmt 2
#endif

#if p_N==5
#define p_NbV 3
#define p_Nmt 2
#endif

#if p_N==6
#define p_NbV 6
#define p_Nmt 3
#endif

#if p_N==7
#define p_NbV 3
#define p_Nmt 3
#endif

#if p_N==8
#define p_NbV 5
#define p_Nmt 2
#endif

#if p_N==9
#define p_NbV 3
#define p_Nmt 2
#endif

#if p_N==10
#define p_NbV 3
#define p_Nmt 2
#endif



@kernel void insSubCycleCubatureVolumeTri2D(const dlong Nelements,
                                           @restrict const  dfloat *  vgeo,
                                           @restrict const  dfloat *  cubvgeo,
                                           @restrict const  dfloat *  cubDmatrices,
                                           @restrict const  dfloat *  cubInterpT,
                                           @restrict const  dfloat *  cubProjectT,
                                           const dlong offset,
                                           @restrict const  dfloat *  U,
                                           @restrict const  dfloat *  Ud,
                                                 @restrict dfloat *  cU, //storage for interpolated fields
                                                 @restrict dfloat *  cUd, //storage for interpolated fields
                                                 @restrict dfloat *  rhsU){

  for(dlong eo=0;eo<Nelements;eo+=(p_NbV*p_Nmt);@outer(0)){  // for all elements
    
    // Hold Flux Vector on Shared, use symmetry f21 = f12
    @shared dfloat  s_U[p_Nmt][p_NbV][p_Np];
    @shared dfloat  s_V[p_Nmt][p_NbV][p_Np];
    @shared dfloat s_Ud[p_Nmt][p_NbV][p_Np];
    @shared dfloat s_Vd[p_Nmt][p_NbV][p_Np];
    
    @shared dfloat s_cF11[p_Nmt][p_NbV][p_Np];
    @shared dfloat s_cF12[p_Nmt][p_NbV][p_Np];
    @shared dfloat s_cF21[p_Nmt][p_NbV][p_Np];
    @shared dfloat s_cF22[p_Nmt][p_NbV][p_Np];
    
    @exclusive dfloat fluxU[p_Nmt], fluxV[p_Nmt];
    
    for(int es=0;es<p_NbV;++es;@inner(1)){// for all elements in block      
      for(int n=0;n<p_Np;++n;@inner(0)){     // for all nodes in this element
        #pragma unroll p_Nmt
          for(int em=0;em<p_Nmt;++em){
            const dlong e = eo + es*p_Nmt + em;
            const dlong id = e*p_Np + n;
            
            if(e<Nelements){
              // prefetch geometric factors (constant on triangle)
              const dfloat drdx = vgeo[e*p_Nvgeo + p_RXID];
              const dfloat drdy = vgeo[e*p_Nvgeo + p_RYID];
              const dfloat dsdx = vgeo[e*p_Nvgeo + p_SXID];
              const dfloat dsdy = vgeo[e*p_Nvgeo + p_SYID];
              
              const dfloat Un = U[id+0*offset];
              const dfloat Vn = U[id+1*offset];
              
              s_Ud[em][es][n] = Ud[id+0*offset];
              s_Vd[em][es][n] = Ud[id+1*offset];
              
              s_U[em][es][n] = drdx*Un + drdy*Vn; // rotate velocity 
              s_V[em][es][n] = dsdx*Un + dsdy*Vn; // 
            } else {
              s_Ud[em][es][n] = 0.;
              s_Vd[em][es][n] = 0.;
              
              s_U[em][es][n] = 0.;
              s_V[em][es][n] = 0.;
            }
          }

        #pragma unroll p_Nmt
          for(int em=0;em<p_Nmt;++em){
            fluxU[em] = 0;
            fluxV[em] = 0;
          } 
      }
    }

    //#pragma unroll 
    for(int io=0;io<p_cubNp;io+=p_Np){ // block the cubature nodes

      @barrier("local");

      for(int es=0;es<p_NbV;++es;@inner(1)){// for all elements in block
        for(int ns=0;ns<p_Np;++ns;@inner(0)){     // for all nodes in this element
          const int n = ns+io; // choose cubature node to interpolate to
          if(n<p_cubNp){
            // compute Np of the cubNp cubature values
            dfloat cU[p_Nmt], cV[p_Nmt], cUd[p_Nmt], cVd[p_Nmt];
            
            #pragma unroll p_Nmt
              for(int em=0;em<p_Nmt;++em){
                cU[em] = 0.f;
                cV[em] = 0.f;
                cUd[em] = 0.f; 
                cVd[em] = 0.f;
              }
            
            #pragma unroll p_Np
              for(int i=0;i<p_Np;++i){
                const dfloat cIni = cubInterpT[n+i*p_cubNp];
                #pragma unroll p_Nmt
                  for(int em=0;em<p_Nmt;++em){
                    cU[em]  += cIni*s_U[em][es][i];
                    cV[em]  += cIni*s_V[em][es][i];
                    cUd[em] += cIni*s_Ud[em][es][i];
                    cVd[em] += cIni*s_Vd[em][es][i];        
                  }
              }
            
            // share up to the Np cubature vals computed in this block
            #pragma unroll p_Nmt
              for(int em=0;em<p_Nmt;++em){
                s_cF11[em][es][ns] = cU[em]*cUd[em];
                s_cF12[em][es][ns] = cV[em]*cUd[em];
                s_cF21[em][es][ns] = cU[em]*cVd[em];
                s_cF22[em][es][ns] = cV[em]*cVd[em];
              }
          }
        }
      }
        
      // Make sure all node data is loaded into @shared
      @barrier("local");
      
      for(int es=0;es<p_NbV;++es;@inner(1)){
        for(int n=0;n<p_Np;++n;@inner(0)){      
          
          #pragma unroll p_Np
            for(int i=0;i<p_Np;++i){
              if(i+io<p_cubNp){ // differentiate this sub block
                const dfloat cDrWni = cubDmatrices[n+(i+io)*p_Np+0*p_cubNp*p_Np];
                const dfloat cDsWni = cubDmatrices[n+(i+io)*p_Np+1*p_cubNp*p_Np];
                
                #pragma unroll p_Nmt
                  for(int em=0;em<p_Nmt;++em){  
                    const dfloat cF11 = s_cF11[em][es][i];
                    const dfloat cF12 = s_cF12[em][es][i];
                    const dfloat cF21 = s_cF21[em][es][i];
                    const dfloat cF22 = s_cF22[em][es][i];
                    
                    fluxU[em] += cDrWni*cF11;
                    fluxU[em] += cDsWni*cF12;
                    fluxV[em] += cDrWni*cF21;
                    fluxV[em] += cDsWni*cF22;
                  }
              }
            }
        }
      }
    }
    
    for(int es=0;es<p_NbV;++es;@inner(1)){
      for(int n=0;n<p_Np;++n;@inner(0)){          
        #pragma unroll p_Nmt
          for(int em=0;em<p_Nmt;++em){
            const dlong e = eo+es*p_Nmt+em;
            if(e<Nelements){
              const dlong id = e*p_Np+n;
              rhsU[id+0*offset]   = -fluxU[em]; // note  change in sign
              rhsU[id+1*offset]   = -fluxV[em];      
            }
          }
      }
    }
  }
}

// Optimized sizes for @kernel 5
#if p_N==1
#define p_NblockS4 8
#define p_NnodesS4 4
#endif

#if p_N==2
#define p_NblockS4 2
#define p_NnodesS4 3
#endif

#if p_N==3
#define p_NblockS4 4
#define p_NnodesS4 5
#endif

#if p_N==4
#define p_NblockS4 2
#define p_NnodesS4 3
#endif

#if p_N==5
#define p_NblockS4 4
#define p_NnodesS4 5
#endif

#if p_N==6
#define p_NblockS4 4
#define p_NnodesS4 5
#endif

#if p_N==7
#define p_NblockS4 5
#define p_NnodesS4 2
#endif

#if p_N==8
#define p_NblockS4 1
#define p_NnodesS4 4
#endif

#if p_N==9
#define p_NblockS4 3
#define p_NnodesS4 2
#endif

#if p_N==10
#define p_NblockS4 2
#define p_NnodesS4 3
#endif



// Multiple nodes per thread// use less @shared memory by factor 4 
@kernel void insSubCycleCubatureSurfaceTri2D(const dlong Nelements,
                                            @restrict const  dfloat *  vgeo,
                                            @restrict const  dfloat *  sgeo,
                                            @restrict const  dfloat *  cubsgeo,
                                            @restrict const  dfloat *  intInterpT, // interpolate to integration nodes
                                            @restrict const  dfloat *  intLIFTT, // lift from integration to interpolation nodes
                                            @restrict const  dfloat *  cubInterpT,
                                            @restrict const  dfloat *  cubProjectT,
                                            @restrict const  dlong  *  vmapM,
                                            @restrict const  dlong  *  vmapP,
                                            @restrict const  int    *  EToB,
                                            const dfloat bScale,
                                            const dfloat time,
                                            @restrict const  dfloat *  intx, // integration nodes
                                            @restrict const  dfloat *  inty,
                                            @restrict const  dfloat *  intz,
                                            const dlong offset,
                                            @restrict const  dfloat *  U,
                                            @restrict const  dfloat *  Ud,
                                                  @restrict dfloat *  rhsU){
  // for all elements
  for(dlong eo=0;eo<Nelements;eo+=(p_NblockS4*p_NnodesS4);@outer(0)){

    // @shared storage 
    @shared dfloat s_U[p_NnodesS4][p_NblockS4][p_intNfpNfaces];
    @shared dfloat s_V[p_NnodesS4][p_NblockS4][p_intNfpNfaces];
   
    #define s_iFluxU s_U // Reuse @shared memory arrays
    #define s_iFluxV s_V

    @exclusive dfloat r_iUM[p_NnodesS4],  r_iUP[p_NnodesS4];
    @exclusive dfloat r_iVM[p_NnodesS4],  r_iVP[p_NnodesS4];
    @exclusive dfloat r_iUdM[p_NnodesS4], r_iUdP[p_NnodesS4];
    @exclusive dfloat r_iVdM[p_NnodesS4], r_iVdP[p_NnodesS4];

    @exclusive dlong idM[p_NnodesS4], idP[p_NnodesS4];
    @exclusive int face;

    // Loop for minus traces
    // for all face nodes of all elements
    for(int es=0;es<p_NblockS4;++es;@inner(1)){
      for(int n=0;n<p_maxNodesSurfaceCub;++n;@inner(0)){
        if(n<(p_Nfaces*p_Nfp)){
          #pragma unroll p_NnodesS4
          for (int em=0;em<p_NnodesS4;++em){
            const dlong e = em*p_NblockS4 + es + eo;
            if (e<Nelements) {
              // indices of negative and positive traces of face node
              const dlong id  = e*p_Nfp*p_Nfaces + n;
              idM[em] = vmapM[id];
              idP[em] = vmapP[id];

              // load negative and positive trace node values of velocity
              s_U[em][es][n] = U[idM[em]+0*offset];
              s_V[em][es][n] = U[idP[em]+0*offset];              
            }
          }
        }
      }
    }

    @barrier("local");

    // interpolate to surface integration nodes
    for(int es=0;es<p_NblockS4;++es;@inner(1)){
      for(int n=0;n<p_maxNodesSurfaceCub;++n;@inner(0)){ 
        if(n<(p_Nfaces*p_intNfp)){
          face = n/p_intNfp; // find face that owns this integration node

          #pragma unroll p_NnodesS4
          for (int em=0;em<p_NnodesS4;++em){
            r_iUM[em]  = 0.f;
            r_iUP[em]  = 0.f;
          }

          // local block interpolation (face nodes to integration nodes)
          #pragma unroll p_Nfp
          for(int m=0;m<p_Nfp;++m){
            const dfloat iInm = intInterpT[n+m*p_Nfaces*p_intNfp];
            const int fm = face*p_Nfp+m;

            #pragma unroll p_NnodesS4
            for (int em=0;em<p_NnodesS4;++em){
              r_iUM[em]  += iInm*s_U[em][es][fm];
              r_iUP[em]  += iInm*s_V[em][es][fm];
            }
          }
        }
      }
    }
    @barrier("local");

    // for all face nodes of all elements
    for(int es=0;es<p_NblockS4;++es;@inner(1)){
      for(int n=0;n<p_maxNodesSurfaceCub;++n;@inner(0)){
        if(n<(p_Nfaces*p_Nfp)){
          #pragma unroll p_NnodesS4
          for (int em=0;em<p_NnodesS4;++em){
            const dlong e = em*p_NblockS4 + es + eo;
            if (e<Nelements) {
              // load negative and positive trace node values of advection field
              s_U[em][es][n] = Ud[idM[em]+0*offset];
              s_V[em][es][n] = Ud[idP[em]+0*offset];              
            }
          }
        }
      }
    }

    @barrier("local");

    // interpolate to surface integration nodes
    for(int es=0;es<p_NblockS4;++es;@inner(1)){
      for(int n=0;n<p_maxNodesSurfaceCub;++n;@inner(0)){ 
        if(n<(p_Nfaces*p_intNfp)){
          #pragma unroll p_NnodesS4
          for (int em=0;em<p_NnodesS4;++em){
            r_iUdM[em]  = 0.f;
            r_iUdP[em]  = 0.f;
          }

          // local block interpolation (face nodes to integration nodes)
          #pragma unroll p_Nfp
          for(int m=0;m<p_Nfp;++m){
            const dfloat iInm = intInterpT[n+m*p_Nfaces*p_intNfp];
            const int fm = face*p_Nfp+m;

            #pragma unroll p_NnodesS4
            for (int em=0;em<p_NnodesS4;++em){
              r_iUdM[em]  += iInm*s_U[em][es][fm];
              r_iUdP[em]  += iInm*s_V[em][es][fm];
            }
          }
        }
      }
    }
    @barrier("local");

      // Loop for positive traces
    // for all face nodes of all elements
    for(int es=0;es<p_NblockS4;++es;@inner(1)){
      for(int n=0;n<p_maxNodesSurfaceCub;++n;@inner(0)){
        if(n<(p_Nfaces*p_Nfp)){
          #pragma unroll p_NnodesS4
          for (int em=0;em<p_NnodesS4;++em){
            const dlong e = em*p_NblockS4 + es + eo;
            if (e<Nelements) {
              // load negative and positive trace node values of velocity
              s_U[em][es][n] = U[idM[em]+1*offset];
              s_V[em][es][n] = U[idP[em]+1*offset];              
            }
          }
        }
      }
    }

    @barrier("local");

    // interpolate to surface integration nodes
    for(int es=0;es<p_NblockS4;++es;@inner(1)){
      for(int n=0;n<p_maxNodesSurfaceCub;++n;@inner(0)){ 
        if(n<(p_Nfaces*p_intNfp)){
          #pragma unroll p_NnodesS4
          for (int em=0;em<p_NnodesS4;++em){
            r_iVM[em]  = 0.f;
            r_iVP[em]  = 0.f;
          }

          // local block interpolation (face nodes to integration nodes)
          #pragma unroll p_Nfp
          for(int m=0;m<p_Nfp;++m){
            const dfloat iInm = intInterpT[n+m*p_Nfaces*p_intNfp];
            const int fm = face*p_Nfp+m;

            #pragma unroll p_NnodesS4
            for (int em=0;em<p_NnodesS4;++em){
              r_iVM[em]  += iInm*s_U[em][es][fm];
              r_iVP[em]  += iInm*s_V[em][es][fm];
            }
          }
        }
      }
    }
    @barrier("local");

    // for all face nodes of all elements
    for(int es=0;es<p_NblockS4;++es;@inner(1)){
      for(int n=0;n<p_maxNodesSurfaceCub;++n;@inner(0)){
        if(n<(p_Nfaces*p_Nfp)){
          #pragma unroll p_NnodesS4
          for (int em=0;em<p_NnodesS4;++em){
            const dlong e = em*p_NblockS4 + es + eo;
            if (e<Nelements) {
              // load negative and positive trace node values of advection field
              s_U[em][es][n] = Ud[idM[em]+1*offset];
              s_V[em][es][n] = Ud[idP[em]+1*offset];              
            }
          }
        }
      }
    }

    @barrier("local");

    // interpolate to surface integration nodes
    for(int es=0;es<p_NblockS4;++es;@inner(1)){
      for(int n=0;n<p_maxNodesSurfaceCub;++n;@inner(0)){ 
        if(n<(p_Nfaces*p_intNfp)){
          #pragma unroll p_NnodesS4
          for (int em=0;em<p_NnodesS4;++em){
            r_iVdM[em]  = 0.f;
            r_iVdP[em]  = 0.f;
          }

          // local block interpolation (face nodes to integration nodes)
          #pragma unroll p_Nfp
          for(int m=0;m<p_Nfp;++m){
            const dfloat iInm = intInterpT[n+m*p_Nfaces*p_intNfp];
            const int fm = face*p_Nfp+m;

            #pragma unroll p_NnodesS4
            for (int em=0;em<p_NnodesS4;++em){
              r_iVdM[em]  += iInm*s_U[em][es][fm];
              r_iVdP[em]  += iInm*s_V[em][es][fm];
            }
          }
        }
      }
    }
    @barrier("local");

    // Use traces to compuite and store flux
    for(int es=0;es<p_NblockS4;++es;@inner(1)){
      for(int n=0;n<p_maxNodesSurfaceCub;++n;@inner(0)){ 
        #pragma unroll p_NnodesS4
        for (int em=0;em<p_NnodesS4;++em){
          const dlong e = em*p_NblockS4 + es + eo;
          if((e<Nelements)&&(n<(p_Nfaces*p_intNfp))){
            // load surface geofactors for this face
            const dlong sid    = p_Nsgeo*(e*p_Nfaces+face);
            const dfloat nx   = sgeo[sid+p_NXID];
            const dfloat ny   = sgeo[sid+p_NYID];
            const dfloat sJ   = sgeo[sid+p_SJID];
            const dfloat invJ = sgeo[sid+p_IJID];

            // apply boundary conditions
            const int bc = EToB[face+p_Nfaces*e];
            if(bc>0){
              insVelocityDirichletConditions2D(bc,time, intx[n+e*p_Nfaces*p_intNfp], inty[n+e*p_Nfaces*p_intNfp], nx, ny, r_iUdM[em],r_iVdM[em], &(r_iUdP[em]), &(r_iVdP[em]));
              r_iUdP[em] *= bScale;
              r_iVdP[em] *= bScale;
            }

            // Find max normal velocity on the face
            const dfloat unm   = fabs(nx*r_iUM[em] + ny*r_iVM[em]);
            const dfloat unp   = fabs(nx*r_iUP[em] + ny*r_iVP[em]);    
            const dfloat unmax = (unm > unp) ? unm : unp;

            // evaluate "flux" terms: LLF
            const dfloat sc = 0.5f*invJ*sJ;

            // bad notation here //
            s_iFluxU[em][es][n] = sc*(nx*(r_iUP[em]*r_iUdP[em] + r_iUM[em]*r_iUdM[em]) 
                                     +ny*(r_iVP[em]*r_iUdP[em] + r_iVM[em]*r_iUdM[em]) +unmax*(r_iUdM[em]-r_iUdP[em]));

            s_iFluxV[em][es][n] = sc*(nx*(r_iUP[em]*r_iVdP[em] + r_iUM[em]*r_iVdM[em]) 
                                    + ny*(r_iVP[em]*r_iVdP[em] + r_iVM[em]*r_iVdM[em]) +unmax*(r_iVdM[em]-r_iVdP[em]));
          }
        }
      }
    }

    @barrier("local");

    // lift from surface integration to volume nodes
    for(int es=0;es<p_NblockS4;++es;@inner(1)){
      for(int n=0;n<p_maxNodesSurfaceCub;++n;@inner(0)){
        if(n<p_Np){
          #pragma unroll p_NnodesS4
          for (int em=0;em<p_NnodesS4;++em){
            const dlong e = em*p_NblockS4 + es + eo;
            if(e<Nelements) {
              const dlong id = n + p_Np*e;
              // prefemch volume rhs
              r_iUM[em] = rhsU[id+0*offset];
              r_iVM[em] = rhsU[id+1*offset];
            }
          }

          #pragma unroll p_intNfpNfaces
          for(int m=0;m<p_intNfpNfaces;++m){
            const dfloat L = intLIFTT[n+m*p_Np];

            #pragma unroll p_NnodesS4
            for (int em=0;em<p_NnodesS4;++em){
              r_iUM[em] += L*s_U[em][es][m];
              r_iVM[em] += L*s_V[em][es][m];
            }
          }

          #pragma unroll p_NnodesS4
          for (int em=0;em<p_NnodesS4;++em){
            const dlong e = em*p_NblockS4 + es + eo;
            if(e<Nelements) {
              const dlong id = n + p_Np*e;
              // prefemch volume rhs
              rhsU[id+0*offset] = r_iUM[em];
              rhsU[id+1*offset] = r_iVM[em];
            }
          }
        }
      }
    }
  }
}
#undef s_iFluxU
#undef s_iFluxV  

