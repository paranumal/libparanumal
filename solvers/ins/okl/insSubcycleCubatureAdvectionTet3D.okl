/*

The MIT License (MIT)

Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/


// compute NU = -div(uxu) with cubature
@kernel void insSubcycleAdvectionCubatureVolumeTet3D(const dlong Nelements,
                                           @restrict const  dfloat *  vgeo,
                                           @restrict const  dfloat *  cubvgeo,
                                           @restrict const  dfloat *  cubD,
                                           @restrict const  dfloat *  cubPDT,
                                           @restrict const  dfloat *  cubInterp,
                                           @restrict const  dfloat *  cubProject,
                                           @restrict const  dfloat *  Ue,
                                           @restrict const  dfloat *  U,
                                                 @restrict  dfloat *  RHS){

  for(dlong eo=0;eo<Nelements;eo+=p_cubNblockV;@outer(0)){  // for all elements

    @shared dfloat s_U[p_cubNblockV][p_Np];
    @shared dfloat s_V[p_cubNblockV][p_Np];
    @shared dfloat s_W[p_cubNblockV][p_Np];

    @shared dfloat s_Ud[p_cubNblockV][p_Np];
    @shared dfloat s_Vd[p_cubNblockV][p_Np];
    @shared dfloat s_Wd[p_cubNblockV][p_Np];

    @shared dfloat s_cF11[p_cubNblockV][p_cubNp];
    @shared dfloat s_cF12[p_cubNblockV][p_cubNp];
    @shared dfloat s_cF13[p_cubNblockV][p_cubNp];

    @shared dfloat s_cF21[p_cubNblockV][p_cubNp];
    @shared dfloat s_cF22[p_cubNblockV][p_cubNp];
    @shared dfloat s_cF23[p_cubNblockV][p_cubNp];

    @shared dfloat s_cF31[p_cubNblockV][p_cubNp];
    @shared dfloat s_cF32[p_cubNblockV][p_cubNp];
    @shared dfloat s_cF33[p_cubNblockV][p_cubNp];
    //
    for(int es=0;es<p_cubNblockV;++es;@inner(1)){// for all elements in block
      for(int n=0;n<p_cubNp;++n;@inner(0)){     // for all nodes in this element
        const dlong e = eo+es; // element in block
        if(e<Nelements && n<p_Np){
          const dlong id = e*p_Np*p_NVfields+n;

          // prefetch geometric factors (constant on triangle)
          const dfloat drdx = vgeo[e*p_Nvgeo + p_RXID];
          const dfloat drdy = vgeo[e*p_Nvgeo + p_RYID];
          const dfloat drdz = vgeo[e*p_Nvgeo + p_RZID];

          const dfloat dsdx = vgeo[e*p_Nvgeo + p_SXID];
          const dfloat dsdy = vgeo[e*p_Nvgeo + p_SYID];
          const dfloat dsdz = vgeo[e*p_Nvgeo + p_SZID];

          const dfloat dtdx = vgeo[e*p_Nvgeo + p_TXID];
          const dfloat dtdy = vgeo[e*p_Nvgeo + p_TYID];
          const dfloat dtdz = vgeo[e*p_Nvgeo + p_TZID];

          const dfloat Un = Ue[id+0*p_Np];
          const dfloat Vn = Ue[id+1*p_Np];
          const dfloat Wn = Ue[id+2*p_Np];

          s_U[es][n] = drdx*Un + drdy*Vn + drdz*Wn;
          s_V[es][n] = dsdx*Un + dsdy*Vn + dsdz*Wn;
          s_W[es][n] = dtdx*Un + dtdy*Vn + dtdz*Wn;

          s_Ud[es][n] = U[id+0*p_Np];
          s_Vd[es][n] = U[id+1*p_Np];
          s_Wd[es][n] = U[id+2*p_Np];

        }
      }
    }

    @barrier("local");

    for(int es=0;es<p_cubNblockV;++es;@inner(1)){// for all elements in block
      for(int n=0;n<p_cubNp;++n;@inner(0)){     // for all nodes in this element
        const dlong e = eo+es; // element in block
        if(e<Nelements && n<p_cubNp){

          dfloat  cU = 0.f,  cV = 0.f,  cW = 0.f;
          dfloat cUd = 0.f, cVd = 0.f, cWd = 0.f;

          #pragma unroll p_Np
            for(int i=0;i<p_Np;++i){
              const dfloat cIni = cubInterp[n+i*p_cubNp];
              cU  += cIni*s_U[es][i];
              cV  += cIni*s_V[es][i];
              cW  += cIni*s_W[es][i];

              cUd += cIni*s_Ud[es][i];
              cVd += cIni*s_Vd[es][i];
              cWd += cIni*s_Wd[es][i];
            }

          s_cF11[es][n] = cU*cUd;
          s_cF12[es][n] = cV*cUd;
          s_cF13[es][n] = cW*cUd;

          s_cF21[es][n] = cU*cVd;
          s_cF22[es][n] = cV*cVd;
          s_cF23[es][n] = cW*cVd;

          s_cF31[es][n] = cU*cWd;
          s_cF32[es][n] = cV*cWd;
          s_cF33[es][n] = cW*cWd;
        }
      }
    }

    // Make sure all node data is loaded into @shared
    @barrier("local");

    for(int es=0;es<p_cubNblockV;++es;@inner(1)){
      for(int n=0;n<p_cubNp;++n;@inner(0)){
        const dlong e = eo+es;

        if(e<Nelements && n<p_Np){

          dfloat fluxU = 0., fluxV = 0., fluxW = 0.;

          #pragma unroll p_cubNp
            for(int i=0;i<p_cubNp;++i){
              const dfloat cDrWni = cubPDT[n+i*p_Np+0*p_cubNp*p_Np];
              const dfloat cDsWni = cubPDT[n+i*p_Np+1*p_cubNp*p_Np];
              const dfloat cDtWni = cubPDT[n+i*p_Np+2*p_cubNp*p_Np];

              fluxU += cDrWni*s_cF11[es][i]
                      +cDsWni*s_cF12[es][i]
                      +cDtWni*s_cF13[es][i];

              fluxV += cDrWni*s_cF21[es][i]
                      +cDsWni*s_cF22[es][i]
                      +cDtWni*s_cF23[es][i];

              fluxW += cDrWni*s_cF31[es][i]
                      +cDsWni*s_cF32[es][i]
                      +cDtWni*s_cF33[es][i];
            }

          const dlong id = e*p_Np*p_NVfields+n;
          RHS[id+0*p_Np] = fluxU; // note  change in sign
          RHS[id+1*p_Np] = fluxV;
          RHS[id+2*p_Np] = fluxW;
        }
      }
    }
  }
}


@kernel void insSubcycleAdvectionCubatureSurfaceTet3D(const dlong Nelements,
                                            @restrict const  dfloat *  vgeo,
                                            @restrict const  dfloat *  sgeo,
                                            @restrict const  dfloat *  intInterp, // interpolate to integration nodes
                                            @restrict const  dfloat *  intLIFT, // lift from integration to interpolation nodes
                                            @restrict const  dlong  *  vmapM,
                                            @restrict const  dlong  *  vmapP,
                                            @restrict const  int    *  EToB,
                                            const dfloat time,
                                            @restrict const  dfloat *  intx, // integration nodes
                                            @restrict const  dfloat *  inty,
                                            @restrict const  dfloat *  intz,
                                            const dfloat nu,
                                            @restrict const  dfloat *  Ue,
                                            @restrict const  dfloat *  U,
                                                  @restrict  dfloat *  RHS){

  // for all elements
  for(dlong eo=0;eo<Nelements;eo+=p_cubNblockS;@outer(0)){

    // @shared storage for flux terms
    @shared dfloat s_UM[p_cubNblockS][p_NfacesNfp];
    @shared dfloat s_VM[p_cubNblockS][p_NfacesNfp];
    @shared dfloat s_WM[p_cubNblockS][p_NfacesNfp];
    @shared dfloat s_UP[p_cubNblockS][p_NfacesNfp];
    @shared dfloat s_VP[p_cubNblockS][p_NfacesNfp];
    @shared dfloat s_WP[p_cubNblockS][p_NfacesNfp];

    @shared dfloat s_UdM[p_cubNblockS][p_NfacesNfp];
    @shared dfloat s_VdM[p_cubNblockS][p_NfacesNfp];
    @shared dfloat s_WdM[p_cubNblockS][p_NfacesNfp];
    @shared dfloat s_UdP[p_cubNblockS][p_NfacesNfp];
    @shared dfloat s_VdP[p_cubNblockS][p_NfacesNfp];
    @shared dfloat s_WdP[p_cubNblockS][p_NfacesNfp];

    @shared dfloat s_iFluxU[p_cubNblockS][p_intNfpNfaces];
    @shared dfloat s_iFluxV[p_cubNblockS][p_intNfpNfaces];
    @shared dfloat s_iFluxW[p_cubNblockS][p_intNfpNfaces];

    // for all face nodes of all elements
    for(int es=0;es<p_cubNblockS;++es;@inner(1)){
      for(int n=0;n<p_cubMaxNodes;++n;@inner(0)){
        const dlong e = eo + es;
        if(e<Nelements){
          if(n<(p_Nfaces*p_Nfp)){
            // indices of negative and positive traces of face node
            const dlong id  = e*p_Nfp*p_Nfaces + n;
            const dlong idM = vmapM[id];
            const dlong idP = vmapP[id];

            // load traces
            const dlong eM = e;
            const dlong eP = idP/p_Np;
            const int vidM = idM%p_Np;
            const int vidP = idP%p_Np;

            const dlong qbaseM = eM*p_Np*p_NVfields + vidM;
            const dlong qbaseP = eP*p_Np*p_NVfields + vidP;

            // load negative and positive trace node values of velocity
            s_UM[es][n] = Ue[qbaseM+0*p_Np];
            s_VM[es][n] = Ue[qbaseM+1*p_Np];
            s_WM[es][n] = Ue[qbaseM+2*p_Np];
            s_UP[es][n] = Ue[qbaseP+0*p_Np];
            s_VP[es][n] = Ue[qbaseP+1*p_Np];
            s_WP[es][n] = Ue[qbaseP+2*p_Np];

            s_UdM[es][n] = U[qbaseM+0*p_Np];
            s_VdM[es][n] = U[qbaseM+1*p_Np];
            s_WdM[es][n] = U[qbaseM+2*p_Np];
            s_UdP[es][n] = U[qbaseP+0*p_Np];
            s_VdP[es][n] = U[qbaseP+1*p_Np];
            s_WdP[es][n] = U[qbaseP+2*p_Np];
          }
        }
      }
    }

    @barrier("local");

    // interpolate to surface integration nodes
    for(int es=0;es<p_cubNblockS;++es;@inner(1)){
      for(int n=0;n<p_cubMaxNodes;++n;@inner(0)){
        const dlong e = eo + es;
        if(e<Nelements){
          if(n<(p_Nfaces*p_intNfp)){
            const int face = n/p_intNfp; // find face that owns this integration node

            // load surface geofactors for this face
            const dlong sid    = p_Nsgeo*(e*p_Nfaces+face);
            const dfloat nx   = sgeo[sid+p_NXID];
            const dfloat ny   = sgeo[sid+p_NYID];
            const dfloat nz   = sgeo[sid+p_NZID];
            const dfloat sJ   = sgeo[sid+p_SJID];
            const dfloat invJ = sgeo[sid+p_IJID];

            dfloat iUM  = 0.f, iVM  = 0.f, iWM  = 0.f;
            dfloat iUP  = 0.f, iVP  = 0.f, iWP  = 0.f;
            dfloat iUdM = 0.f, iVdM = 0.f, iWdM = 0.f;
            dfloat iUdP = 0.f, iVdP = 0.f, iWdP = 0.f;

            // local block interpolation (face nodes to integration nodes)
            #pragma unroll p_Nfp
              for(int m=0;m<p_Nfp;++m){
                const dfloat iInm = intInterp[n+m*p_Nfaces*p_intNfp];
                const int fm = face*p_Nfp+m;

                iUM  += iInm*s_UM[es][fm];
                iVM  += iInm*s_VM[es][fm];
                iWM  += iInm*s_WM[es][fm];
                iUdM += iInm*s_UdM[es][fm];
                iVdM += iInm*s_VdM[es][fm];
                iWdM += iInm*s_WdM[es][fm];

                iUP  += iInm*s_UP[es][fm];
                iVP  += iInm*s_VP[es][fm];
                iWP  += iInm*s_WP[es][fm];
                iUdP += iInm*s_UdP[es][fm];
                iVdP += iInm*s_VdP[es][fm];
                iWdP += iInm*s_WdP[es][fm];
              }

            // apply boundary conditions
            const int bc = EToB[face+p_Nfaces*e];
            if(bc>0){
              insVelocityDirichletConditions3D(bc,nu,time, intx[n+e*p_Nfaces*p_intNfp], \
                                                        inty[n+e*p_Nfaces*p_intNfp], \
                                                        intz[n+e*p_Nfaces*p_intNfp], \
                                                  nx, ny, nz, iUdM,iVdM,iWdM, &iUdP, &iVdP, &iWdP);
            }


            // Find max normal velocity on the face
            const dfloat unm   = fabs(nx*iUM + ny*iVM + nz*iWM);
            const dfloat unp   = fabs(nx*iUP + ny*iVP + nz*iWP);
            const dfloat unmax = (unm > unp) ? unm : unp;

            // evaluate "flux" terms: LLF
            const dfloat sc = invJ * sJ ;

            s_iFluxU[es][n] = sc*(.5f*(nx*(iUP*iUdP + iUM*iUdM)
                                      +ny*(iVP*iUdP + iVM*iUdM)
                                      +nz*(iWP*iUdP + iWM*iUdM)
                                      +unmax*(iUdM-iUdP) ));

            s_iFluxV[es][n] = sc*(.5f*(nx*(iUP*iVdP + iUM*iVdM)
                                     + ny*(iVP*iVdP + iVM*iVdM)
                                     + nz*(iWP*iVdP + iWM*iVdM)
                                     + unmax*(iVdM-iVdP) ));

            s_iFluxW[es][n] = sc*(.5f*(nx*(iUP*iWdP + iUM*iWdM)
                                     + ny*(iVP*iWdP + iVM*iWdM)
                                     + nz*(iWP*iWdP + iWM*iWdM)
                                     + unmax*(iWdM-iWdP) ));
          }
        }
      }
    }

    @barrier("local");

    // lift from surface integration to volume nodes
    for(int es=0;es<p_cubNblockS;++es;@inner(1)){
      for(int n=0;n<p_cubMaxNodes;++n;@inner(0)){
        const dlong e = eo + es;
        if(e<Nelements){
          if(n<p_Np){

            dfloat rhsu = 0.0;
            dfloat rhsv = 0.0;
            dfloat rhsw = 0.0;

            #pragma unroll p_intNfpNfaces
              for(int m=0;m<p_intNfpNfaces;++m){
                // RefMassMatrix^{-1}*cInterp^t*cWeight
                const dfloat L = intLIFT[n+m*p_Np];
                rhsu += L*s_iFluxU[es][m];
                rhsv += L*s_iFluxV[es][m];
                rhsw += L*s_iFluxW[es][m];
              }

            const dlong id = n + p_NVfields*p_Np*e;
            RHS[id+0*p_Np] -= rhsu;
            RHS[id+1*p_Np] -= rhsv;
            RHS[id+2*p_Np] -= rhsw;
          }
        }
      }
    }
  }
}


