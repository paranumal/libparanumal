/*

The MIT License (MIT)

Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

// Compute Gradient in Strong Form
@kernel void insGradientVolumeTet3D(const dlong Nelements,
                                   @restrict const  dfloat *  vgeo,
                                   @restrict const  dfloat *  Dmatrices,
                                   const dlong  offset,
                                   @restrict const  dfloat *  P,
                                         @restrict dfloat *  gradP){

  for(dlong eo=0;eo<Nelements;eo+=p_NblockV;@outer(0)){
    // for all elements
    @shared dfloat s_P[p_NblockV][p_Np];

    for(int es=0;es<p_NblockV;++es;@inner(1)){// for all elements in block
      for(int n=0;n<p_Np;++n;@inner(0)){     // for all nodes in this element
        const dlong e = eo+es; // element in block
        if(e<Nelements){
          s_P[es][n]  = P[n + e*p_Np];
        }
      }
    }

    // Make sure all node data is loaded into @shared
    @barrier("local");

    for(int es=0;es<p_NblockV;++es;@inner(1)){// for all elements in block
      for(int n=0;n<p_Np;++n;@inner(0)){     // for all nodes in this element
        const dlong e = eo+es; // element in block
        if(e<Nelements){
           // prefetch geometric factors (constant on triangle)
          const dfloat drdx = vgeo[e*p_Nvgeo + p_RXID];
          const dfloat drdy = vgeo[e*p_Nvgeo + p_RYID];
          const dfloat drdz = vgeo[e*p_Nvgeo + p_RZID];

          const dfloat dsdx = vgeo[e*p_Nvgeo + p_SXID];
          const dfloat dsdy = vgeo[e*p_Nvgeo + p_SYID];
          const dfloat dsdz = vgeo[e*p_Nvgeo + p_SZID];

          const dfloat dtdx = vgeo[e*p_Nvgeo + p_TXID];
          const dfloat dtdy = vgeo[e*p_Nvgeo + p_TYID];
          const dfloat dtdz = vgeo[e*p_Nvgeo + p_TZID];

          dfloat dpdr  = 0.f,  dpds  = 0.f, dpdt = 0.f;
          #pragma unroll p_Np
            for(int i=0;i<p_Np;++i){
              const dfloat Drni = Dmatrices[n+i*p_Np+0*p_Np*p_Np];
              const dfloat Dsni = Dmatrices[n+i*p_Np+1*p_Np*p_Np];
              const dfloat Dtni = Dmatrices[n+i*p_Np+2*p_Np*p_Np];
              //
              dpdr  += Drni*s_P[es][i];
              dpds  += Dsni*s_P[es][i];
              dpdt  += Dtni*s_P[es][i];
            }

          const dlong id = e*p_Np+n;
          gradP[id+0*offset] = drdx*dpdr + dsdx*dpds + dtdx*dpdt;
          gradP[id+1*offset] = drdy*dpdr + dsdy*dpds + dtdy*dpdt;
          gradP[id+2*offset] = drdz*dpdr + dsdz*dpds + dtdz*dpdt;
        }
      }
    }
  }
}

@kernel void insGradientSurfaceTet3D(const dlong Nelements,
                                    @restrict const  dfloat *  sgeo,
                                    @restrict const  dfloat *  LIFTT,
                                    @restrict const  dlong  *  vmapM,
                                    @restrict const  dlong  *  vmapP,
                                    @restrict const  int    *  EToB,
                                    @restrict const  dfloat *  x,
                                    @restrict const  dfloat *  y,
                                    @restrict const  dfloat *  z,
                                    const dfloat time,
                                    const dlong offset,
                                    @restrict const  dfloat *  P,
                                          @restrict dfloat *  gradP){

  // for all elements
  for(dlong eo=0;eo<Nelements;eo+=p_NblockS;@outer(0)){
    @shared dfloat s_fluxPx[p_NblockS][p_Nfp*p_Nfaces];
    @shared dfloat s_fluxPy[p_NblockS][p_Nfp*p_Nfaces];
    @shared dfloat s_fluxPz[p_NblockS][p_Nfp*p_Nfaces];
    // for all face nodes of all elements
    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int n=0;n<p_maxNodes;++n;@inner(0)){ // maxNodes = max(Nfp*Nfaces,Np)
        const dlong e = eo + es;
        if(e<Nelements){
          if(n<p_Nfp*p_Nfaces){
            // find face that owns this node
            const int face = n/p_Nfp;
            // load surface geofactors for this face
            const dlong sid    = p_Nsgeo*(e*p_Nfaces+face);
            const dfloat nx   = sgeo[sid+p_NXID];
            const dfloat ny   = sgeo[sid+p_NYID];
            const dfloat nz   = sgeo[sid+p_NZID];
            const dfloat sJ   = sgeo[sid+p_SJID];
            const dfloat invJ = sgeo[sid+p_IJID];

            // indices of negative and positive traces of face node
            const dlong id  = e*p_Nfp*p_Nfaces + n;
            const dlong idM = vmapM[id];
            const dlong idP = vmapP[id];

            const dfloat PM = P[idM]; 
                  dfloat PP = P[idP];

            // apply boundary condition
            const int bc = EToB[face+p_Nfaces*e];
            if(bc>0){
              insPressureDirichletConditions3D(bc,time, x[idM],y[idM],z[idM], nx,ny,nz, PM,&PP);
              PP = 2.f*PP - PM; //Strong form BCs
            }

            // evaluate "flux" terms: LLF
            const dfloat sc = invJ * sJ ;

            // Centered flux for pr p*-p = 0.5(PP-PM) // Central Flux
            s_fluxPx[es][n]  = sc*(.5f*nx*(PP-PM));
            s_fluxPy[es][n]  = sc*(.5f*ny*(PP-PM));
            s_fluxPz[es][n]  = sc*(.5f*nz*(PP-PM));
          }
        }
      }
    }

    // wait for all flux functions are written to @shared
    @barrier("local");

    // for each node in the element
    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int n=0;n<p_maxNodes;++n;@inner(0)){
        const dlong e = eo + es;
        if(e<Nelements){
          if(n<p_Np){
            const dlong id = e*p_Np + n;

            dfloat px  = gradP[id+0*offset];
            dfloat py  = gradP[id+1*offset];
            dfloat pz  = gradP[id+2*offset];
            // Lift
            #pragma unroll p_NfacesNfp
              for(int m=0;m<p_Nfaces*p_Nfp;++m){
                const dfloat L = LIFTT[n+m*p_Np];
                px += L*s_fluxPx[es][m];
                py += L*s_fluxPy[es][m];
                pz += L*s_fluxPz[es][m];
              }
            //  rhsu = grad(p) // Note that multiplied with M^-1
            gradP[id+0*offset] = px;
            gradP[id+1*offset] = py;
            gradP[id+2*offset] = pz;
          }
        }
      }
    }
  }
}

