/*

The MIT License (MIT)

Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/


// Actually solves for Pr increamnet not presssure
@kernel void insPressureIpdgBCTet3D(const dlong Nelements,
                                     @restrict const  dlong  *  vmapM,
                                     const dfloat tau,
                                     const dfloat time,
                                     const dfloat dt,
                                     const int stage,
                                     const int ARKswitch,
                                     @restrict const  dfloat *  c,
                                     @restrict const  dfloat *  prkB,
                                     @restrict const  dfloat *  x,
                                     @restrict const  dfloat *  y,
                                     @restrict const  dfloat *  z,
                                     @restrict const  dfloat *  vgeo,
                                     @restrict const  dfloat *  sgeo,
                                     @restrict const  int    *  EToB,
                                     @restrict const  dfloat *  Dmatrices,
                                     @restrict const  dfloat *  LIFTT,
                                     @restrict const  dfloat *  MM,
                                           @restrict dfloat *  rhsP){
  for(dlong e=0;e<Nelements;++e;@outer(0)){
    @shared  dfloat s_dpdx[p_Np];
    @shared  dfloat s_dpdy[p_Np];
    @shared  dfloat s_dpdz[p_Np];
    @shared  dfloat s_lapp[p_Np];

    @shared  dfloat s_nxdp[p_NfacesNfp];
    @shared  dfloat s_nydp[p_NfacesNfp];
    @shared  dfloat s_nzdp[p_NfacesNfp];

    @shared  dfloat s_lappflux[p_NfacesNfp];
    @shared  dfloat s_Lnxdp[p_Np];
    @shared  dfloat s_Lnydp[p_Np];
    @shared  dfloat s_Lnzdp[p_Np];

    @exclusive dlong idM;
    @exclusive dfloat nx, ny,nz, sJ, invJ, hinv;
    
    for(int n=0;n<p_maxNodes;++n;@inner(0)){
      if(n<p_NfacesNfp){
        const dlong id  = n + e*p_Nfaces*p_Nfp;
        idM = vmapM[id];          
     
        const int face = n/p_Nfp;
        // load surface geofactors for this face
        const dlong sid = p_Nsgeo*(e*p_Nfaces+face);
        nx = sgeo[sid+p_NXID];
        ny = sgeo[sid+p_NYID];
        nz = sgeo[sid+p_NZID];
        sJ = sgeo[sid+p_SJID];
        invJ = sgeo[sid+p_IJID];
        hinv = sgeo[sid+p_IHID];
        
        dfloat dpdxP=0.f, dpdyP=0.f, dpdzP=0.f, pP=0;        

        const int bc = EToB[face+p_Nfaces*e];
        if(bc==3) {
          insPressureDirichletConditions3D(bc,time, x[idM], y[idM], z[idM], nx, ny, nz, 0.f, &pP);
          insPressureNeumannConditions3D(bc,time, x[idM], y[idM], z[idM], nx, ny, nz, 0.f, 0.f,0.f, &dpdxP, &dpdyP, &dpdzP);
            
          for (int s=0;s<stage;s++) {
            dfloat prkBn, ctime;
            if (ARKswitch) {
              prkBn = prkB[stage*(p_Nstages+1)+s];
              ctime = time-(c[stage]-c[s])*dt;
            } else {
              prkBn = prkB[s];
              ctime = time-(s+1)*dt;
            }
            
            dfloat pPm, dpdxPm, dpdyPm, dpdzPm;
            insPressureDirichletConditions3D(bc,ctime, x[idM], y[idM], z[idM], nx, ny, nz, 0.f, &pPm);
            insPressureNeumannConditions3D(bc,ctime, x[idM], y[idM], z[idM], nx, ny, nz, 0.f, 0.f,0.f, &dpdxPm, &dpdyPm, &dpdzPm);
          
            pP    -= prkBn*pPm;
            dpdxP -= prkBn*dpdxPm;
            dpdyP -= prkBn*dpdyPm;
            dpdzP -= prkBn*dpdzPm;
          }
        }
        const dfloat dp = pP;

        s_nxdp[n] = sJ*invJ*nx*dp;
        s_nydp[n] = sJ*invJ*ny*dp;
        s_nzdp[n] = sJ*invJ*nz*dp;

        s_lappflux[n] = sJ*invJ*(-nx*(dpdxP)-ny*(dpdyP)-nz*(dpdzP)-tau*hinv*dp);
      }
    }

    @barrier("local");

    // dqdx += LIFT*(sJ/J)*nx*dq
    for(int n=0;n<p_maxNodes;++n;@inner(0)){
      if(n<p_Np){
        const dlong gid = e*p_Nvgeo;
        const dfloat drdx = vgeo[gid + p_RXID];
        const dfloat drdy = vgeo[gid + p_RYID];
        const dfloat drdz = vgeo[gid + p_RZID];

        const dfloat dsdx = vgeo[gid + p_SXID];
        const dfloat dsdy = vgeo[gid + p_SYID];
        const dfloat dsdz = vgeo[gid + p_SZID];

        const dfloat dtdx = vgeo[gid + p_TXID];
        const dfloat dtdy = vgeo[gid + p_TYID];
        const dfloat dtdz = vgeo[gid + p_TZID];

        dfloat Lnxdp = 0.f;
        dfloat Lnydp = 0.f;
        dfloat Lnzdp = 0.f;

        #pragma unroll p_NfacesNfp
          for(int i=0;i<p_NfacesNfp;++i){
            const dfloat L = LIFTT[n+i*p_Np];
            Lnxdp += L*s_nxdp[i];
            Lnydp += L*s_nydp[i];
            Lnzdp += L*s_nzdp[i];
          }

        const dfloat dpdx = Lnxdp;
        const dfloat dpdy = Lnydp;
        const dfloat dpdz = Lnzdp;

        s_dpdx[n] = drdx*dpdx + drdy*dpdy + drdz*dpdz; // abuse of notation
        s_dpdy[n] = dsdx*dpdx + dsdy*dpdy + dsdz*dpdz;
        s_dpdz[n] = dtdx*dpdx + dtdy*dpdy + dtdz*dpdz;

        s_Lnxdp[n] = Lnxdp;
        s_Lnydp[n] = Lnydp;
        s_Lnzdp[n] = Lnzdp;
      }
    }

    @barrier("local");

    for(int n=0;n<p_maxNodes;++n;@inner(0)){
      if(n<p_NfacesNfp){
        const int id = idM%p_Np;
        s_lappflux[n] += sJ*invJ*(nx*s_Lnxdp[id]+ny*s_Lnydp[id]+nz*s_Lnzdp[id]);
      }

      if(n<p_Np){
        dfloat lapr = 0.f, laps = 0.f, lapt = 0.f;
        #pragma unroll p_Np
        for(int i=0;i<p_Np;++i) {
          lapr += Dmatrices[n+i*p_Np+0*p_Np*p_Np]*s_dpdx[i];
          laps += Dmatrices[n+i*p_Np+1*p_Np*p_Np]*s_dpdy[i];
          lapt += Dmatrices[n+i*p_Np+2*p_Np*p_Np]*s_dpdz[i];
        }

        s_lapp[n] = -(lapr+laps+lapt);
      }

    }

    @barrier("local");

    for(int n=0;n<p_maxNodes;++n;@inner(0)){
      if(n<p_Np){
        dfloat lap = 0.f;
        // lift remaining surface terms
        #pragma unroll p_NfacesNfp
        for(int i=0;i<p_NfacesNfp;++i){
          lap += LIFTT[n+i*p_Np]*s_lappflux[i];
        }
        s_lapp[n] += lap;
      }
    }

    @barrier("local");

    for(int n=0;n<p_maxNodes;++n;@inner(0)){
      if(n<p_Np){
        const dfloat J = vgeo[e*p_Nvgeo + p_JID];
        dfloat Mlapp = 0;
        // multiply by mass matrix
        #pragma unroll p_Np
        for(int i=0;i<p_Np;++i){
          Mlapp += MM[n+i*p_Np]*s_lapp[i];
        }

        const dlong id = e*p_Np+n;
        rhsP[id] -=  J*Mlapp;
      }
    }
  }
}

//RHS contributions for continuous solver
@kernel void insPressureBCTet3D(const dlong Nelements,
                                 @restrict const  dfloat *  ggeo,
                                 @restrict const  dfloat *  sgeo,
                                 @restrict const  dfloat *  Dmatrices,
                                 @restrict const  dfloat *  Smatrices,
                                 @restrict const  dlong  *  vmapM,
				@restrict const  int  *  EToB,	
                                 @restrict const  dfloat *  sMT,
                                 const dfloat time,
                                 const dfloat dt,
                                 const int stage,
                                 const int ARKswitch,
                                 @restrict const  dfloat *  c,
                                 @restrict const  dfloat *  prkB,
                                 @restrict const  dfloat *  x,
                                 @restrict const  dfloat *  y,
                                 @restrict const  dfloat *  z,
                                 @restrict const  int    *  mapB,
                                       @restrict dfloat *  rhsP){
  
  for(dlong e=0;e<Nelements;e++;@outer(0)){
    @shared dfloat s_q[p_Np];
    @shared dfloat s_ndq[p_Nfp*p_Nfaces];

    for(int n=0;n<p_maxNodes;++n;@inner(0)){
      if(n<p_Np){
        s_q[n] = 0.;
      }
      if(n<p_NfacesNfp){
        s_ndq[n] = 0.;
      }
    }

    @barrier("local");

    for(int n=0;n<p_maxNodes;++n;@inner(0)){
      if(n<p_NfacesNfp){
        const dlong id  = n + e*p_Nfaces*p_Nfp;
        const dlong idM = vmapM[id];          
        const int nid = idM%p_Np; 

        const int face = n/p_Nfp;

        dfloat dpdxP=0, dpdyP=0, dpdzP=0, pP=0;
        
        // load surface geofactors for this face
        const dlong sid = p_Nsgeo*(e*p_Nfaces+face);
        const dfloat nx = sgeo[sid+p_NXID];
        const dfloat ny = sgeo[sid+p_NYID];
        const dfloat nz = sgeo[sid+p_NZID];
        const dfloat sJ = sgeo[sid+p_SJID];

        const int bc = mapB[idM];
        if(bc==3) {
          insPressureDirichletConditions3D(bc,time, x[idM], y[idM], z[idM], nx, ny, nz, 0.f, &pP);
          insPressureNeumannConditions3D(bc,time, x[idM], y[idM], z[idM], nx, ny, nz, 0.f, 0.f,0.f, &dpdxP, &dpdyP, &dpdzP);
          
          for (int s=0;s<stage;s++) {
            dfloat prkBn, ctime;
            if (ARKswitch) {
              prkBn = prkB[stage*(p_Nstages+1)+s];
              ctime = time-(c[stage]-c[s])*dt;
            } else {
              prkBn = prkB[s];
              ctime = time-(s+1)*dt;
            }
            
            dfloat pPm, dpdxPm, dpdyPm, dpdzPm;
            insPressureDirichletConditions3D(bc,ctime, x[idM], y[idM], z[idM], nx, ny, nz, 0.f, &pPm);
            insPressureNeumannConditions3D(bc,ctime, x[idM], y[idM], z[idM], nx, ny, nz, 0.f, 0.f,0.f, &dpdxPm, &dpdyPm, &dpdzPm);
          
            pP    -= prkBn*pPm;
            dpdxP -= prkBn*dpdxPm;
            dpdyP -= prkBn*dpdyPm;
            dpdzP -= prkBn*dpdzPm;
          }
        } 

        s_q[nid] = pP;
        s_ndq[n] = sJ*(nx*dpdxP + ny*dpdyP + nz*dpdzP);
      }
    }

    @barrier("local");
    
    for(int n=0;n<p_maxNodes;++n;@inner(0)){ 
      if(n<p_Np){
        //volume Dirichlet data
        const dlong id = n + e*p_Np;
        const dlong gid = e*p_Nggeo;
        const dfloat Grr = ggeo[gid + p_G00ID];
        const dfloat Grs = ggeo[gid + p_G01ID];
        const dfloat Grt = ggeo[gid + p_G02ID];
        const dfloat Gss = ggeo[gid + p_G11ID];
        const dfloat Gst = ggeo[gid + p_G12ID];
        const dfloat Gtt = ggeo[gid + p_G22ID];

        dfloat qrr = 0.;
        dfloat qrs = 0.;
        dfloat qrt = 0.;
        dfloat qss = 0.;
        dfloat qst = 0.;
        dfloat qtt = 0.;

        #pragma unroll p_Np
          for (int k=0;k<p_Np;k++) {
            qrr += Smatrices[n+k*p_Np+0*p_Np*p_Np]*s_q[k];
            qrs += Smatrices[n+k*p_Np+1*p_Np*p_Np]*s_q[k];
            qrt += Smatrices[n+k*p_Np+2*p_Np*p_Np]*s_q[k];
            qss += Smatrices[n+k*p_Np+3*p_Np*p_Np]*s_q[k];
            qst += Smatrices[n+k*p_Np+4*p_Np*p_Np]*s_q[k];
            qtt += Smatrices[n+k*p_Np+5*p_Np*p_Np]*s_q[k];
          }

        dfloat Lndq = 0;            
        // surface mass * surface terms
        #pragma unroll p_NfacesNfp
          for(int i=0;i<p_NfacesNfp;++i){
            Lndq += sMT[n+i*p_Np]*s_ndq[i];
          }

        rhsP[id] -= Grr*qrr+Grs*qrs+Grt*qrt
                   +Gss*qss+Gst*qst+Gtt*qtt  - Lndq;
      }
    }
  }
}

@kernel void insPressureAddBCTet3D(const dlong Nelements,
                                 const dfloat time,
                                 const dfloat dt,
                                 const int stage,
                                 const int ARKswitch,
                                 @restrict const  dfloat *  c,
                                 @restrict const  dfloat *  prkB,
                                 @restrict const  dfloat *  x,
                                 @restrict const  dfloat *  y,
                                 @restrict const  dfloat *  z,
                                 @restrict const  dlong  *  vmapM,
                                 @restrict const  int    *  mapB,
                                       @restrict dfloat *  P){
  
  for(dlong e=0;e<Nelements;e++;@outer(0)){
    for(int n=0;n<p_Nfp*p_Nfaces;++n;@inner(0)){
      const dlong idM = vmapM[e*p_Nfp*p_Nfaces + n];
      const int bc = mapB[idM];

      if(bc==3) {
        dfloat pP = 0.f;
        insPressureDirichletConditions3D(bc,time, x[idM], y[idM], z[idM], nx, ny, nz, 0.f, &pP);
        
        for (int s=0;s<stage;s++) {
          dfloat prkBn, ctime;
          if (ARKswitch) {
            prkBn = prkB[stage*(p_Nstages+1)+s];
            ctime = time-(c[stage]-c[s])*dt;
          } else {
            prkBn = prkB[s];
            ctime = time-(s+1)*dt;
          }
          
          dfloat pPm;
          insPressureDirichletConditions3D(bc,ctime, x[idM], y[idM], z[idM], nx, ny, nz, 0.f, &pPm);
         
          pP    -= prkBn*pPm;
        }
        
        P[idM] = pP;
      }    
    }
  }
}
