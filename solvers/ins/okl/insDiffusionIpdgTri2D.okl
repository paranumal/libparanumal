/*

The MIT License (MIT)

Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/


@kernel void insDiffusionIpdgTri2D(const dlong Nelements,
                                @restrict const  dlong *  elementList,
                                @restrict const  dlong *  vmapM,
                                @restrict const  dlong *  vmapP,
                                const dfloat nu,
                                const dfloat tau,
                                @restrict const  dfloat *  vgeo,
                                @restrict const  dfloat *  sgeo,
                                @restrict const  int   *  EToB,
                                const dfloat time,
                                @restrict const  dfloat *  x,
                                @restrict const  dfloat *  y,
                                @restrict const  dfloat *  z,
                                const dlong fieldOffset,
                                @restrict const  dfloat *  Dmatrices,
                                @restrict const  dfloat *  LIFTT,
                                @restrict const  dfloat4 *  GU,
                                      @restrict dfloat  *  LU){

  for(dlong e=0;e<Nelements;++e;@outer(0)){

    @shared  dfloat s_dqdx[p_Np];
    @shared  dfloat s_dqdy[p_Np];
    @shared  dfloat s_nxdq[p_NfacesNfp];
    @shared  dfloat s_nydq[p_NfacesNfp];
    @shared  dfloat s_lapflux[p_NfacesNfp];
    @shared  dfloat s_Lnxdq[p_Np];
    @shared  dfloat s_Lnydq[p_Np];
    @exclusive dlong element;
    @exclusive dlong idM;
    @exclusive dfloat nx, ny, sJ, invJ, hinv;

    #pragma unroll p_NVfields
    for (int i=0; i<p_NVfields; i++) {

      @barrier("local");
      for(int n=0;n<p_maxNodes;++n;@inner(0)){
        element = elementList[e];

        if(n<p_Np){
          // assume that this stores (qx, qy, qz, q) as dfloat4
          const dfloat4 gradqn = GU[element*p_Np+n + i*fieldOffset];

          s_dqdx[n] = gradqn.x;
          s_dqdy[n] = gradqn.y;
        }

        if(n<p_NfacesNfp){
          const dlong id  = n + element*p_Nfaces*p_Nfp;
          idM = vmapM[id];
          const dlong idP = vmapP[id];
          // find face that owns this node
          const int face = n/p_Nfp;

          dfloat4 gradqM = GU[idM+i*fieldOffset];// could fetch from @shared after barrier
          dfloat4 gradqP = GU[idP+i*fieldOffset];

          // load surface geofactors for this face
          dlong sid = p_Nsgeo*(element*p_Nfaces+face);
          nx   = sgeo[sid+p_NXID];
          ny   = sgeo[sid+p_NYID];
          sJ   = sgeo[sid+p_SJID];
          invJ = sgeo[sid+p_IJID];
          hinv = sgeo[sid+p_IHID];

          int bc = EToB[face+p_Nfaces*element];
          if(bc>0) {
            dfloat4 UM[p_NVfields]; 
            dfloat4 UP[p_NVfields]; 

            //set all except field i zero. This assumes velocity boundaries are uncoupled
            for (int f=0;f<p_NVfields;f++) {
              UM[f].x = 0.;               
              UM[f].y = 0.;               
              UM[f].z = 0.;               
              UM[f].w = 0.;               
            }
            UM[i] = gradqM;
            //UP[i] = gradqM;
            insVelocityDirichletConditions2D(bc, time, x[idM], y[idM], nx, ny, UM[0].w, UM[1].w, \
                                                                             &(UP[0].w), &(UP[1].w));
            insVelocityNeumannConditions2D(bc, time, x[idM], y[idM], nx, ny, UM[0].x, UM[0].y, \
                                                                            UM[1].x, UM[1].y, \
                                                                            &(UP[0].x), &(UP[0].y), \
                                                                            &(UP[1].x), &(UP[1].y));

            gradqP.x = 2.f*UP[i].x - gradqM.x;
	    gradqP.y = 2.f*UP[i].y - gradqM.y;
	    gradqP.w = 2.f*UP[i].w - gradqM.w;
          }

          const dfloat dq = gradqP.w - gradqM.w;
          const dfloat hlf = 0.5f;

          s_nxdq[n] = hlf*sJ*invJ*nx*dq;
          s_nydq[n] = hlf*sJ*invJ*ny*dq;

          s_lapflux[n] = hlf*sJ*invJ*(-nx*(gradqP.x-gradqM.x)
                                      -ny*(gradqP.y-gradqM.y)
                                      -tau*hinv*dq);
        }
      }

      @barrier("local");

      // dqdx += LIFT*(sJ/J)*nx*dq
      for(int n=0;n<p_maxNodes;++n;@inner(0)){

        if(n<p_Np){
          const dlong gid = element*p_Nvgeo;
          const dfloat drdx = vgeo[gid + p_RXID];
          const dfloat drdy = vgeo[gid + p_RYID];
          const dfloat dsdx = vgeo[gid + p_SXID];
          const dfloat dsdy = vgeo[gid + p_SYID];

          dfloat Lnxdq = 0;
          dfloat Lnydq = 0;

          #pragma unroll p_NfacesNfp
            for(int k=0;k<p_NfacesNfp;++k){
              Lnxdq += LIFTT[n+k*p_Np]*s_nxdq[k];
              Lnydq += LIFTT[n+k*p_Np]*s_nydq[k];
            }

          dfloat dqdx = s_dqdx[n] + Lnxdq;
          dfloat dqdy = s_dqdy[n] + Lnydq;
          s_dqdx[n] = drdx*dqdx + drdy*dqdy; // abuse of notation
          s_dqdy[n] = dsdx*dqdx + dsdy*dqdy;

          s_Lnxdq[n] = Lnxdq;
          s_Lnydq[n] = Lnydq;
        }
      }

      @barrier("local");

      for(int n=0;n<p_maxNodes;++n;@inner(0)){
        if(n<p_NfacesNfp){
          int id = idM%p_Np;
          s_lapflux[n] += sJ*invJ*(nx*s_Lnxdq[id]+ny*s_Lnydq[id]);
        }
      }

      @barrier("local");

      for(int n=0;n<p_maxNodes;++n;@inner(0)){
        if(n<p_Np){
          dfloat LUn = 0.0;
          dfloat lapr = 0, laps = 0;

          #pragma unroll p_Np
            for(int k=0;k<p_Np;++k){
              lapr += Dmatrices[n+k*p_Np+0*p_Np*p_Np]*s_dqdx[k];
              laps += Dmatrices[n+k*p_Np+1*p_Np*p_Np]*s_dqdy[k];
            }

          LUn = -(lapr+laps);

          // lift remaining surface terms
          #pragma unroll p_NfacesNfp
            for(int k=0;k<p_NfacesNfp;++k){
              LUn += LIFTT[n+k*p_Np]*s_lapflux[k];
            }

          LU[n+element*p_Np +i*fieldOffset] = -nu*LUn;
        }
      }
    }
  }
}
