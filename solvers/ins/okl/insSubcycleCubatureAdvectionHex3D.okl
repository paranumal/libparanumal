/*

The MIT License (MIT)

Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

//unified @kernel, but might use too much memory
@kernel void insSubcycleAdvectionCubatureVolumeHex3D(const dlong Nelements,
                                           @restrict const  dfloat *  vgeo,
                                           @restrict const  dfloat *  cubvgeo,
                                           @restrict const  dfloat *  cubDT,
                                           @restrict const  dfloat *  cubPDT,
                                           @restrict const  dfloat *  cubInterp,
                                           @restrict const  dfloat *  cubProject,
                                           @restrict const  dfloat *  Ue,
                                           @restrict const  dfloat *  U,
                                                 @restrict  dfloat *  RHS){

  //----------------------------@kernel 1 interpolate velocity fields to quadrature points
  for(dlong e=0; e<Nelements; ++e; @outer(0)) {

    @shared dfloat s_cubDT[p_cubNq][p_cubNq];
    @shared dfloat s_cubInterp[p_Nq][p_cubNq];
    @shared dfloat s_cubProject[p_cubNq][p_Nq];


    @shared dfloat s_F11[p_cubNq][p_cubNq];
    @shared dfloat s_F12[p_cubNq][p_cubNq];
    @shared dfloat s_F13[p_cubNq][p_cubNq];
    @shared dfloat s_F21[p_cubNq][p_cubNq];
    @shared dfloat s_F22[p_cubNq][p_cubNq];
    @shared dfloat s_F23[p_cubNq][p_cubNq];
    @shared dfloat s_F31[p_cubNq][p_cubNq];
    @shared dfloat s_F32[p_cubNq][p_cubNq];
    @shared dfloat s_F33[p_cubNq][p_cubNq];

    #define s_U s_F11
    #define s_V s_F12
    #define s_W s_F13
    #define s_Ud s_F21
    #define s_Vd s_F22
    #define s_Wd s_F23

    #define s_NU s_F31
    #define s_NV s_F32
    #define s_NW s_F33

    @exclusive dfloat r_U[p_cubNq], r_V[p_cubNq], r_W[p_cubNq];
    @exclusive dfloat r_Ud[p_cubNq], r_Vd[p_cubNq], r_Wd[p_cubNq];
    @exclusive dfloat r_NU[p_cubNq], r_NV[p_cubNq], r_NW[p_cubNq];

    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
        const int id = i+j*p_cubNq;
        if (id<p_Nq*p_cubNq) {
          s_cubInterp[0][id] = cubInterp[id];
          s_cubProject[0][id] = cubProject[id];
        }
        s_cubDT[0][id] = cubDT[id];

        #pragma unroll p_cubNq
          for(int k=0;k<p_cubNq;++k){
            r_U[k] = 0.;
            r_V[k] = 0.;
            r_W[k] = 0.;
            r_Ud[k] = 0.;
            r_Vd[k] = 0.;
            r_Wd[k] = 0.;
            r_NU[k] = 0.;
            r_NV[k] = 0.;
            r_NW[k] = 0.;
          }
      }
    }

    @barrier("local");

    //read in and interpolate in k
    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
        if (i<p_Nq && j<p_Nq) {
          #pragma unroll p_Nq
          for(int k=0;k<p_Nq;++k){
            const dlong id = e*p_Np*p_NVfields + k*p_Nq*p_Nq + j*p_Nq + i;
            const dfloat uc = Ue[id+0*p_Np];
            const dfloat vc = Ue[id+1*p_Np];
            const dfloat wc = Ue[id+2*p_Np];
            const dfloat udc = U[id+0*p_Np];
            const dfloat vdc = U[id+1*p_Np];
            const dfloat wdc = U[id+2*p_Np];

            #pragma unroll p_cubNq
            for(int n=0;n<p_cubNq;++n){
              const dfloat Ik = s_cubInterp[k][n];
              r_U[n] += Ik*uc;
              r_V[n] += Ik*vc;
              r_W[n] += Ik*wc;
              r_Ud[n] += Ik*udc;
              r_Vd[n] += Ik*vdc;
              r_Wd[n] += Ik*wdc;
            }
          }
        }
      }
    }

    @barrier("local");

    #pragma unroll p_cubNq
    for(int k=0;k<p_cubNq;++k){
      //load slice to @shared
      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          if (i<p_Nq && j<p_Nq) {
            s_U[j][i] = r_U[k];
            s_V[j][i] = r_V[k];
            s_W[j][i] = r_W[k];
            s_Ud[j][i] = r_Ud[k];
            s_Vd[j][i] = r_Vd[k];
            s_Wd[j][i] = r_Wd[k];
          }
        }
      }

      @barrier("local");

      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          if(j<p_Nq){
            r_U[k] = 0; r_V[k] = 0; r_W[k] = 0;
            r_Ud[k] = 0; r_Vd[k] = 0; r_Wd[k] = 0;

            #pragma unroll p_Nq
            for (int n=0;n<p_Nq;n++) {
              const dfloat Ii = s_cubInterp[n][i];
              r_U[k] += Ii*s_U[j][n];
              r_V[k] += Ii*s_V[j][n];
              r_W[k] += Ii*s_W[j][n];
              r_Ud[k] += Ii*s_Ud[j][n];
              r_Vd[k] += Ii*s_Vd[j][n];
              r_Wd[k] += Ii*s_Wd[j][n];
            }
          }
        }
      }

      @barrier("local");

      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          if(j<p_Nq){
            s_U[j][i] = r_U[k];
            s_V[j][i] = r_V[k];
            s_W[j][i] = r_W[k];
            s_Ud[j][i] = r_Ud[k];
            s_Vd[j][i] = r_Vd[k];
            s_Wd[j][i] = r_Wd[k];
          }
        }
      }

      @barrier("local");

      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          r_U[k] = 0; r_V[k] = 0; r_W[k] = 0;
          r_Ud[k] = 0; r_Vd[k] = 0; r_Wd[k] = 0;

          #pragma unroll p_Nq
          for (int n=0;n<p_Nq;n++) {
            const dfloat Ij = s_cubInterp[n][j];
            r_U[k] += Ij*s_U[n][i];
            r_V[k] += Ij*s_V[n][i];
            r_W[k] += Ij*s_W[n][i];
            r_Ud[k] += Ij*s_Ud[n][i];
            r_Vd[k] += Ij*s_Vd[n][i];
            r_Wd[k] += Ij*s_Wd[n][i];
          }
        }
      }
      @barrier("local");
    }


    #pragma unroll p_cubNq
    for(int k=0;k<p_cubNq;++k){

      //fetch slice
      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          const dlong gid = e*p_cubNp*p_Nvgeo+ k*p_cubNq*p_cubNq + j*p_cubNq +i;
          const dfloat drdx = cubvgeo[gid + p_RXID*p_cubNp];
          const dfloat drdy = cubvgeo[gid + p_RYID*p_cubNp];
          const dfloat drdz = cubvgeo[gid + p_RZID*p_cubNp];
          const dfloat dsdx = cubvgeo[gid + p_SXID*p_cubNp];
          const dfloat dsdy = cubvgeo[gid + p_SYID*p_cubNp];
          const dfloat dsdz = cubvgeo[gid + p_SZID*p_cubNp];
          const dfloat dtdx = cubvgeo[gid + p_TXID*p_cubNp];
          const dfloat dtdy = cubvgeo[gid + p_TYID*p_cubNp];
          const dfloat dtdz = cubvgeo[gid + p_TZID*p_cubNp];
          const dfloat JW   = cubvgeo[gid + p_JWID*p_cubNp];

          const dfloat Un = r_U[k];
          const dfloat Vn = r_V[k];
          const dfloat Wn = r_W[k];
          const dfloat Udn = r_Ud[k];
          const dfloat Vdn = r_Vd[k];
          const dfloat Wdn = r_Wd[k];

          const dfloat cUn = JW*(drdx*Un+drdy*Vn+drdz*Wn);
          const dfloat cVn = JW*(dsdx*Un+dsdy*Vn+dsdz*Wn);
          const dfloat cWn = JW*(dtdx*Un+dtdy*Vn+dtdz*Wn);

          s_F11[j][i] = cUn*Udn;
          s_F12[j][i] = cVn*Udn;
          s_F13[j][i] = cWn*Udn;
          s_F21[j][i] = cUn*Vdn;
          s_F22[j][i] = cVn*Vdn;
          s_F23[j][i] = cWn*Vdn;
          s_F31[j][i] = cUn*Wdn;
          s_F32[j][i] = cVn*Wdn;
          s_F33[j][i] = cWn*Wdn;
        }
      }

      @barrier("local");

      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          #pragma unroll p_cubNq
            for (int n=0;n<p_cubNq;n++) {
              const dfloat Dr = s_cubDT[n][i];
              const dfloat Ds = s_cubDT[n][j];
              const dfloat Dt = s_cubDT[k][n];
              r_NU[k] += Dr*s_F11[j][n];
              r_NV[k] += Dr*s_F21[j][n];
              r_NW[k] += Dr*s_F31[j][n];

              r_NU[k] += Ds*s_F12[n][i];
              r_NV[k] += Ds*s_F22[n][i];
              r_NW[k] += Ds*s_F32[n][i];

              r_NU[n] += Dt*s_F13[j][i];
              r_NV[n] += Dt*s_F23[j][i];
              r_NW[n] += Dt*s_F33[j][i];
            }
        }
      }

      @barrier("local");
    } //k loop


    #pragma unroll p_cubNq
    for(int k=0;k<p_cubNq;++k){
      //load slice to @shared
      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          s_NU[j][i] = r_NU[k];
          s_NV[j][i] = r_NV[k];
          s_NW[j][i] = r_NW[k];
        }
      }

      @barrier("local");

      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          if(j<p_Nq){
            r_NU[k] = 0; r_NV[k] = 0; r_NW[k] = 0;

            #pragma unroll p_cubNq
            for (int n=0;n<p_cubNq;n++) {
              const dfloat Pj = s_cubProject[n][j];
              r_NU[k] += Pj*s_NU[n][i];
              r_NV[k] += Pj*s_NV[n][i];
              r_NW[k] += Pj*s_NW[n][i];
            }
          }
        }
      }

      @barrier("local");

      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          if(j<p_Nq){
            s_NU[j][i] = r_NU[k];
            s_NV[j][i] = r_NV[k];
            s_NW[j][i] = r_NW[k];
          }
        }
      }

      @barrier("local");

      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          if ((i<p_Nq) && (j<p_Nq)) {
            r_NU[k] = 0; r_NV[k] = 0; r_NW[k] = 0;

            #pragma unroll p_cubNq
            for (int n=0;n<p_cubNq;n++) {
              const dfloat Pi = s_cubProject[n][i];
              r_NU[k] += Pi*s_NU[j][n];
              r_NV[k] += Pi*s_NV[j][n];
              r_NW[k] += Pi*s_NW[j][n];
            }
          }
        }
      }

      @barrier("local");
    }

    //project in k and write out
    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
        if ((i<p_Nq) && (j<p_Nq)) {
          #pragma unroll p_Nq
          for(int k=0;k<p_Nq;++k){
            dfloat nu=0., nv=0., nw=0.;

            #pragma unroll p_cubNq
            for(int n=0;n<p_cubNq;++n){
              const dfloat Pk = s_cubProject[n][k];
              nu += Pk*r_NU[n];
              nv += Pk*r_NV[n];
              nw += Pk*r_NW[n];
            }

            const dlong gid = e*p_Np*p_Nvgeo+ k*p_Nq*p_Nq + j*p_Nq +i;
            const dfloat invJW = vgeo[gid + p_IJWID*p_Np];

            const dlong id = e*p_Np*p_NVfields + k*p_Nq*p_Nq + j*p_Nq + i;
            RHS[id+0*p_Np] = invJW*nu;
            RHS[id+1*p_Np] = invJW*nv;
            RHS[id+2*p_Np] = invJW*nw;
          }
        }
      }
    }
  }
}

#define quadSurfaceTerms(face)                                          \
  {                                                                     \
    for(int j=0;j<p_cubNq;++j;@inner(1)){                               \
      for(int i=0;i<p_cubNq;++i;@inner(0)){                             \
        if(i<p_Nq && j<p_Nq){                                           \
          const dlong id  = e*p_Nfp*p_Nfaces + face*p_Nfp + j*p_Nq +i;  \
          const dlong idM = vmapM[id];                                  \
          const dlong idP = vmapP[id];                                  \
          const dlong eM = e;                                           \
          const dlong eP = idP/p_Np;                                    \
          const int vidM = idM%p_Np;                                    \
          const int vidP = idP%p_Np;                                    \
                                                                        \
          const dlong qbaseM = eM*p_Np*p_NVfields + vidM;               \
          const dlong qbaseP = eP*p_Np*p_NVfields + vidP;               \
                                                                        \
          s_UM[j][i] = Ue[qbaseM+0*p_Np];                               \
          s_VM[j][i] = Ue[qbaseM+1*p_Np];                               \
          s_WM[j][i] = Ue[qbaseM+2*p_Np];                               \
          s_UP[j][i] = Ue[qbaseP+0*p_Np];                               \
          s_VP[j][i] = Ue[qbaseP+1*p_Np];                               \
          s_WP[j][i] = Ue[qbaseP+2*p_Np];                               \
        }                                                               \
      }                                                                 \
    }                                                                   \
                                                                        \
    @barrier("local");                                                  \
                                                                        \
    for(int j=0;j<p_cubNq;++j;@inner(1)){                               \
      for(int i=0;i<p_cubNq;++i;@inner(0)){                             \
        if (j<p_Nq) {                                                   \
          r_UMn = 0.; r_VMn = 0.; r_WMn = 0.;                           \
          r_UPn = 0.; r_VPn = 0.; r_WPn = 0.;                           \
          for (int n=0;n<p_Nq;n++) {                                    \
            const dfloat Ini = s_cubInterp[n][i];                      \
            r_UMn  += Ini*s_UM[j][n];                                   \
            r_VMn  += Ini*s_VM[j][n];                                   \
            r_WMn  += Ini*s_WM[j][n];                                   \
            r_UPn  += Ini*s_UP[j][n];                                   \
            r_VPn  += Ini*s_VP[j][n];                                   \
            r_WPn  += Ini*s_WP[j][n];                                   \
          }                                                             \
        }                                                               \
      }                                                                 \
    }                                                                   \
                                                                        \
    @barrier("local");                                                  \
                                                                        \
    for(int j=0;j<p_cubNq;++j;@inner(1)){                               \
      for(int i=0;i<p_cubNq;++i;@inner(0)){                             \
        if (j<p_Nq) {                                                   \
          s_UM[j][i] = r_UMn;                                           \
          s_VM[j][i] = r_VMn;                                           \
          s_WM[j][i] = r_WMn;                                           \
          s_UP[j][i] = r_UPn;                                           \
          s_VP[j][i] = r_VPn;                                           \
          s_WP[j][i] = r_WPn;                                           \
        }                                                               \
      }                                                                 \
    }                                                                   \
                                                                        \
    @barrier("local");                                                  \
                                                                        \
    for(int j=0;j<p_cubNq;++j;@inner(1)){                               \
      for(int i=0;i<p_cubNq;++i;@inner(0)){                             \
        r_UMn = 0.; r_VMn = 0.; r_WMn = 0.;                             \
        r_UPn = 0.; r_VPn = 0.; r_WPn = 0.;                             \
        for (int n=0;n<p_Nq;n++) {                                      \
          const dfloat Inj = s_cubInterp[n][j];                        \
          r_UMn += Inj*s_UM[n][i];                                      \
          r_VMn += Inj*s_VM[n][i];                                      \
          r_WMn += Inj*s_WM[n][i];                                      \
          r_UPn += Inj*s_UP[n][i];                                      \
          r_VPn += Inj*s_VP[n][i];                                      \
          r_WPn += Inj*s_WP[n][i];                                      \
        }                                                               \
      }                                                                 \
    }                                                                   \
                                                                        \
    @barrier("local");                                                  \
                                                                        \
    for(int j=0;j<p_cubNq;++j;@inner(1)){                               \
      for(int i=0;i<p_cubNq;++i;@inner(0)){                             \
        if(i<p_Nq && j<p_Nq){                                           \
          const dlong id  = e*p_Nfp*p_Nfaces + face*p_Nfp + j*p_Nq +i;  \
          const dlong idM = vmapM[id];                                  \
          const dlong idP = vmapP[id];                                  \
          const dlong eM = e;                                           \
          const dlong eP = idP/p_Np;                                    \
          const int vidM = idM%p_Np;                                    \
          const int vidP = idP%p_Np;                                    \
                                                                        \
          const dlong qbaseM = eM*p_Np*p_NVfields + vidM;               \
          const dlong qbaseP = eP*p_Np*p_NVfields + vidP;               \
                                                                        \
          s_UM[j][i] = U[qbaseM+0*p_Np];                                \
          s_VM[j][i] = U[qbaseM+1*p_Np];                                \
          s_WM[j][i] = U[qbaseM+2*p_Np];                                \
          s_UP[j][i] = U[qbaseP+0*p_Np];                                \
          s_VP[j][i] = U[qbaseP+1*p_Np];                                \
          s_WP[j][i] = U[qbaseP+2*p_Np];                                \
        }                                                               \
      }                                                                 \
    }                                                                   \
                                                                        \
    @barrier("local");                                                  \
                                                                        \
    for(int j=0;j<p_cubNq;++j;@inner(1)){                               \
      for(int i=0;i<p_cubNq;++i;@inner(0)){                             \
        if (j<p_Nq) {                                                   \
          r_UdMn = 0.; r_VdMn = 0.; r_WdMn = 0.;                        \
          r_UdPn = 0.; r_VdPn = 0.; r_WdPn = 0.;                        \
          for (int n=0;n<p_Nq;n++) {                                    \
            const dfloat Ini = s_cubInterp[n][i];                      \
            r_UdMn  += Ini*s_UM[j][n];                                  \
            r_VdMn  += Ini*s_VM[j][n];                                  \
            r_WdMn  += Ini*s_WM[j][n];                                  \
            r_UdPn  += Ini*s_UP[j][n];                                  \
            r_VdPn  += Ini*s_VP[j][n];                                  \
            r_WdPn  += Ini*s_WP[j][n];                                  \
          }                                                             \
        }                                                               \
      }                                                                 \
    }                                                                   \
                                                                        \
    @barrier("local");                                                  \
                                                                        \
    for(int j=0;j<p_cubNq;++j;@inner(1)){                               \
      for(int i=0;i<p_cubNq;++i;@inner(0)){                             \
        if (j<p_Nq) {                                                   \
          s_UM[j][i] = r_UdMn;                                          \
          s_VM[j][i] = r_VdMn;                                          \
          s_WM[j][i] = r_WdMn;                                          \
          s_UP[j][i] = r_UdPn;                                          \
          s_VP[j][i] = r_VdPn;                                          \
          s_WP[j][i] = r_WdPn;                                          \
        }                                                               \
      }                                                                 \
    }                                                                   \
                                                                        \
    @barrier("local");                                                  \
                                                                        \
    for(int j=0;j<p_cubNq;++j;@inner(1)){                               \
      for(int i=0;i<p_cubNq;++i;@inner(0)){                             \
        r_UdMn = 0.; r_VdMn = 0.; r_WdMn = 0.;                          \
        r_UdPn = 0.; r_VdPn = 0.; r_WdPn = 0.;                          \
        for (int n=0;n<p_Nq;n++) {                                      \
          const dfloat Inj = s_cubInterp[n][j];                        \
          r_UdMn += Inj*s_UM[n][i];                                     \
          r_VdMn += Inj*s_VM[n][i];                                     \
          r_WdMn += Inj*s_WM[n][i];                                     \
          r_UdPn += Inj*s_UP[n][i];                                     \
          r_VdPn += Inj*s_VP[n][i];                                     \
          r_WdPn += Inj*s_WP[n][i];                                     \
        }                                                               \
      }                                                                 \
    }                                                                   \
                                                                        \
    @barrier("local");                                                  \
                                                                        \
    for(int j=0;j<p_cubNq;++j;@inner(1)){                               \
      for(int i=0;i<p_cubNq;++i;@inner(0)){                             \
        const dlong sk = e*p_cubNfp*p_Nfaces + face*p_cubNfp + j*p_cubNq + i; \
        const dfloat nx = cubsgeo[sk*p_Nsgeo+p_NXID];                   \
        const dfloat ny = cubsgeo[sk*p_Nsgeo+p_NYID];                   \
        const dfloat nz = cubsgeo[sk*p_Nsgeo+p_NZID];                   \
        const dfloat WsJ = cubsgeo[sk*p_Nsgeo+p_WSJID];                 \
        const dfloat uM = r_UMn, vM = r_VMn, wM = r_WMn;                \
        const dfloat uP = r_UPn, vP = r_VPn, wP = r_WPn;                \
        const dfloat udM = r_UdMn, vdM = r_VdMn, wdM = r_WdMn;          \
        dfloat udP = r_UdPn, vdP = r_VdPn, wdP = r_WdPn;                \
                                                                        \
        const int bc = EToB[face+p_Nfaces*e];                           \
        if(bc>0) {                                                      \
          insVelocityDirichletConditions3D(bc, nu, time, intx[e*p_Nfaces*p_cubNfp + face*p_cubNfp + j*p_cubNq + i], \
                                           inty[e*p_Nfaces*p_cubNfp + face*p_cubNfp + j*p_cubNq + i], \
                                           intz[e*p_Nfaces*p_cubNfp + face*p_cubNfp + j*p_cubNq + i], nx, ny, nz, udM, vdM, wdM, &udP, &vdP, &wdP); \
        }                                                               \
                                                                        \
        const dfloat unM   = fabs(nx*uM + ny*vM + nz*wM);               \
        const dfloat unP   = fabs(nx*uP + ny*vP + nz*wP);               \
        const dfloat unMax = (unM > unP) ? unM : unP;                   \
                                                                        \
        s_fluxNU[j][i] = WsJ*(.5f*(nx*(uP*udP + uM*udM)                 \
                                   + ny*(vP*udP + vM*udM)               \
                                   + nz*(wP*udP + wM*udM)  + unMax*(udM-udP) )); \
        s_fluxNV[j][i] = WsJ*(.5f*(nx*(uP*vdP + uM*vdM)                 \
                                   + ny*(vP*vdP + vM*vdM)               \
                                   + nz*(wP*vdP + wM*vdM)  + unMax*(vdM-vdP) )); \
        s_fluxNW[j][i] = WsJ*(.5f*(nx*(uP*wdP + uM*wdM)                 \
                                   + ny*(vP*wdP + vM*wdM)               \
                                   + nz*(wP*wdP + wM*wdM)  + unMax*(wdM-wdP) )); \
      }                                                                 \
    }                                                                   \
                                                                        \
    @barrier("local");                                                  \
                                                                        \
    for(int j=0;j<p_cubNq;++j;@inner(1)){                               \
      for(int i=0;i<p_cubNq;++i;@inner(0)){                             \
        if (j<p_Nq) {                                                   \
          r_NUn = 0.; r_NVn = 0.; r_NWn = 0.;                           \
          for (int n=0;n<p_cubNq;n++) {                                 \
            const dfloat Pnj = s_cubProject[n][j];                     \
            r_NUn  += Pnj*s_fluxNU[n][i];                               \
            r_NVn  += Pnj*s_fluxNV[n][i];                               \
            r_NWn  += Pnj*s_fluxNW[n][i];                               \
          }                                                             \
        }                                                               \
      }                                                                 \
    }                                                                   \
                                                                        \
    @barrier("local");                                                  \
                                                                        \
    for(int j=0;j<p_cubNq;++j;@inner(1)){                               \
      for(int i=0;i<p_cubNq;++i;@inner(0)){                             \
        if (j<p_Nq) {                                                   \
          s_fluxNU[j][i] = r_NUn;                                       \
          s_fluxNV[j][i] = r_NVn;                                       \
          s_fluxNW[j][i] = r_NWn;                                       \
        }                                                               \
      }                                                                 \
    }                                                                   \
    @barrier("local");                                                  \
                                                                        \
    for(int j=0;j<p_cubNq;++j;@inner(1)){                               \
      for(int i=0;i<p_cubNq;++i;@inner(0)){                             \
        if (j<p_Nq && i<p_Nq) {                                         \
          r_NUn = 0.; r_NVn = 0.; r_NWn = 0.;                           \
          for(int n=0;n<p_cubNq;++n){                                   \
            const dfloat Pni = s_cubProject[n][i];                     \
            r_NUn += Pni*s_fluxNU[j][n];                                \
            r_NVn += Pni*s_fluxNV[j][n];                                \
            r_NWn += Pni*s_fluxNW[j][n];                                \
          }                                                             \
        }                                                               \
      }                                                                 \
    }                                                                   \
                                                                        \
    @barrier("local");                                                  \
                                                                        \
    for(int j=0;j<p_cubNq;++j;@inner(1)){                               \
      for(int i=0;i<p_cubNq;++i;@inner(0)){                             \
        if (j<p_Nq && i<p_Nq) {                                         \
          s_fluxNU[j][i] = r_NUn;                                       \
          s_fluxNV[j][i] = r_NVn;                                       \
          s_fluxNW[j][i] = r_NWn;                                       \
        }                                                               \
      }                                                                 \
    }                                                                   \
  }


@kernel void insSubcycleAdvectionCubatureSurfaceHex3D(const dlong Nelements,
                                            @restrict const  dfloat *  vgeo,
                                            @restrict const  dfloat *  cubsgeo,
                                            @restrict const  dfloat *  cubInterp,
                                            @restrict const  dfloat *  cubProject,
                                            @restrict const  dlong  *  vmapM,
                                            @restrict const  dlong  *  vmapP,
                                            @restrict const  int    *  EToB,
                                            const dfloat time,
                                            @restrict const  dfloat *  intx,
                                            @restrict const  dfloat *  inty,
                                            @restrict const  dfloat *  intz,
                                            const dfloat nu,
                                            @restrict const  dfloat *  Ue,
                                            @restrict const  dfloat *  U,
                                                  @restrict  dfloat *  RHS){

  // for all elements
  for(dlong e=0;e<Nelements;e++;@outer(0)){
    // @shared storage for flux terms
    @exclusive dfloat r_NU[p_Nq], r_NV[p_Nq], r_NW[p_Nq];

    @shared dfloat s_UM[p_cubNq][p_cubNq];
    @shared dfloat s_VM[p_cubNq][p_cubNq];
    @shared dfloat s_WM[p_cubNq][p_cubNq];
    @shared dfloat s_UP[p_cubNq][p_cubNq];
    @shared dfloat s_VP[p_cubNq][p_cubNq];
    @shared dfloat s_WP[p_cubNq][p_cubNq];

    // reuse @shared memory buffers
    #define s_fluxNU s_UM
    #define s_fluxNV s_VM
    #define s_fluxNW s_WM

    @exclusive dfloat r_UMn, r_VMn, r_WMn;
    @exclusive dfloat r_UPn, r_VPn, r_WPn;
    @exclusive dfloat r_UdMn, r_VdMn, r_WdMn;
    @exclusive dfloat r_UdPn, r_VdPn, r_WdPn;

    #define r_NUn r_UMn
    #define r_NVn r_VMn
    #define r_NWn r_WMn

    @shared dfloat s_cubInterp[p_Nq][p_cubNq];
    @shared dfloat s_cubProject[p_cubNq][p_Nq];

    // for all face nodes of all elements
    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
        //zero out resulting surface contributions
        #pragma unroll p_Nq
        for(int k=0;k<p_Nq;++k){
          r_NU[k] = 0.;
          r_NV[k] = 0.;
          r_NW[k] = 0.;
        }

        //fetch reference operators
        const int id = i+j*p_cubNq;
        if (id<p_Nq*p_cubNq) {
          s_cubInterp[0][id] = cubInterp[id];
          s_cubProject[0][id] = cubProject[id];
        }
      }
    }

    @barrier("local");

    quadSurfaceTerms(0) //face 0

    @barrier("local");

    //accumulate in register pencil
    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
        if (j<p_Nq && i<p_Nq) {
          r_NU[0] += s_fluxNU[j][i];
          r_NV[0] += s_fluxNV[j][i];
          r_NW[0] += s_fluxNW[j][i];
        }
      }
    }

    @barrier("local");

    quadSurfaceTerms(5) //face 5

    @barrier("local");

    //accumulate in register pencil
    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
        if (j<p_Nq && i<p_Nq) {
          r_NU[p_Nq-1] += s_fluxNU[j][i];
          r_NV[p_Nq-1] += s_fluxNV[j][i];
          r_NW[p_Nq-1] += s_fluxNW[j][i];
        }
      }
    }

    @barrier("local");

    quadSurfaceTerms(1) //face 1

    @barrier("local");

    //accumulate in register pencil
    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
        if (j==0 && i<p_Nq) {//face 1
          #pragma unroll p_Nq
          for (int n=0;n<p_Nq;n++) {
            r_NU[n] += s_fluxNU[n][i];
            r_NV[n] += s_fluxNV[n][i];
            r_NW[n] += s_fluxNW[n][i];
          }
        }
      }
    }

    @barrier("local");

    quadSurfaceTerms(3) //face 3

    @barrier("local");

    //accumulate in register pencil
    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
        if (j==p_Nq-1 && i<p_Nq) {//face 3
          #pragma unroll p_Nq
          for (int n=0;n<p_Nq;n++) {
            r_NU[n] += s_fluxNU[n][i];
            r_NV[n] += s_fluxNV[n][i];
            r_NW[n] += s_fluxNW[n][i];
          }
        }
      }
    }

    @barrier("local");

    quadSurfaceTerms(2) //face 2

    @barrier("local");

    //accumulate in register pencil
    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
        if (j<p_Nq && i==p_Nq-1) {//face 2
          #pragma unroll p_Nq
          for (int n=0;n<p_Nq;n++) {
            r_NU[n] += s_fluxNU[n][j];
            r_NV[n] += s_fluxNV[n][j];
            r_NW[n] += s_fluxNW[n][j];
          }
        }
      }
    }

    @barrier("local");

    quadSurfaceTerms(4) //face 4

    @barrier("local");

    //accumulate in register pencil
    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
        if (j<p_Nq && i==0) {//face 4
          #pragma unroll p_Nq
          for (int n=0;n<p_Nq;n++) {
            r_NU[n] += s_fluxNU[n][j];
            r_NV[n] += s_fluxNV[n][j];
            r_NW[n] += s_fluxNW[n][j];
          }
        }
      }
    }

    @barrier("local");

    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
        if(i<p_Nq && j<p_Nq){
          #pragma unroll p_Nq
          for(int k=0;k<p_Nq;++k){
            const dlong gid = e*p_Np*p_Nvgeo+ k*p_Nq*p_Nq + j*p_Nq +i;
            const dfloat invJW = vgeo[gid + p_IJWID*p_Np];

            const dlong id = e*p_Np*p_NVfields + k*p_Nq*p_Nq + j*p_Nq + i;

            RHS[id+0*p_Np] -= invJW*r_NU[k];
            RHS[id+1*p_Np] -= invJW*r_NV[k];
            RHS[id+2*p_Np] -= invJW*r_NW[k];
          }
        }
      }
    }
  }
}
#undef quadSurfaceTerms

#if 0
/* ------------------Quadrature @kernels ----------------------------------*/
@kernel void insSubcycleAdvectionCubatureVolumeHex3D(const dlong Nelements,
                                           @restrict const  dfloat *  vgeo,
                                           @restrict const  dfloat *  cubvgeo,
                                           @restrict const  dfloat *  cubDT,
                                           @restrict const  dfloat *  cubInterp,
                                           @restrict const  dfloat *  cubProject,
                                           const dlong p_Np,
                                           @restrict const  dfloat *  Ue,
                                           @restrict const  dfloat *  U,
                                                 @restrict dfloat *  cU, //storage for interpolated fields
                                                 @restrict dfloat *  cUd, //storage for interpolated fields
                                                 @restrict dfloat *  RHS){

  //----------------------------@kernel 1 interpolate velocity fields to quadrature points
  for(dlong e=0; e<Nelements; ++e; @outer(0)) {

    @shared dfloat s_U[p_Nq][p_cubNq];
    @shared dfloat s_V[p_Nq][p_cubNq];
    @shared dfloat s_W[p_Nq][p_cubNq];
    @shared dfloat s_cubInterp[p_Nq][p_cubNq];

    @exclusive dfloat r_U[p_cubNq], r_V[p_cubNq], r_W[p_cubNq];

    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
        const int id = i+j*p_cubNq;
        if (id<p_Nq*p_cubNq) {
          s_cubInterp[0][id] = cubInterp[id];
        }

        #pragma unroll p_cubNq
          for(int k=0;k<p_cubNq;++k){
            r_U[k] = 0.;
            r_V[k] = 0.;
            r_W[k] = 0.;
          }
      }
    }

    @barrier("local");

    //read in and interpolate in k
    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
        if (i<p_Nq && j<p_Nq) {
          #pragma unroll p_Nq
          for(int k=0;k<p_Nq;++k){
            const dlong id = e*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;
            const dfloat uc = Ue[id+0*p_Np];
            const dfloat vc = Ue[id+1*p_Np];
            const dfloat wc = Ue[id+2*p_Np];

            #pragma unroll p_cubNq
            for(int n=0;n<p_cubNq;++n){
              const dfloat Ik = s_cubInterp[k][n];
              r_U[n] += Ik*uc;
              r_V[n] += Ik*vc;
              r_W[n] += Ik*wc;
            }
          }
        }
      }
    }

    @barrier("local");

    #pragma unroll p_cubNq
    for(int k=0;k<p_cubNq;++k){
      //load slice to @shared
      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          if (i<p_Nq && j<p_Nq) {
            s_U[j][i] = r_U[k];
            s_V[j][i] = r_V[k];
            s_W[j][i] = r_W[k];
          }
        }
      }

      @barrier("local");

      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          if(j<p_Nq){
            r_U[k] = 0; r_V[k] = 0; r_W[k] = 0;

            #pragma unroll p_Nq
            for (int n=0;n<p_Nq;n++) {
              const dfloat Ii = s_cubInterp[n][i];
              r_U[k] += Ii*s_U[j][n];
              r_V[k] += Ii*s_V[j][n];
              r_W[k] += Ii*s_W[j][n];
            }
          }
        }
      }

      @barrier("local");

      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          if(j<p_Nq){
            s_U[j][i] = r_U[k];
            s_V[j][i] = r_V[k];
            s_W[j][i] = r_W[k];
          }
        }
      }

      @barrier("local");

      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          r_U[k] = 0; r_V[k] = 0; r_W[k] = 0;

          #pragma unroll p_Nq
          for (int n=0;n<p_Nq;n++) {
            const dfloat Ij = s_cubInterp[n][j];
            r_U[k] += Ij*s_U[n][i];
            r_V[k] += Ij*s_V[n][i];
            r_W[k] += Ij*s_W[n][i];
          }

          const dlong id =e*p_cubNp + k*p_cubNq*p_cubNq + j*p_cubNq + i;
          cU[id+0*p_Np] = r_U[k];
          cU[id+1*p_Np] = r_V[k];
          cU[id+2*p_Np] = r_W[k];
        }
      }
      @barrier("local");
    }

    //read in and interpolate in k
    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
        #pragma unroll p_cubNq
          for(int k=0;k<p_cubNq;++k){
            r_U[k] = 0.;
            r_V[k] = 0.;
            r_W[k] = 0.;
          }

        if (i<p_Nq && j<p_Nq) {
          #pragma unroll p_Nq
          for(int k=0;k<p_Nq;++k){
            const dlong id = e*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;
            const dfloat uc = U[id+0*p_Np];
            const dfloat vc = U[id+1*p_Np];
            const dfloat wc = U[id+2*p_Np];

            #pragma unroll p_cubNq
            for(int n=0;n<p_cubNq;++n){
              const dfloat Ik = s_cubInterp[k][n];
              r_U[n] += Ik*uc;
              r_V[n] += Ik*vc;
              r_W[n] += Ik*wc;
            }
          }
        }
      }
    }

    @barrier("local");

    #pragma unroll p_cubNq
    for(int k=0;k<p_cubNq;++k){
      //load slice to @shared
      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          if (i<p_Nq && j<p_Nq) {
            s_U[j][i] = r_U[k];
            s_V[j][i] = r_V[k];
            s_W[j][i] = r_W[k];
          }
        }
      }

      @barrier("local");

      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          if(j<p_Nq){
            r_U[k] = 0; r_V[k] = 0; r_W[k] = 0;

            #pragma unroll p_Nq
            for (int n=0;n<p_Nq;n++) {
              const dfloat Ii = s_cubInterp[n][i];
              r_U[k] += Ii*s_U[j][n];
              r_V[k] += Ii*s_V[j][n];
              r_W[k] += Ii*s_W[j][n];
            }
          }
        }
      }

      @barrier("local");

      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          if(j<p_Nq){
            s_U[j][i] = r_U[k];
            s_V[j][i] = r_V[k];
            s_W[j][i] = r_W[k];
          }
        }
      }

      @barrier("local");

      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          r_U[k] = 0; r_V[k] = 0; r_W[k] = 0;

          #pragma unroll p_Nq
          for (int n=0;n<p_Nq;n++) {
            const dfloat Ij = s_cubInterp[n][j];
            r_U[k] += Ij*s_U[n][i];
            r_V[k] += Ij*s_V[n][i];
            r_W[k] += Ij*s_W[n][i];
          }

          const dlong id =e*p_cubNp + k*p_cubNq*p_cubNq + j*p_cubNq + i;
          cUd[id+0*p_Np] = r_U[k];
          cUd[id+1*p_Np] = r_V[k];
          cUd[id+2*p_Np] = r_W[k];
        }
      }
      @barrier("local");
    }
  }

  @barrier("global");

  //-----------------------------@kernel 2 do the reference divergence
  for(dlong e=0; e<Nelements; ++e; @outer(0)) {

    @shared dfloat s_F11[p_cubNq][p_cubNq];
    @shared dfloat s_F12[p_cubNq][p_cubNq];
    @shared dfloat s_F13[p_cubNq][p_cubNq];
    @shared dfloat s_F21[p_cubNq][p_cubNq];
    @shared dfloat s_F22[p_cubNq][p_cubNq];
    @shared dfloat s_F23[p_cubNq][p_cubNq];
    @shared dfloat s_F31[p_cubNq][p_cubNq];
    @shared dfloat s_F32[p_cubNq][p_cubNq];
    @shared dfloat s_F33[p_cubNq][p_cubNq];

    @shared dfloat s_cubDT[p_cubNq][p_cubNq];

    @exclusive dfloat r_NU[p_cubNq], r_NV[p_cubNq], r_NW[p_cubNq];

    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
        const int id = i+j*p_cubNq;
        s_cubDT[0][id] = cubDT[id];

        #pragma unroll p_cubNq
          for(int k=0;k<p_cubNq;++k){
            r_NU[k] = 0.;
            r_NV[k] = 0.;
            r_NW[k] = 0.;
          }
      }
    }

    @barrier("local");

    #pragma unroll p_cubNq
    for(int k=0;k<p_cubNq;++k){

      //fetch slice
      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          const dlong gid = e*p_cubNp*p_Nvgeo+ k*p_cubNq*p_cubNq + j*p_cubNq +i;
          const dfloat drdx = cubvgeo[gid + p_RXID*p_cubNp];
          const dfloat drdy = cubvgeo[gid + p_RYID*p_cubNp];
          const dfloat drdz = cubvgeo[gid + p_RZID*p_cubNp];
          const dfloat dsdx = cubvgeo[gid + p_SXID*p_cubNp];
          const dfloat dsdy = cubvgeo[gid + p_SYID*p_cubNp];
          const dfloat dsdz = cubvgeo[gid + p_SZID*p_cubNp];
          const dfloat dtdx = cubvgeo[gid + p_TXID*p_cubNp];
          const dfloat dtdy = cubvgeo[gid + p_TYID*p_cubNp];
          const dfloat dtdz = cubvgeo[gid + p_TZID*p_cubNp];
          const dfloat JW   = cubvgeo[gid + p_JWID*p_cubNp];

          const dlong id =e*p_cubNp + k*p_cubNq*p_cubNq + j*p_cubNq + i;
          const dfloat Un = cU[id+0*p_Np];
          const dfloat Vn = cU[id+1*p_Np];
          const dfloat Wn = cU[id+2*p_Np];
          const dfloat Udn = cUd[id+0*p_Np];
          const dfloat Vdn = cUd[id+1*p_Np];
          const dfloat Wdn = cUd[id+2*p_Np];

          const dfloat cUn = JW*(drdx*Un+drdy*Vn+drdz*Wn);
          const dfloat cVn = JW*(dsdx*Un+dsdy*Vn+dsdz*Wn);
          const dfloat cWn = JW*(dtdx*Un+dtdy*Vn+dtdz*Wn);

          s_F11[j][i] = cUn*Udn;
          s_F12[j][i] = cVn*Udn;
          s_F13[j][i] = cWn*Udn;
          s_F21[j][i] = cUn*Vdn;
          s_F22[j][i] = cVn*Vdn;
          s_F23[j][i] = cWn*Vdn;
          s_F31[j][i] = cUn*Wdn;
          s_F32[j][i] = cVn*Wdn;
          s_F33[j][i] = cWn*Wdn;
        }
      }

      @barrier("local");

      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          #pragma unroll p_cubNq
            for (int n=0;n<p_cubNq;n++) {
              const dfloat Dr = s_cubDT[n][i];
              const dfloat Ds = s_cubDT[n][j];
              const dfloat Dt = s_cubDT[k][n];
              r_NU[k] += Dr*s_F11[j][n];
              r_NV[k] += Dr*s_F21[j][n];
              r_NW[k] += Dr*s_F31[j][n];

              r_NU[k] += Ds*s_F12[n][i];
              r_NV[k] += Ds*s_F22[n][i];
              r_NW[k] += Ds*s_F32[n][i];

              r_NU[n] += Dt*s_F13[j][i];
              r_NV[n] += Dt*s_F23[j][i];
              r_NW[n] += Dt*s_F33[j][i];
            }
        }
      }

      @barrier("local");
    } //k loop

    //write out
    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
        #pragma unroll p_cubNq
          for(int k=0;k<p_cubNq;++k){
            const dlong id =e*p_cubNp + k*p_cubNq*p_cubNq + j*p_cubNq + i;
            cU[id+0*p_Np] = r_NU[k];
            cU[id+1*p_Np] = r_NV[k];
            cU[id+2*p_Np] = r_NW[k];
          }
      }
    }
  }

  @barrier("global");

  //---------------------------@kernel 3 project fluxes back to GLL grid
  for(dlong e=0; e<Nelements; ++e; @outer(0)) {
    @shared dfloat s_NU[p_cubNq][p_cubNq];
    @shared dfloat s_NV[p_cubNq][p_cubNq];
    @shared dfloat s_NW[p_cubNq][p_cubNq];
    @shared dfloat s_cubProject[p_cubNq][p_Nq];

    @exclusive dfloat r_NU[p_Nq], r_NV[p_Nq], r_NW[p_Nq];

    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
        const int id = i+j*p_cubNq;
        if (id<p_Nq*p_cubNq) {
          s_cubProject[0][id] = cubProject[id];
        }

        #pragma unroll p_Nq
          for(int k=0;k<p_Nq;++k){
            r_NU[k] = 0.;
            r_NV[k] = 0.;
            r_NW[k] = 0.;
          }
      }
    }

    @barrier("local");

    //read in and project in k
    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
        #pragma unroll p_cubNq
        for(int k=0;k<p_cubNq;++k){
          const dlong id = e*p_cubNp + k*p_cubNq*p_cubNq + j*p_cubNq + i;
          const dfloat NUn = cU[id+0*p_Np];
          const dfloat NVn = cU[id+1*p_Np];
          const dfloat NWn = cU[id+2*p_Np];

          #pragma unroll p_Nq
          for(int n=0;n<p_Nq;++n){
            const dfloat Pk = s_cubProject[k][n];
            r_NU[n] += Pk*NUn;
            r_NV[n] += Pk*NVn;
            r_NW[n] += Pk*NWn;
          }
        }
      }
    }

    @barrier("local");

    #pragma unroll p_Nq
    for(int k=0;k<p_Nq;++k){
      //load slice to @shared
      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          s_NU[j][i] = r_NU[k];
          s_NV[j][i] = r_NV[k];
          s_NW[j][i] = r_NW[k];
        }
      }

      @barrier("local");

      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          if(j<p_Nq){
            r_NU[k] = 0; r_NV[k] = 0; r_NW[k] = 0;

            #pragma unroll p_cubNq
            for (int n=0;n<p_cubNq;n++) {
              const dfloat Pj = s_cubProject[n][j];
              r_NU[k] += Pj*s_NU[n][i];
              r_NV[k] += Pj*s_NV[n][i];
              r_NW[k] += Pj*s_NW[n][i];
            }
          }
        }
      }

      @barrier("local");

      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          if(j<p_Nq){
            s_NU[j][i] = r_NU[k];
            s_NV[j][i] = r_NV[k];
            s_NW[j][i] = r_NW[k];
          }
        }
      }

      @barrier("local");

      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          if (i<p_Nq && j<p_Nq) {
            const dlong gid = e*p_Np*p_Nvgeo+ k*p_Nq*p_Nq + j*p_Nq +i;
            const dfloat invJW = vgeo[gid + p_IJWID*p_Np];

            r_NU[k] = 0; r_NV[k] = 0; r_NW[k] = 0;

            #pragma unroll p_cubNq
            for (int n=0;n<p_cubNq;n++) {
              const dfloat Pi = s_cubProject[n][i];
              r_NU[k] += Pi*s_NU[j][n];
              r_NV[k] += Pi*s_NV[j][n];
              r_NW[k] += Pi*s_NW[j][n];
            }

            const dlong id = e*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;
            RHS[id+0*p_Np] = -invJW*r_NU[k];
            RHS[id+1*p_Np] = -invJW*r_NV[k];
            RHS[id+2*p_Np] = -invJW*r_NW[k];
          }
        }
      }
      @barrier("local");
    }
  }
}
#endif

#if 0
// Trying to find difference between enstrophy generation in libP and Nek5K
@kernel void insSubcycleAdvectionNekCubatureVolumeHex3D(const dlong Nelements,
                                               @restrict const  dfloat *  vgeo,
                                               @restrict const  dfloat *  cubvgeo,
                                               @restrict const  dfloat *  cubDT,
                                               @restrict const  dfloat *  cubInterp,
                                               @restrict const  dfloat *  cubProject,
                                               @restrict const  dfloat *  invLumpedMassMatrix,
                                               const dlong p_Np,
                                               @restrict const  dfloat *  Ue,
                                               @restrict const  dfloat *  U,
                                               @restrict dfloat *  cU, //storage for interpolated fields
                                               @restrict dfloat *  cUd, //storage for interpolated fields
                                               @restrict dfloat *  RHS){

  // (phi, Ue.grad U)
  for(dlong e=0; e<Nelements; ++e; @outer(0)) {

    @shared dfloat s_cubDT[p_cubNq][p_cubNq];
    @shared dfloat s_cubInterp[p_Nq][p_cubNq];
    @shared dfloat s_cubProject[p_cubNq][p_Nq];

    @shared dfloat s_U[p_cubNq][p_cubNq];
    @shared dfloat s_V[p_cubNq][p_cubNq];
    @shared dfloat s_W[p_cubNq][p_cubNq];

    @shared dfloat s_Ud[p_cubNq][p_cubNq];
    @shared dfloat s_Vd[p_cubNq][p_cubNq];
    @shared dfloat s_Wd[p_cubNq][p_cubNq];

    @shared dfloat s_U1[p_cubNq][p_cubNq];
    @shared dfloat s_V1[p_cubNq][p_cubNq];
    @shared dfloat s_W1[p_cubNq][p_cubNq];

    @shared dfloat s_Ud1[p_cubNq][p_cubNq];
    @shared dfloat s_Vd1[p_cubNq][p_cubNq];
    @shared dfloat s_Wd1[p_cubNq][p_cubNq];

    @exclusive dfloat r_U [p_cubNq], r_V [p_cubNq], r_W [p_cubNq];
    @exclusive dfloat r_Ud[p_cubNq], r_Vd[p_cubNq], r_Wd[p_cubNq];

    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
        const int id = i+j*p_cubNq;
        if (id<p_Nq*p_cubNq) {
          s_cubInterp[0][id] = cubInterp[id];
          s_cubProject[0][id] = cubProject[id];
        }

        s_cubDT[0][id] = cubDT[id];

        for(int k=0;k<p_cubNq;++k){
          r_U[k]  = 0; r_V[k]  = 0; r_W[k]  = 0;
          r_Ud[k] = 0; r_Vd[k] = 0; r_Wd[k] = 0;
        }
      }
    }

    for(int c=0;c<p_Nq;++c){

      @barrier("local");

      for(int b=0;b<p_cubNq;++b;@inner(1)){
        for(int a=0;a<p_cubNq;++a;@inner(0)){
          if(a<p_Nq && b<p_Nq){
            // this can be improved
            const dlong id = e*p_Np + c*p_Nq*p_Nq + b*p_Nq + a;

            // Ue.grad U
            s_U[b][a] = Ue[id+0*p_Np];
            s_V[b][a] = Ue[id+1*p_Np];
            s_W[b][a] = Ue[id+2*p_Np];

            s_Ud[b][a] = U[id+0*p_Np];
            s_Vd[b][a] = U[id+1*p_Np];
            s_Wd[b][a] = U[id+2*p_Np];
          }
        }
      }

      @barrier("local");

      // interpolate in 'r'
      for(int b=0;b<p_cubNq;++b;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          if(b<p_Nq){
            dfloat U1  = 0, V1 = 0,  W1 = 0;
            dfloat Ud1 = 0,Vd1 = 0, Wd1 = 0;

            for(int a=0;a<p_Nq;++a){
              dfloat Iia = s_cubInterp[a][i];
              U1  += Iia*s_U[b][a];
              V1  += Iia*s_V[b][a];
              W1  += Iia*s_W[b][a];
              Ud1 += Iia*s_Ud[b][a];
              Vd1 += Iia*s_Vd[b][a];
              Wd1 += Iia*s_Wd[b][a];
            }

            s_U1[b][i] = U1;
            s_V1[b][i] = V1;
            s_W1[b][i] = W1;
            s_Ud1[b][i] = Ud1;
            s_Vd1[b][i] = Vd1;
            s_Wd1[b][i] = Wd1;

          }
        }
      }

      @barrier("local");

      // interpolate in 's'
      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          dfloat U2 = 0, V2 = 0,  W2 = 0;
          dfloat Ud2 = 0,Vd2 = 0, Wd2 = 0;

          // interpolate in b
          for(int b=0;b<p_Nq;++b){
            dfloat Ijb = s_cubInterp[b][j];
            U2 += Ijb*s_U1[b][i];
            V2 += Ijb*s_V1[b][i];
            W2 += Ijb*s_W1[b][i];
            Ud2 += Ijb*s_Ud1[b][i];
            Vd2 += Ijb*s_Vd1[b][i];
            Wd2 += Ijb*s_Wd1[b][i];
          }

          // interpolate in c progressively
          for(int k=0;k<p_cubNq;++k){
            dfloat Ikc = s_cubInterp[c][k];

            r_U[k] += Ikc*U2;
            r_V[k] += Ikc*V2;
            r_W[k] += Ikc*W2;

            r_Ud[k] += Ikc*Ud2;
            r_Vd[k] += Ikc*Vd2;
            r_Wd[k] += Ikc*Wd2;
          }
        }
      }
    }

    for(int k=0;k<p_cubNq;++k){

      @barrier("local");

      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){

          s_Ud[j][i] = r_Ud[k];
          s_Vd[j][i] = r_Vd[k];
          s_Wd[j][i] = r_Wd[k];

        }
      }

      @barrier("local");

      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){

          dfloat  Udr = 0, Uds = 0, Udt = 0;
          dfloat  Vdr = 0, Vds = 0, Vdt = 0;
          dfloat  Wdr = 0, Wds = 0, Wdt = 0;

          for(int n=0;n<p_cubNq;++n){
            dfloat Din = s_cubDT[i][n];
            Udr += Din*s_Ud[j][n];
            Vdr += Din*s_Vd[j][n];
            Wdr += Din*s_Wd[j][n];
          }

          for(int n=0;n<p_cubNq;++n){
            dfloat Djn = s_cubDT[j][n];
            Uds += Djn*s_Ud[n][i];
            Vds += Djn*s_Vd[n][i];
            Wds += Djn*s_Wd[n][i];
          }

          for(int n=0;n<p_cubNq;++n){
            dfloat Dkn = s_cubDT[k][n];
            Udt += Dkn*r_Ud[n];
            Vdt += Dkn*r_Vd[n];
            Wdt += Dkn*r_Wd[n];
          }

          const dlong gid = e*p_cubNp*p_Nvgeo+ k*p_cubNq*p_cubNq + j*p_cubNq +i;
          const dfloat drdx = cubvgeo[gid + p_RXID*p_cubNp];
          const dfloat drdy = cubvgeo[gid + p_RYID*p_cubNp];
          const dfloat drdz = cubvgeo[gid + p_RZID*p_cubNp];
          const dfloat dsdx = cubvgeo[gid + p_SXID*p_cubNp];
          const dfloat dsdy = cubvgeo[gid + p_SYID*p_cubNp];
          const dfloat dsdz = cubvgeo[gid + p_SZID*p_cubNp];
          const dfloat dtdx = cubvgeo[gid + p_TXID*p_cubNp];
          const dfloat dtdy = cubvgeo[gid + p_TYID*p_cubNp];
          const dfloat dtdz = cubvgeo[gid + p_TZID*p_cubNp];
          const dfloat JW   = cubvgeo[gid + p_JWID*p_cubNp];

          const dfloat Un = r_U[k];
          const dfloat Vn = r_V[k];
          const dfloat Wn = r_W[k];

          const dfloat Uhat = JW*(Un*drdx + Vn*drdy + Wn*drdz);
          const dfloat Vhat = JW*(Un*dsdx + Vn*dsdy + Wn*dsdz);
          const dfloat What = JW*(Un*dtdx + Vn*dtdy + Wn*dtdz);

          // Ue*dUdx + V*dUdy + W*dUdz = (Ue*(drdx*dUdr+dsdx*dUds+dtdx*dUdt) + V*(drdy*dUdr ..))

          // I_f^t*(J_f*C_f^t)*G_f*\hat{D}_f*I_f*u
          r_U[k] = Uhat*Udr + Vhat*Uds + What*Udt;
          r_V[k] = Uhat*Vdr + Vhat*Vds + What*Vdt;
          r_W[k] = Uhat*Wdr + Vhat*Wds + What*Wdt;
        }
      }
    }

    // now project back in t
    for(int c=0;c<p_Nq;++c){

      @barrier("local");

      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){

          dfloat rhsU = 0, rhsV = 0, rhsW = 0;

          for(int k=0;k<p_cubNq;++k){
            dfloat Ikc = s_cubInterp[c][k];
            rhsU += Ikc*r_U[k];
            rhsV += Ikc*r_V[k];
            rhsW += Ikc*r_W[k];
          }

          s_U[j][i] = rhsU;
          s_V[j][i] = rhsV;
          s_W[j][i] = rhsW;
        }
      }

      @barrier("local");

      for(int b=0;b<p_cubNq;++b;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          if(b<p_Nq){
            dfloat rhsU = 0, rhsV = 0, rhsW = 0;

            for(int j=0;j<p_cubNq;++j){
              dfloat Ijb = s_cubInterp[b][j];
              rhsU += Ijb*s_U[j][i];
              rhsV += Ijb*s_V[j][i];
              rhsW += Ijb*s_W[j][i];
            }

            s_Ud[b][i] = rhsU;
            s_Vd[b][i] = rhsV;
            s_Wd[b][i] = rhsW;
          }
        }
      }

      @barrier("local");

      for(int b=0;b<p_cubNq;++b;@inner(1)){
        for(int a=0;a<p_cubNq;++a;@inner(0)){
          if(a<p_Nq && b<p_Nq){
            dfloat rhsU = 0, rhsV = 0, rhsW = 0;

            for(int i=0;i<p_cubNq;++i){
              dfloat Iia = s_cubInterp[a][i];
              rhsU += Iia*s_Ud[b][i];
              rhsV += Iia*s_Vd[b][i];
              rhsW += Iia*s_Wd[b][i];
            }

            const dlong id = e*p_Np + c*p_Nq*p_Nq + b*p_Nq + a;
            dfloat invMM = invLumpedMassMatrix[id];
            RHS[id+0*p_Np] = invMM*rhsU; // need to assemble then divide by mass after kernel
            RHS[id+1*p_Np] = invMM*rhsV;
            RHS[id+2*p_Np] = invMM*rhsW;
          }
        }
      }
    }
  }
}
#endif

