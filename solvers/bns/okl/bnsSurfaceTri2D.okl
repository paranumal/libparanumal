/*

The MIT License (MIT)

Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

#define p_isq12 (1.f/sqrt(12.f))
#define p_isq6 (1.f/sqrt(6.f))
#define PML_ENABLED 1

void upwind1D(const dfloat nx, const dfloat ny,
              const dfloat q1M, const dfloat q2M, const dfloat q3M,
	      const dfloat q4M, const dfloat q5M, const dfloat q6M,
              const dfloat q1B, const dfloat q2B, const dfloat q3B,
	      const dfloat q4B, const dfloat q5B, const dfloat q6B,
              @restrict @restrict dfloat * q1P, @restrict dfloat * q2P,   dfloat * q3P,
	      @restrict @restrict dfloat * q4P, @restrict dfloat * q5P,   dfloat * q6P){
  
  *q1P = 0.5f*(q1B + q1M) - p_isq12*(nx*(q2B-q2M) + ny*(q3B-q3M));
  *q2P = 0.5f*(q2B + q2M) - p_isq12*(nx*(q1B-q1M)) - p_isq6*nx*(q5B-q5M) - 0.5f*ny*(q4B-q4M);
  *q3P = 0.5f*(q3B + q3M) - p_isq12*(ny*(q1B-q1M)) - p_isq6*ny*(q6B-q6M) - 0.5f*nx*(q4B-q4M);
  *q4P = 0.5f*(q4B + q4M) - 0.5f*nx*(q3B-q3M) - 0.5f*ny*(q2B-q2M);
  *q5P = 0.5f*(q5B + q5M) - p_isq6*nx*(q2B-q2M);
  *q6P = 0.5f*(q6B + q6M) - p_isq6*ny*(q3B-q3M);
  
}

// This @kernel uses Upwind flux 
@kernel void bnsSurfaceTri2D(const dlong Nelements,
			    @restrict const  dlong *  elementIds,
			    const dfloat time,
			    const dfloat intfx,
			    const dfloat intfy,
			    const dfloat intfz,
			    @restrict const  dfloat *  sgeo,
			    @restrict const  dfloat *  LIFTT,
			    @restrict const  dlong  *  vmapM,
			    @restrict const  dlong  *  vmapP,
			    @restrict const  int    *  EToB,
			    @restrict const  dfloat *  x,
			    @restrict const  dfloat *  y,
			    @restrict const  dfloat *  z,
			    @restrict const  dfloat *  q,
			    @restrict dfloat *  rhsq){
  
  // for all elements
  for(dlong eo=0;eo<Nelements;eo+=p_NblockS;@outer(0)){

    // @shared storage for flux terms
    @shared dfloat s_fluxq[p_NblockS][p_Nfields][p_Nfp*p_Nfaces];
    @exclusive dlong e;

    // for all face nodes of all elements
    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int n=0;n<p_maxNodes;++n;@inner(0)){ // maxNodes = max(Nfp*Nfaces,Np)
        const dlong et = eo + es;
        if(et<Nelements){
	  e = elementIds[et];
          if(n<p_Nfp*p_Nfaces){
            // find face that owns this node
            int face = n/p_Nfp;          
            
            // load surface geofactors for this face
            const dlong sid   = p_Nsgeo*(e*p_Nfaces+face);
            const dfloat nx   = sgeo[sid+p_NXID];
            const dfloat ny   = sgeo[sid+p_NYID];
            const dfloat sJ   = sgeo[sid+p_SJID];
            const dfloat invJ = sgeo[sid+p_IJID];   

            const dlong id  = e*p_Nfp*p_Nfaces + n;
            const dlong idM = vmapM[id];
            const dlong idP = vmapP[id];

            // load traces
            const dlong eM = e;
            const dlong eP = idP/p_Np;
            const int vidM = idM%p_Np;
            const int vidP = idP%p_Np;
            //
            const dlong qidM = eM*p_Np*p_Nfields + vidM;
            const dlong qidP = eP*p_Np*p_Nfields + vidP;

	    // if(idP<0) idP = idM;

	    // Read trace values
	    dfloat q1M = q[qidM + 0*p_Np], q1P = q[qidP + 0*p_Np];
	    dfloat q2M = q[qidM + 1*p_Np], q2P = q[qidP + 1*p_Np];
	    dfloat q3M = q[qidM + 2*p_Np], q3P = q[qidP + 2*p_Np];
	    dfloat q4M = q[qidM + 3*p_Np], q4P = q[qidP + 3*p_Np];
	    dfloat q5M = q[qidM + 4*p_Np], q5P = q[qidP + 4*p_Np];
	    dfloat q6M = q[qidM + 5*p_Np], q6P = q[qidP + 5*p_Np];              

	    // apply boundary condition
	    const int bc = EToB[face+p_Nfaces*e];
	    if(bc>0){
              const dlong idB = vmapM[id];
              if(p_PML){
                boundaryConditionsPML2D(bc, time, x[idB], y[idB], nx, ny, intfx, intfy, q1M, q2M, q3M, q4M, q5M, q6M, &q1P, &q2P, &q3P, &q4P, &q5P, &q6P);
	      }
	      else{
		boundaryConditions2D(bc, time, x[idB], y[idB], nx, ny, intfx, intfy, q1M, q2M, q3M, q4M, q5M, q6M, &q1P, &q2P, &q3P, &q4P, &q5P, &q6P);
	      }
	    }
	    
	    // compute (q^*)
	    dfloat q1U, q2U, q3U, q4U, q5U, q6U;            

	    upwind1D(nx, ny, q1M, q2M, q3M, q4M, q5M, q6M, q1P, q2P, q3P, q4P, q5P, q6P, 
		     &q1U, &q2U, &q3U, &q4U, &q5U, &q6U);

	    // evaluate "flux" terms: (sJ/J)*(A*nx+B*ny)*(q^* - q^-)
	    const dfloat sc = invJ*sJ;

	    dfloat dq1, dq2, dq3, dq4, dq5, dq6;            
	    dq1 = q1U-q1M;
	    dq2 = q2U-q2M;
	    dq3 = q3U-q3M;
	    dq4 = q4U-q4M;
	    dq5 = q5U-q5M;
	    dq6 = q6U-q6M;

	    // evaluate "flux" terms: (sJ/J)*(A*nx+B*ny)*(q^* - q^-)
	    s_fluxq[es][0][n] = sc*p_sqrtRT*(-nx*dq2-ny*dq3);
	    s_fluxq[es][1][n] = sc*p_sqrtRT*(-nx*(dq1+p_sqrt2*dq5)-ny*dq4);
	    s_fluxq[es][2][n] = sc*p_sqrtRT*(-nx*dq4-ny*(dq1+p_sqrt2*dq6));
	    s_fluxq[es][3][n] = sc*p_sqrtRT*(-nx*dq3-ny*dq2);
	    s_fluxq[es][4][n] = sc*p_sqrtRT*(-nx*p_sqrt2*dq2);
	    s_fluxq[es][5][n] = sc*p_sqrtRT*(-ny*p_sqrt2*dq3);  
	  }
	}
      }
    }
    
    // wait for all @shared memory writes of the previous inner loop to complete
    @barrier("local");

    // for each node in the element
    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int n=0;n<p_maxNodes;++n;@inner(0)){
        const dlong et = eo + es;
        if(et<Nelements){
          if(n<p_Np){
            // const int id = nrhs*p_Nfields*(p_Np*e + n) + p_Nfields*shift;
            const dlong id = e*p_Nfields*p_Np + n ;

            dfloat rhsq1 = rhsq[id+0*p_Np];
            dfloat rhsq2 = rhsq[id+1*p_Np];
            dfloat rhsq3 = rhsq[id+2*p_Np];
            dfloat rhsq4 = rhsq[id+3*p_Np];
            dfloat rhsq5 = rhsq[id+4*p_Np];
            dfloat rhsq6 = rhsq[id+5*p_Np];

            // rhs += LIFT*((sJ/J)*(A*nx+B*ny)*(q^* - q^-))
            #pragma unroll p_NfacesNfp
              for(int m=0;m<p_NfacesNfp;++m){
                dfloat L = LIFTT[n+m*p_Np];
                rhsq1 += L*s_fluxq[es][0][m];
                rhsq2 += L*s_fluxq[es][1][m];
                rhsq3 += L*s_fluxq[es][2][m];
                rhsq4 += L*s_fluxq[es][3][m];
                rhsq5 += L*s_fluxq[es][4][m];
                rhsq6 += L*s_fluxq[es][5][m];
              }
          
            rhsq[id+0*p_Np] = rhsq1;
            rhsq[id+1*p_Np] = rhsq2;
            rhsq[id+2*p_Np] = rhsq3;
            rhsq[id+3*p_Np] = rhsq4;
            rhsq[id+4*p_Np] = rhsq5;
            rhsq[id+5*p_Np] = rhsq6;
	  }
        }
      }
    }
  }
}



// This @kernel uses upwind flux
@kernel void bnsPmlSurfaceTri2D(const dlong pmlNelements,
			       @restrict const  dlong   *  pmlElementIds,
			       @restrict const  dlong   *  pmlIds,
			       const dfloat time,
			       const dfloat intfx,
			       const dfloat intfy,
			       const dfloat intfz,
			       @restrict const  dfloat *  sgeo,
			       @restrict const  dfloat *  LIFTT,
			       @restrict const  dlong  *  vmapM,
			       @restrict const  dlong  *  vmapP,
			       @restrict const  int   *  EToB,
			       @restrict const  dfloat *  x,
			       @restrict const  dfloat *  y,              
			       @restrict const  dfloat *  z,              
			       @restrict const  dfloat *  q,
			       @restrict dfloat *  rhsq,
			       @restrict dfloat *  pmlrhsqx,
			       @restrict dfloat *  pmlrhsqy,
			       @restrict dfloat *  pmlrhsqz){
  
  // for all elements
  for(dlong eo=0;eo<pmlNelements;eo+=p_NblockS;@outer(0)){
    // @shared storage for flux terms
    @shared dfloat s_nxdq1[p_NblockS][p_maxNodes];
    @shared dfloat s_nxdq2[p_NblockS][p_maxNodes];
    @shared dfloat s_nxdq3[p_NblockS][p_maxNodes];
    @shared dfloat s_nxdq4[p_NblockS][p_maxNodes];
    @shared dfloat s_nxdq5[p_NblockS][p_maxNodes];
    @shared dfloat s_nxdq6[p_NblockS][p_maxNodes];

    @shared dfloat s_nydq1[p_NblockS][p_maxNodes];
    @shared dfloat s_nydq2[p_NblockS][p_maxNodes];
    @shared dfloat s_nydq3[p_NblockS][p_maxNodes];
    @shared dfloat s_nydq4[p_NblockS][p_maxNodes];
    @shared dfloat s_nydq5[p_NblockS][p_maxNodes];
    @shared dfloat s_nydq6[p_NblockS][p_maxNodes];

    @exclusive dlong e;

    // for all face nodes of all elements
    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int n=0;n<p_maxNodes;++n;@inner(0)){ // maxNodes = max(Nfp*Nfaces,Np)
        const dlong et = eo + es;
        if(et<pmlNelements){
	  e = pmlElementIds[et];

	  if(n<p_NfacesNfp){
	    // find face that owns this node
            int face = n/p_Nfp;          
            
            // load surface geofactors for this face
            const dlong sid   = p_Nsgeo*(e*p_Nfaces+face);
            const dfloat nx   = sgeo[sid+p_NXID];
            const dfloat ny   = sgeo[sid+p_NYID];
            const dfloat sJ   = sgeo[sid+p_SJID];
            const dfloat invJ = sgeo[sid+p_IJID];     

            const dlong id  = e*p_Nfp*p_Nfaces + n;
            const dlong idM = vmapM[id];
            const dlong idP = vmapP[id];

            const dlong eM = e;
            const dlong eP = idP/p_Np; 
            const int vidM = idM%p_Np;
            const int vidP = idP%p_Np; 

            const dlong qidM = eM*p_Nfields*p_Np + vidM;
            const dlong qidP = eP*p_Nfields*p_Np + vidP;
           
	    // Read trace values
            dfloat q1M = q[qidM + 0*p_Np], q1P = q[qidP + 0*p_Np];
            dfloat q2M = q[qidM + 1*p_Np], q2P = q[qidP + 1*p_Np];
            dfloat q3M = q[qidM + 2*p_Np], q3P = q[qidP + 2*p_Np];
            dfloat q4M = q[qidM + 3*p_Np], q4P = q[qidP + 3*p_Np];
            dfloat q5M = q[qidM + 4*p_Np], q5P = q[qidP + 4*p_Np];
            dfloat q6M = q[qidM + 5*p_Np], q6P = q[qidP + 5*p_Np];              
          
        
            // apply boundary condition
            int bc = EToB[face+p_Nfaces*e];
            if(bc>0){
              const dlong idB = vmapM[id];

              boundaryConditionsPML2D(bc, time, x[idB], y[idB], nx, ny, intfx, intfy, q1M, q2M, q3M, q4M, q5M, q6M, &q1P, &q2P, &q3P, &q4P, &q5P, &q6P);
	    }
        
            // compute (q^*)
            dfloat q1U, q2U, q3U, q4U, q5U, q6U;            

            upwind1D(nx, ny, q1M, q2M, q3M, q4M, q5M, q6M, q1P, q2P, q3P, q4P, q5P, q6P, &q1U, &q2U, &q3U, &q4U, &q5U, &q6U);

	    // evaluate "flux" terms: (sJ/J)*(A*nx+B*ny)*(q^* - q^-)
            const dfloat sc = invJ*sJ;

            s_nxdq1[es][n] = sc*(nx*(q1U-q1M));
            s_nxdq2[es][n] = sc*(nx*(q2U-q2M));
            s_nxdq3[es][n] = sc*(nx*(q3U-q3M));
            s_nxdq4[es][n] = sc*(nx*(q4U-q4M));
            s_nxdq5[es][n] = sc*(nx*(q5U-q5M));
            s_nxdq6[es][n] = sc*(nx*(q6U-q6M));
            
            s_nydq1[es][n] = sc*(ny*(q1U-q1M));
            s_nydq2[es][n] = sc*(ny*(q2U-q2M));
            s_nydq3[es][n] = sc*(ny*(q3U-q3M));
            s_nydq4[es][n] = sc*(ny*(q4U-q4M));
            s_nydq5[es][n] = sc*(ny*(q5U-q5M));
            s_nydq6[es][n] = sc*(ny*(q6U-q6M));
          }
        }
      }
    }
    
    // wait for all @shared memory writes of the previous inner loop to complete
    @barrier("local");

    // for each node in the element
    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int n=0;n<p_maxNodes;++n;@inner(0)){
        const dlong et = eo + es;
        if(et<pmlNelements){
	  if(n<p_Np){
	    // load rhs data from volume fluxes
	    dfloat Lnxdq1 = 0.f, Lnxdq2 = 0.f, Lnxdq3 = 0.f, Lnxdq4 = 0.f, Lnxdq5 = 0.f, Lnxdq6 = 0.f;
	    dfloat Lnydq1 = 0.f, Lnydq2 = 0.f, Lnydq3 = 0.f, Lnydq4 = 0.f, Lnydq5 = 0.f, Lnydq6 = 0.f;
        
	    // rhs += LIFT*((sJ/J)*(A*nx+B*ny)*(q^* - q^-))
	    #pragma unroll p_NfacesNfp
	      for(int m=0;m<p_NfacesNfp;++m){
		const dfloat L = LIFTT[n+m*p_Np];
		Lnxdq1 += L*s_nxdq1[es][m];
		Lnxdq2 += L*s_nxdq2[es][m];
		Lnxdq3 += L*s_nxdq3[es][m];
		Lnxdq4 += L*s_nxdq4[es][m];
		Lnxdq5 += L*s_nxdq5[es][m];
		Lnxdq6 += L*s_nxdq6[es][m];
          
		Lnydq1 += L*s_nydq1[es][m];
		Lnydq2 += L*s_nydq2[es][m];
		Lnydq3 += L*s_nydq3[es][m];
		Lnydq4 += L*s_nydq4[es][m];
		Lnydq5 += L*s_nydq5[es][m];
		Lnydq6 += L*s_nydq6[es][m];
	      }

        
	    dfloat Aqx1 = -p_sqrtRT*(Lnxdq2);
	    dfloat Aqx2 = -p_sqrtRT*(Lnxdq1+p_sqrt2*Lnxdq5);
	    dfloat Aqx3 = -p_sqrtRT*(Lnxdq4);
	    dfloat Aqx4 = -p_sqrtRT*(Lnxdq3);
	    dfloat Aqx5 = -p_sqrtRT*(p_sqrt2*Lnxdq2);
	    dfloat Aqx6 =  0.f;

	    dfloat Bqy1 = -p_sqrtRT*(Lnydq3);
	    dfloat Bqy2 = -p_sqrtRT*(Lnydq4);
	    dfloat Bqy3 = -p_sqrtRT*(Lnydq1+p_sqrt2*Lnydq6);
	    dfloat Bqy4 = -p_sqrtRT*(Lnydq2);
	    dfloat Bqy5 =  0.f;
	    dfloat Bqy6 = -p_sqrtRT*(p_sqrt2*Lnydq3);

	    const dlong pmlId    = pmlIds[et];
	    const dlong rhsId    = e*p_Nfields*p_Np + n    ;
	    const dlong pmlrhsId = pmlId*p_Nfields*p_Np + n;

	    // Update 
	    pmlrhsqx[pmlrhsId+0*p_Np] += Aqx1; 
	    pmlrhsqx[pmlrhsId+1*p_Np] += Aqx2; 
	    pmlrhsqx[pmlrhsId+2*p_Np] += Aqx3; 
	    pmlrhsqx[pmlrhsId+3*p_Np] += Aqx4; 
	    pmlrhsqx[pmlrhsId+4*p_Np] += Aqx5; 
	    pmlrhsqx[pmlrhsId+5*p_Np] += Aqx6; 

	    pmlrhsqy[pmlrhsId+0*p_Np] += Bqy1; 
	    pmlrhsqy[pmlrhsId+1*p_Np] += Bqy2; 
	    pmlrhsqy[pmlrhsId+2*p_Np] += Bqy3; 
	    pmlrhsqy[pmlrhsId+3*p_Np] += Bqy4; 
	    pmlrhsqy[pmlrhsId+4*p_Np] += Bqy5; 
	    pmlrhsqy[pmlrhsId+5*p_Np] += Bqy6; 

	    rhsq[rhsId+0*p_Np] += (Aqx1 + Bqy1); 
	    rhsq[rhsId+1*p_Np] += (Aqx2 + Bqy2); 
	    rhsq[rhsId+2*p_Np] += (Aqx3 + Bqy3); 
	    rhsq[rhsId+3*p_Np] += (Aqx4 + Bqy4); 
	    rhsq[rhsId+4*p_Np] += (Aqx5 + Bqy5); 
	    rhsq[rhsId+5*p_Np] += (Aqx6 + Bqy6); 
	    //
	  }
	}
      }
    }
  }
}




// This @kernel uses Upwind flux 
@kernel void bnsMRSurfaceTri2D(const dlong Nelements,
			      @restrict const  dlong *  elementIds,
			      const dlong offset,
			      const int shift,
			      const dfloat time,
			      const dfloat intfx,
			      const dfloat intfy,
			      const dfloat intfz,
			      @restrict const  dfloat *  sgeo,
			      @restrict const  dfloat *  LIFTT,
			      @restrict const  dlong   *  vmapM,
			      @restrict const  dlong   *  mapP,
			      @restrict const  int   *  EToB,
			      @restrict const  dfloat *  x,
			      @restrict const  dfloat *  y,
			      @restrict const  dfloat *  z,
			      @restrict const  dfloat *  q,
			      @restrict const  dfloat *  fQM,
			      @restrict dfloat *  rhsq){
  
  // for all elements
  for(dlong eo=0;eo<Nelements;eo+=p_NblockS;@outer(0)){

    // @shared storage for flux terms
    @shared dfloat s_fluxq[p_NblockS][p_Nfields][p_Nfp*p_Nfaces];
    @exclusive dlong e;

    // for all face nodes of all elements
    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int n=0;n<p_maxNodes;++n;@inner(0)){ // maxNodes = max(Nfp*Nfaces,Np)
        const dlong et = eo + es;
        if(et<Nelements){
	  e = elementIds[et];
          if(n<p_Nfp*p_Nfaces){
            // find face that owns this node
            int face = n/p_Nfp;          
            
            // load surface geofactors for this face
            const dlong sid   = p_Nsgeo*(e*p_Nfaces+face);
            const dfloat nx   = sgeo[sid+p_NXID];
            const dfloat ny   = sgeo[sid+p_NYID];
            const dfloat sJ   = sgeo[sid+p_SJID];
            const dfloat invJ = sgeo[sid+p_IJID];   

            const dlong id  = e*p_Nfp*p_Nfaces + n;
            const dlong idM = e*p_Nfp*p_Nfaces*p_Nfields + n;

            // extract + side index
            const dlong qidP = mapP[id];
            const dlong eP   = qidP/(p_Nfp*p_Nfaces); 
            const int fidP   = qidP%(p_Nfp*p_Nfaces); 
            const dlong idP  = eP*p_Nfp*p_Nfaces*p_Nfields + fidP;

	    // Read trace values
            dfloat q1M = fQM[idM + 0*p_Nfp*p_Nfaces], q1P = fQM[idP + 0*p_Nfp*p_Nfaces];
            dfloat q2M = fQM[idM + 1*p_Nfp*p_Nfaces], q2P = fQM[idP + 1*p_Nfp*p_Nfaces];
            dfloat q3M = fQM[idM + 2*p_Nfp*p_Nfaces], q3P = fQM[idP + 2*p_Nfp*p_Nfaces];
            dfloat q4M = fQM[idM + 3*p_Nfp*p_Nfaces], q4P = fQM[idP + 3*p_Nfp*p_Nfaces];
            dfloat q5M = fQM[idM + 4*p_Nfp*p_Nfaces], q5P = fQM[idP + 4*p_Nfp*p_Nfaces];
            dfloat q6M = fQM[idM + 5*p_Nfp*p_Nfaces], q6P = fQM[idP + 5*p_Nfp*p_Nfaces];               
	    // apply boundary condition
	    const int bc = EToB[face+p_Nfaces*e];
	    if(bc>0){
              const dlong idB = vmapM[id];
              if(p_PML){
                boundaryConditionsPML2D(bc, time, x[idB], y[idB], nx, ny, intfx, intfy, q1M, q2M, q3M, q4M, q5M, q6M, &q1P, &q2P, &q3P, &q4P, &q5P, &q6P);
	      }
	      else{
		boundaryConditions2D(bc, time, x[idB], y[idB], nx, ny, intfx, intfy, q1M, q2M, q3M, q4M, q5M, q6M, &q1P, &q2P, &q3P, &q4P, &q5P, &q6P);
	      }
	    }
      
	    // compute (q^*)
	    dfloat q1U, q2U, q3U, q4U, q5U, q6U;            

	    upwind1D(nx, ny, q1M, q2M, q3M, q4M, q5M, q6M, q1P, q2P, q3P, q4P, q5P, q6P, &q1U, &q2U, &q3U, &q4U, &q5U, &q6U);

	    // evaluate "flux" terms: (sJ/J)*(A*nx+B*ny)*(q^* - q^-)
	    const dfloat sc = invJ*sJ;

	    dfloat dq1, dq2, dq3, dq4, dq5, dq6;            
	    dq1 = q1U-q1M;
	    dq2 = q2U-q2M;
	    dq3 = q3U-q3M;
	    dq4 = q4U-q4M;
	    dq5 = q5U-q5M;
	    dq6 = q6U-q6M;

	    // evaluate "flux" terms: (sJ/J)*(A*nx+B*ny)*(q^* - q^-)
	    s_fluxq[es][0][n] = sc*p_sqrtRT*(-nx*dq2-ny*dq3);
	    s_fluxq[es][1][n] = sc*p_sqrtRT*(-nx*(dq1+p_sqrt2*dq5)-ny*dq4);
	    s_fluxq[es][2][n] = sc*p_sqrtRT*(-nx*dq4-ny*(dq1+p_sqrt2*dq6));
	    s_fluxq[es][3][n] = sc*p_sqrtRT*(-nx*dq3-ny*dq2);
	    s_fluxq[es][4][n] = sc*p_sqrtRT*(-nx*p_sqrt2*dq2);
	    s_fluxq[es][5][n] = sc*p_sqrtRT*(-ny*p_sqrt2*dq3);  
	  }
	}
      }
    }
    
    // wait for all @shared memory writes of the previous inner loop to complete
    @barrier("local");

    // for each node in the element
    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int n=0;n<p_maxNodes;++n;@inner(0)){
        const dlong et = eo + es;
        if(et<Nelements){
          if(n<p_Np){
            // const int id = nrhs*p_Nfields*(p_Np*e + n) + p_Nfields*shift;
            const dlong id = e*p_Nfields*p_Np + n + shift*offset;

            dfloat rhsq1 = rhsq[id+0*p_Np];
            dfloat rhsq2 = rhsq[id+1*p_Np];
            dfloat rhsq3 = rhsq[id+2*p_Np];
            dfloat rhsq4 = rhsq[id+3*p_Np];
            dfloat rhsq5 = rhsq[id+4*p_Np];
            dfloat rhsq6 = rhsq[id+5*p_Np];

            // rhs += LIFT*((sJ/J)*(A*nx+B*ny)*(q^* - q^-))
            #pragma unroll p_NfacesNfp
              for(int m=0;m<p_NfacesNfp;++m){
                dfloat L = LIFTT[n+m*p_Np];
                rhsq1 += L*s_fluxq[es][0][m];
                rhsq2 += L*s_fluxq[es][1][m];
                rhsq3 += L*s_fluxq[es][2][m];
                rhsq4 += L*s_fluxq[es][3][m];
                rhsq5 += L*s_fluxq[es][4][m];
                rhsq6 += L*s_fluxq[es][5][m];
              }
          
            rhsq[id+0*p_Np] = rhsq1;
            rhsq[id+1*p_Np] = rhsq2;
            rhsq[id+2*p_Np] = rhsq3;
            rhsq[id+3*p_Np] = rhsq4;
            rhsq[id+4*p_Np] = rhsq5;
            rhsq[id+5*p_Np] = rhsq6;
	  }
        }
      }
    }
  }
}



// This @kernel uses upwind flux
@kernel void bnsMRPmlSurfaceTri2D(const dlong pmlNelements,
				 @restrict const  dlong   *  pmlElementIds,
				 @restrict const  dlong   *  pmlIds,
				 const dlong offset,
				 const dlong pmloffset,
				 const int   shift,
				 const dfloat time,
				 const dfloat intfx,
				 const dfloat intfy,
				 const dfloat intfz,
				 @restrict const  dfloat *  sgeo,
				 @restrict const  dfloat *  LIFTT,
				 @restrict const  dlong  *  vmapM,
				 @restrict const  dlong  *  mapP,
				 @restrict const  int   *  EToB,
				 @restrict const  dfloat *  x,
				 @restrict const  dfloat *  y,              
				 @restrict const  dfloat *  z,              
				 @restrict const  dfloat *  q,
				 @restrict const  dfloat *  fQM,
				 @restrict dfloat *  rhsq,
				 @restrict dfloat *  pmlrhsqx,
				 @restrict dfloat *  pmlrhsqy,
				 @restrict dfloat *  pmlrhsqz){
  
  // for all elements
  for(dlong eo=0;eo<pmlNelements;eo+=p_NblockS;@outer(0)){
    // @shared storage for flux terms
    @shared dfloat s_nxdq1[p_NblockS][p_maxNodes];
    @shared dfloat s_nxdq2[p_NblockS][p_maxNodes];
    @shared dfloat s_nxdq3[p_NblockS][p_maxNodes];
    @shared dfloat s_nxdq4[p_NblockS][p_maxNodes];
    @shared dfloat s_nxdq5[p_NblockS][p_maxNodes];
    @shared dfloat s_nxdq6[p_NblockS][p_maxNodes];

    @shared dfloat s_nydq1[p_NblockS][p_maxNodes];
    @shared dfloat s_nydq2[p_NblockS][p_maxNodes];
    @shared dfloat s_nydq3[p_NblockS][p_maxNodes];
    @shared dfloat s_nydq4[p_NblockS][p_maxNodes];
    @shared dfloat s_nydq5[p_NblockS][p_maxNodes];
    @shared dfloat s_nydq6[p_NblockS][p_maxNodes];

    @exclusive dlong e;

    // for all face nodes of all elements
    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int n=0;n<p_maxNodes;++n;@inner(0)){ // maxNodes = max(Nfp*Nfaces,Np)
        const dlong et = eo + es;
        if(et<pmlNelements){
	  e = pmlElementIds[et];

	  if(n<p_NfacesNfp){
	    // find face that owns this node
            int face = n/p_Nfp;          
            
            // load surface geofactors for this face
            const dlong sid   = p_Nsgeo*(e*p_Nfaces+face);
            const dfloat nx   = sgeo[sid+p_NXID];
            const dfloat ny   = sgeo[sid+p_NYID];
            const dfloat sJ   = sgeo[sid+p_SJID];
            const dfloat invJ = sgeo[sid+p_IJID];     

            const dlong id  = e*p_Nfp*p_Nfaces + n;
            const dlong idM = e*p_Nfp*p_Nfaces*p_Nfields + n;
	    // extract + side index
            const dlong qidP = mapP[id];
            const dlong eP   = qidP/(p_Nfp*p_Nfaces); 
            const int fidP   = qidP%(p_Nfp*p_Nfaces); 
            const dlong idP  = eP*p_Nfp*p_Nfaces*p_Nfields + fidP;

	    // Read trace values
            dfloat q1M = fQM[idM + 0*p_Nfp*p_Nfaces], q1P = fQM[idP + 0*p_Nfp*p_Nfaces];
            dfloat q2M = fQM[idM + 1*p_Nfp*p_Nfaces], q2P = fQM[idP + 1*p_Nfp*p_Nfaces];
            dfloat q3M = fQM[idM + 2*p_Nfp*p_Nfaces], q3P = fQM[idP + 2*p_Nfp*p_Nfaces];
            dfloat q4M = fQM[idM + 3*p_Nfp*p_Nfaces], q4P = fQM[idP + 3*p_Nfp*p_Nfaces];
            dfloat q5M = fQM[idM + 4*p_Nfp*p_Nfaces], q5P = fQM[idP + 4*p_Nfp*p_Nfaces];
            dfloat q6M = fQM[idM + 5*p_Nfp*p_Nfaces], q6P = fQM[idP + 5*p_Nfp*p_Nfaces];       
          
        
            // apply boundary condition
            int bc = EToB[face+p_Nfaces*e];
            if(bc>0){
              const dlong idB = vmapM[id];   
	      boundaryConditionsPML2D(bc, time, x[idB], y[idB], nx, ny, intfx, intfy, q1M, q2M, q3M, q4M, q5M, q6M, &q1P, &q2P, &q3P, &q4P, &q5P, &q6P);
	    }
	    
            // compute (q^*)
            dfloat q1U, q2U, q3U, q4U, q5U, q6U;            

            upwind1D(nx, ny, q1M, q2M, q3M, q4M, q5M, q6M, q1P, q2P, q3P, q4P, q5P, q6P, &q1U, &q2U, &q3U, &q4U, &q5U, &q6U);

	    // evaluate "flux" terms: (sJ/J)*(A*nx+B*ny)*(q^* - q^-)
            const dfloat sc = invJ*sJ;

            s_nxdq1[es][n] = sc*(nx*(q1U-q1M));
            s_nxdq2[es][n] = sc*(nx*(q2U-q2M));
            s_nxdq3[es][n] = sc*(nx*(q3U-q3M));
            s_nxdq4[es][n] = sc*(nx*(q4U-q4M));
            s_nxdq5[es][n] = sc*(nx*(q5U-q5M));
            s_nxdq6[es][n] = sc*(nx*(q6U-q6M));
            
            s_nydq1[es][n] = sc*(ny*(q1U-q1M));
            s_nydq2[es][n] = sc*(ny*(q2U-q2M));
            s_nydq3[es][n] = sc*(ny*(q3U-q3M));
            s_nydq4[es][n] = sc*(ny*(q4U-q4M));
            s_nydq5[es][n] = sc*(ny*(q5U-q5M));
            s_nydq6[es][n] = sc*(ny*(q6U-q6M));
          }
        }
      }
    }
    
    // wait for all @shared memory writes of the previous inner loop to complete
    @barrier("local");

    // for each node in the element
    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int n=0;n<p_maxNodes;++n;@inner(0)){
        const dlong et = eo + es;
        if(et<pmlNelements){
	  if(n<p_Np){
	    // load rhs data from volume fluxes
	    dfloat Lnxdq1 = 0.f, Lnxdq2 = 0.f, Lnxdq3 = 0.f, Lnxdq4 = 0.f, Lnxdq5 = 0.f, Lnxdq6 = 0.f;
	    dfloat Lnydq1 = 0.f, Lnydq2 = 0.f, Lnydq3 = 0.f, Lnydq4 = 0.f, Lnydq5 = 0.f, Lnydq6 = 0.f;
        
	    // rhs += LIFT*((sJ/J)*(A*nx+B*ny)*(q^* - q^-))
	    #pragma unroll p_NfacesNfp
	      for(int m=0;m<p_NfacesNfp;++m){
		const dfloat L = LIFTT[n+m*p_Np];
		Lnxdq1 += L*s_nxdq1[es][m];
		Lnxdq2 += L*s_nxdq2[es][m];
		Lnxdq3 += L*s_nxdq3[es][m];
		Lnxdq4 += L*s_nxdq4[es][m];
		Lnxdq5 += L*s_nxdq5[es][m];
		Lnxdq6 += L*s_nxdq6[es][m];
          
		Lnydq1 += L*s_nydq1[es][m];
		Lnydq2 += L*s_nydq2[es][m];
		Lnydq3 += L*s_nydq3[es][m];
		Lnydq4 += L*s_nydq4[es][m];
		Lnydq5 += L*s_nydq5[es][m];
		Lnydq6 += L*s_nydq6[es][m];
	      }

        
	    dfloat Aqx1 = -p_sqrtRT*(Lnxdq2);
	    dfloat Aqx2 = -p_sqrtRT*(Lnxdq1+p_sqrt2*Lnxdq5);
	    dfloat Aqx3 = -p_sqrtRT*(Lnxdq4);
	    dfloat Aqx4 = -p_sqrtRT*(Lnxdq3);
	    dfloat Aqx5 = -p_sqrtRT*(p_sqrt2*Lnxdq2);
	    dfloat Aqx6 =  0.f;

	    dfloat Bqy1 = -p_sqrtRT*(Lnydq3);
	    dfloat Bqy2 = -p_sqrtRT*(Lnydq4);
	    dfloat Bqy3 = -p_sqrtRT*(Lnydq1+p_sqrt2*Lnydq6);
	    dfloat Bqy4 = -p_sqrtRT*(Lnydq2);
	    dfloat Bqy5 =  0.f;
	    dfloat Bqy6 = -p_sqrtRT*(p_sqrt2*Lnydq3);

	    const dlong pmlId    = pmlIds[et];
	    const dlong rhsId    = e*p_Nfields*p_Np + n     + shift*offset ;
	    const dlong pmlrhsId = pmlId*p_Nfields*p_Np + n + shift*pmloffset;

	    // Update 
	    pmlrhsqx[pmlrhsId+0*p_Np] += Aqx1; 
	    pmlrhsqx[pmlrhsId+1*p_Np] += Aqx2; 
	    pmlrhsqx[pmlrhsId+2*p_Np] += Aqx3; 
	    pmlrhsqx[pmlrhsId+3*p_Np] += Aqx4; 
	    pmlrhsqx[pmlrhsId+4*p_Np] += Aqx5; 
	    pmlrhsqx[pmlrhsId+5*p_Np] += Aqx6; 

	    pmlrhsqy[pmlrhsId+0*p_Np] += Bqy1; 
	    pmlrhsqy[pmlrhsId+1*p_Np] += Bqy2; 
	    pmlrhsqy[pmlrhsId+2*p_Np] += Bqy3; 
	    pmlrhsqy[pmlrhsId+3*p_Np] += Bqy4; 
	    pmlrhsqy[pmlrhsId+4*p_Np] += Bqy5; 
	    pmlrhsqy[pmlrhsId+5*p_Np] += Bqy6; 

	    rhsq[rhsId+0*p_Np] += (Aqx1 + Bqy1); 
	    rhsq[rhsId+1*p_Np] += (Aqx2 + Bqy2); 
	    rhsq[rhsId+2*p_Np] += (Aqx3 + Bqy3); 
	    rhsq[rhsId+3*p_Np] += (Aqx4 + Bqy4); 
	    rhsq[rhsId+4*p_Np] += (Aqx5 + Bqy5); 
	    rhsq[rhsId+5*p_Np] += (Aqx6 + Bqy6); 
	    //
	  }
	}
      }
    }
  }
}
