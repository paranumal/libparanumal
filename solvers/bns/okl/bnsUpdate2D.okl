/*

The MIT License (MIT)

Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/


#define p_Nvars 3

@kernel void bnsLSERKUpdate2D(const dlong Nelements,
                                @restrict const  dlong *  elementIds,
                                const dfloat dt,  
                                const dfloat rka,
                                const dfloat rkb,
                                @restrict const  dfloat *  rhsq,
                                      @restrict dfloat *  resq,
                                      @restrict dfloat *  q){
  
  // Low storage Runge Kutta time step update
  for(dlong es=0;es<Nelements;++es;@outer(0)){

    for(int n=0;n<p_Np;++n;@inner(0)){
      const dlong e = elementIds[es];
      const dlong id = e*p_Np*p_Nfields + n;
                  
        for(int fld=0; fld< p_Nfields; ++fld){

         const dlong idn = id + fld*p_Np;
         dfloat r_resq = resq[idn];
         dfloat r_rhsq = rhsq[idn]; 


         dfloat r_q    = q[idn];
         //
         r_resq = rka*r_resq + dt*r_rhsq;
         r_q   += rkb*r_resq;
         //
         resq[idn] = r_resq;
         q[idn]    = r_q;
       
      }
    }
  }
}



@kernel void bnsLSERKPmlUpdate2D(const dlong pmlNelements,
                                   @restrict const  dlong   *  pmlElementIds,
                                   @restrict const  dlong   *  pmlIds,
                                   const dfloat dt,  
                                   const dfloat rka,
                                   const dfloat rkb,
                                   @restrict const  dfloat *  rhsq, 
                                   @restrict const  dfloat *  rhsqx,
                                   @restrict const  dfloat *  rhsqy, 
                                   @restrict const  dfloat *  rhsqz, 
                                        @restrict dfloat *  resq,
                                        @restrict dfloat *  resqx,
                                        @restrict dfloat *  resqy,
                                        @restrict dfloat *  resqz,
                                        @restrict dfloat *  qx,
                                        @restrict dfloat *  qy,
                                        @restrict dfloat *  qz,
                                        @restrict dfloat *  q){
  
// Low storage Runge Kutta time step update
for(dlong es=0;es<pmlNelements;++es;@outer(0)){
  @exclusive dlong e;
  for(int n=0; n < p_Np; ++n; @inner(0)){
    e = pmlElementIds[es];

    if (n < p_Np){
      const dlong pmlId = pmlIds[es];
      const dlong idb  = e*p_Nfields*p_Np + n;
      const dlong pidb = pmlId*p_Nfields*p_Np + n;
      //
      #pragma unroll p_Nfields
      for (int fld =0; fld<p_Nfields; ++fld){
        const dlong id  = idb  + fld*p_Np;
        const dlong pid = pidb + fld*p_Np;

        const dfloat r_q  = q [id ];
        const dfloat r_qx = qx[pid];
        const dfloat r_qy = qy[pid];

        dfloat r_resq  = resq [id ];      
        dfloat r_resqx = resqx[pid];
        dfloat r_resqy = resqy[pid];

        const dfloat r_rhsq  = rhsq [id ];
        const dfloat r_rhsqx = rhsqx[pid];
        const dfloat r_rhsqy = rhsqy[pid];

        r_resq  = rka*r_resq  + dt*r_rhsq ;
        r_resqx = rka*r_resqx + dt*r_rhsqx;
        r_resqy = rka*r_resqy + dt*r_rhsqy;

        q [id ] = r_q  + rkb*r_resq ;
        qx[pid] = r_qx + rkb*r_resqx;
        qy[pid] = r_qy + rkb*r_resqy;

        resq [id ]  = r_resq ;      
        resqx[pid]  = r_resqx;
        resqy[pid]  = r_resqy;
      } 
    }
  }
}
}



@kernel void bnsSARKUpdateStage2D(const dlong Nelements,
                         @restrict const  dlong *  elementIds,
                         const dlong offset,
                         const int stage,
                         const dfloat dt,
                         @restrict const  dfloat *  sarkC, 
                         @restrict const  dfloat *  rkA,
                         @restrict const  dfloat *  sarkA,
                         @restrict const  dfloat *  q,
                         @restrict const  dfloat *  rkrhsq,
                               @restrict dfloat *  rkq){
  
  // Runge Kutta intermediate stage
  for(dlong es=0;es<Nelements;++es;@outer(0)){
    for(int n=0;n<p_Np;++n;@inner(0)){

      const dlong e      = elementIds[es];
      const dlong id     = e*p_Nfields*p_Np + n;
    
      for(int fld=0; fld< p_Nfields; ++fld){

        dfloat r_q = 0.f; 
        if(fld<p_Nvars){
          r_q = q[id +fld*p_Np];
          for (int i=0;i<stage;i++){
            r_q += dt*rkA[p_NrkStages*stage + i]*rkrhsq[id + fld*p_Np +i*offset];
          }
        }
        else{
          r_q = sarkC[stage]*q[id +fld*p_Np];
          for (int i=0;i<stage;i++){
            r_q += dt*sarkA[p_NrkStages*stage + i]*rkrhsq[id + fld*p_Np +i*offset];
          }
        }
        rkq[id + fld*p_Np] = r_q;
      }
    }
  }
}







@kernel void bnsSARKPmlUpdateStage2D( const dlong pmlNelements,
                                        @restrict const  dlong   *  pmlElementIds,
                                        @restrict const  dlong   *  pmlIds,
                                        const dlong offset,
                                        const dlong pmloffset,
                                        const int stage,
                                        const dfloat dt,
                                        @restrict const  dfloat *  sarkC,  
                                        @restrict const  dfloat *  rkA,
                                        @restrict const  dfloat *  sarkA,                                        
                                        @restrict const  dfloat *  q,
                                        @restrict const  dfloat *  qx,
                                        @restrict const  dfloat *  qy,
                                        @restrict const  dfloat *  qz,
                                        @restrict const  dfloat *  rkrhsq,
                                        @restrict const  dfloat *  rkrhsqx,
                                        @restrict const  dfloat *  rkrhsqy,
                                        @restrict const  dfloat *  rkrhsqz,
                                              @restrict dfloat *  rkq,
                                              @restrict dfloat *  rkqx,
                                              @restrict dfloat *  rkqy,
                                              @restrict dfloat *  rkqz){
  
  // Runge Kutta intermediate stage
  for(dlong es=0;es<pmlNelements;++es;@outer(0)){
    @exclusive dlong e;
    for(int n=0; n < p_Np; ++n; @inner(0)){
      e = pmlElementIds[es];
      if (n < p_Np){
        const dlong pmlId     = pmlIds[es];
        const dlong id        = e*p_Nfields*p_Np + n;
        const dlong pid       = p_Nfields*pmlId*p_Np + n;
        

        for(int fld=0; fld< p_Nfields; ++fld){
          // const int idn = id + fld;        
          dfloat r_q  = 0.f;
          dfloat r_qx = 0.f;
          dfloat r_qy = 0.f;

          if(fld<p_Nvars){
            r_q  = q[id  + fld*p_Np];
            r_qx = qx[pid+ fld*p_Np];
            r_qy = qy[pid+ fld*p_Np];

            for (int i=0;i<stage;i++){
              r_q  += dt*rkA[p_NrkStages*stage+i]*rkrhsq[ id +fld*p_Np+i*offset];
              r_qx += dt*rkA[p_NrkStages*stage+i]*rkrhsqx[pid+fld*p_Np+i*pmloffset];
              r_qy += dt*rkA[p_NrkStages*stage+i]*rkrhsqy[pid+fld*p_Np+i*pmloffset];
            }
          }
          else{
            r_q  = sarkC[stage]*q[id  + fld*p_Np];
            r_qx = qx[pid+ fld*p_Np];
            r_qy = qy[pid+ fld*p_Np];

            for (int i=0;i<stage;i++){
              r_q  += dt*sarkA[p_NrkStages*stage+i]*rkrhsq[id+fld*p_Np+i*offset];
              r_qx += dt*rkA[p_NrkStages*stage+i]*rkrhsqx[pid+fld*p_Np+i*pmloffset];
              r_qy += dt*rkA[p_NrkStages*stage+i]*rkrhsqy[pid+fld*p_Np+i*pmloffset];
            }
          }

          rkq [id  +fld*p_Np] = r_q;
          rkqx[pid +fld*p_Np] = r_qx;
          rkqy[pid +fld*p_Np] = r_qy;
      }
    }
  }
}

}



@kernel void bnsSARKUpdate2D(const dlong Nelements,
                                @restrict const  dlong *  elementIds,
                                const dlong offset,
                                const int stage,
                                const dfloat dt,
                                @restrict const  dfloat * sarkC, 
                                @restrict const  dfloat *  rkA,
                                @restrict const  dfloat *  rkE,
                                @restrict const  dfloat *  sarkA,
                                @restrict const  dfloat *  sarkE,
                                @restrict const  dfloat *  q,
                                @restrict const  dfloat *  rhsq,
                                      @restrict dfloat *  rkrhsq,
                                      @restrict dfloat *  rkq,
                                      @restrict dfloat *  rkerr){
  
  // Runge Kutta intermediate stage
  for(dlong es=0;es<Nelements;++es;@outer(0)){
    for(int n=0;n<p_Np;++n;@inner(0)){

      const dlong e  = elementIds[es];
      const dlong id = e*p_Nfields*p_Np + n;

      for(int fld=0; fld< p_Nfields; ++fld){

        dfloat r_rhsq  = rhsq[id + fld*p_Np];
        dfloat r_q     = 0.f;
        dfloat r_rkerr = 0.f;

        if(stage==(p_NrkStages-1)){

          if(fld<p_Nvars){

            r_q = q[id +fld*p_Np];

            for (int i=0;i<(p_NrkStages-1);i++) {
              r_q     += dt*rkA[p_NrkStages*stage + i]*rkrhsq[id + fld*p_Np + i*offset];
              r_rkerr += dt*rkE[       i]*rkrhsq[id + fld*p_Np + i*offset];
            }
            r_q     += dt*rkA[p_NrkStages*stage + p_NrkStages-1]*r_rhsq;
            r_rkerr += dt*rkE[                    p_NrkStages-1]*r_rhsq;
          }
          else{

            r_q = sarkC[stage]*q[id +fld*p_Np];

             for (int i=0;i<(p_NrkStages-1);i++) {
              r_q     += dt*sarkA[p_NrkStages*stage + i]*rkrhsq[id + fld*p_Np + i*offset];
              r_rkerr += dt*sarkE[                    i]*rkrhsq[id + fld*p_Np + i*offset];
            }
            r_q     += dt*sarkA[p_NrkStages*stage + p_NrkStages-1]*r_rhsq;
            r_rkerr += dt*sarkE[                    p_NrkStages-1]*r_rhsq;
          }

          rkq[id     + fld*p_Np] = r_q;
          rkerr[id   + fld*p_Np] = r_rkerr;
        }
        rkrhsq[id+fld*p_Np+stage*offset] = r_rhsq;
      }
    }
  }
}




@kernel void bnsSARKPmlUpdate2D(const dlong pmlNelements,
                                  @restrict const  dlong   *  pmlElementIds,
                                  @restrict const  dlong   *  pmlIds,
                                  const dlong offset,
                                  const dlong pmloffset,
                                  const int stage,
                                  const dfloat dt,
                                  @restrict const  dfloat * sarkC, 
                                  @restrict const  dfloat *  rkA,
                                  @restrict const  dfloat *  rkE,
                                  @restrict const  dfloat *  sarkA,
                                  @restrict const  dfloat *  sarkE,
                                  @restrict const  dfloat *  q,
                                  @restrict const  dfloat *  qx,
                                  @restrict const  dfloat *  qy,
                                  @restrict const  dfloat *  qz,
                                  @restrict const  dfloat *  rhsq,
                                  @restrict const  dfloat *  rhsqx,
                                  @restrict const  dfloat *  rhsqy,
                                  @restrict const  dfloat *  rhsqz,
                                        @restrict dfloat *  rkrhsq,
                                        @restrict dfloat *  rkrhsqx,
                                        @restrict dfloat *  rkrhsqy,
                                        @restrict dfloat *  rkrhsqz,
                                        @restrict dfloat *  rkq,
                                        @restrict dfloat *  rkqx,
                                        @restrict dfloat *  rkqy,
                                        @restrict dfloat *  rkqz,
                                        @restrict dfloat *  rkerr){
  // Runge Kutta intermediate stage
  for(dlong es=0;es<pmlNelements;++es;@outer(0)){
    @exclusive dlong e;
    for(int n=0; n < p_Np; ++n; @inner(0)){
      e = pmlElementIds[es];
      if (n < p_Np){
        const dlong pmlId = pmlIds[es];
        const dlong id  = p_Nfields*e*p_Np + n;
        const dlong pid = p_Nfields*pmlId*p_Np + n;

        for(int fld=0; fld< p_Nfields; ++fld){

          dfloat r_rhsq  = rhsq [id  + fld*p_Np];
          dfloat r_rhsqx = rhsqx[pid + fld*p_Np];
          dfloat r_rhsqy = rhsqy[pid + fld*p_Np];

          if(stage==(p_NrkStages-1)){
            //
            dfloat r_q     = 0.f;
            dfloat r_qx    = 0.f;
            dfloat r_qy    = 0.f;
            dfloat r_rkerr = 0.f;

            if(fld<p_Nvars){
              r_q  = q [id  +fld*p_Np];
              r_qx = qx[pid +fld*p_Np];
              r_qy = qy[pid +fld*p_Np];

              dfloat r_rkerr = 0.f;

              for (int i=0;i<(p_NrkStages-1);i++) {
                r_q     += dt*rkA[p_NrkStages*stage + i]*rkrhsq[  id + fld*p_Np + i*offset];
                r_qx    += dt*rkA[p_NrkStages*stage + i]*rkrhsqx[pid + fld*p_Np + i*pmloffset];
                r_qy    += dt*rkA[p_NrkStages*stage + i]*rkrhsqy[pid + fld*p_Np + i*pmloffset];
                r_rkerr += dt*rkE[       i]*rkrhsq[id + fld*p_Np + i*offset];
              }

              r_q     += dt*rkA[p_NrkStages*stage + p_NrkStages-1]*r_rhsq;
              r_qx    += dt*rkA[p_NrkStages*stage + p_NrkStages-1]*r_rhsqx;
              r_qy    += dt*rkA[p_NrkStages*stage + p_NrkStages-1]*r_rhsqy;

              r_rkerr += dt*rkE[p_NrkStages-1]*r_rhsq;
            }
            else{

              r_q  = sarkC[stage]*q [id  +fld*p_Np];
              r_qx = qx[pid +fld*p_Np];
              r_qy = qy[pid +fld*p_Np];

              dfloat r_rkerr = 0.f;

              for (int i=0;i<(p_NrkStages-1);i++) {
                r_q     += dt*sarkA[p_NrkStages*stage + i]*rkrhsq[id + fld*p_Np + i*offset];
                r_qx    += dt*rkA[p_NrkStages*stage + i]*rkrhsqx[pid + fld*p_Np + i*pmloffset];
                r_qy    += dt*rkA[p_NrkStages*stage + i]*rkrhsqy[pid + fld*p_Np + i*pmloffset];

                r_rkerr += dt*sarkE[       i]*rkrhsq[id + fld*p_Np + i*offset];
              }

              r_q     += dt*sarkA[p_NrkStages*stage + p_NrkStages-1]*r_rhsq;
              r_qx    += dt*rkA[p_NrkStages*stage + p_NrkStages-1]*r_rhsqx;
              r_qy    += dt*rkA[p_NrkStages*stage + p_NrkStages-1]*r_rhsqy;

              r_rkerr += dt*sarkE[p_NrkStages-1]*r_rhsq; 
            }

            rkq[id     + fld*p_Np] = r_q;
            rkqx[pid   + fld*p_Np] = r_qx;
            rkqy[pid   + fld*p_Np] = r_qy;
            rkerr[id   + fld*p_Np] = r_rkerr;
          }

        rkrhsq[id  +fld*p_Np  +stage*offset]    = r_rhsq;
        rkrhsqx[pid+fld*p_Np+stage*pmloffset]   = r_rhsqx;
        rkrhsqy[pid+fld*p_Np+stage*pmloffset]   = r_rhsqy;
        }     
      }
    }
  }
}





// This @kernel is used in both pml and non-pml regions
@kernel void bnsMRSAABTraceUpdate2D(const dlong Nelements,
                                          @restrict const  dlong *  elementIds,
                                          const dlong offset,
                                          const int shift,
                                          const dfloat expdt, 
                                          const dfloat ab1,
                                          const dfloat ab2,
                                          const dfloat ab3,
                                          const dfloat saab1,
                                          const dfloat saab2,
                                          const dfloat saab3,
                                          @restrict const  dlong  *  vmapM,
                                          @restrict const  dfloat *  q,
                                          @restrict const  dfloat *  rhsq,
                                                @restrict dfloat *  fQM){
  
  // Low storage Runge Kutta time step update
  for(dlong es=0;es<Nelements;++es;@outer(0)){

    @shared dfloat s_q[p_Np*p_Nfields];
    @exclusive dlong e; 

    for(int n=0;n<p_maxNodes;++n;@inner(0)){
      e  = elementIds[es];
      if(n<p_Np){
        const dlong id = e*p_Np*p_Nfields + n ;
        // hard-coded for 3th order
        const dlong rhsId1 = id + ((shift+0)%3)*offset;
        const dlong rhsId2 = id + ((shift+2)%3)*offset;
        const dlong rhsId3 = id + ((shift+1)%3)*offset;
       
        #pragma unroll p_Nfields
          for(int fld=0; fld< p_Nfields; ++fld){
            const int fid = fld*p_Np; 
            if(fld<p_Nvars)
              s_q[n+fid] = q[id+fid]+ab1*rhsq[rhsId1+fid]+ab2*rhsq[rhsId2+fid]+ab3*rhsq[rhsId3+fid];
            else
              s_q[n+fid] = expdt*q[id+fid] + saab1*rhsq[rhsId1+fid] + saab2*rhsq[rhsId2+fid] + saab3*rhsq[rhsId3+fid];
          }
      }
    }

    // make sure all node data is loaded into @shared
    @barrier("local");

    for(int n=0;n<p_maxNodes;++n;@inner(0)){
      if(n<p_Nfaces*p_Nfp){

        const dlong vid  = e*p_Nfp*p_Nfaces + n;
        const int qidM   = vmapM[vid]-e*p_Np;

        const dlong qid  = e*p_Nfp*p_Nfaces*p_Nfields + n;
        
        #pragma unroll p_Nfields
         for (int fld = 0; fld < p_Nfields; ++fld){
          fQM[qid+fld*p_Nfp*p_Nfaces] = s_q[qidM+fld*p_Np];  
        }   
      }

    }

  }
}


// This @kernel does not use float 4 format, 
@kernel void bnsMRSAABUpdate2D( const dlong Nelements,
                                  @restrict const  dlong *  elementIds,
                                  const dlong offset,
                                  const int shift,
                                  const dfloat expdt, 
                                  const dfloat ab1,
                                  const dfloat ab2,
                                  const dfloat ab3,
                                  const dfloat saab1,
                                  const dfloat saab2,
                                  const dfloat saab3,
                                  @restrict const  dlong  *  vmapM,
                                  @restrict const  dfloat *  rhsq,
                                        @restrict dfloat *  fQM,
                                        @restrict dfloat *  q){
  
  // Low storage Runge Kutta time step update
  for(dlong es=0;es<Nelements;++es;@outer(0)){

    @shared dfloat s_q[p_Np*p_Nfields];
    @exclusive dlong e; 

    for(int n=0;n<p_maxNodes;++n;@inner(0)){
      e  = elementIds[es];
      if(n<p_Np){

         const dlong id = e*p_Np*p_Nfields + n ;
        // hard-coded for 3th order
        const dlong rhsId1 = id + ((shift+0)%3)*offset;
        const dlong rhsId2 = id + ((shift+2)%3)*offset;
        const dlong rhsId3 = id + ((shift+1)%3)*offset;

        #pragma unroll p_Nfields
        for(int fld=0; fld< p_Nfields; ++fld){
          const int fid = fld*p_Np; 
            if(fld<p_Nvars)
              s_q[n+fid] = q[id+fid]+ab1*rhsq[rhsId1+fid]+ab2*rhsq[rhsId2+fid]+ab3*rhsq[rhsId3+fid];
            else
              s_q[n+fid] = expdt*q[id+fid] + saab1*rhsq[rhsId1+fid] + saab2*rhsq[rhsId2+fid] + saab3*rhsq[rhsId3+fid];
        }
      }
    }

    // make sure all node data is loaded into @shared
    @barrier("local");

    for(int n=0;n<p_maxNodes;++n;@inner(0)){

      // Update q
      if(n<p_Np){
        const dlong id = e*p_Np*p_Nfields + n ;
        #pragma unroll p_Nfields
        for (int fld = 0; fld < p_Nfields; ++fld){
          q[id+fld*p_Np]   = s_q[n+fld*p_Np];
        } 

      }

     if(n<p_Nfaces*p_Nfp){

        const dlong vid  = e*p_Nfp*p_Nfaces + n;
        const int qidM   = vmapM[vid]-e*p_Np;

        const dlong qid  = e*p_Nfp*p_Nfaces*p_Nfields + n;
        
        #pragma unroll p_Nfields
         for (int fld = 0; fld < p_Nfields; ++fld){
          fQM[qid+fld*p_Nfp*p_Nfaces] = s_q[qidM+fld*p_Np];  
        }   
      }

    }

  }
}


@kernel void bnsMRSAABPmlUpdate2D(const dlong pmlNelements,
                                    @restrict const  dlong   *  pmlElementIds,
                                    @restrict const  dlong   *  pmlIds,
                                    const dlong offset,
                                    const dlong pmloffset,
                                    const int   shift,
                                    const dfloat expdt,  
                                    const dfloat ab1,
                                    const dfloat ab2,
                                    const dfloat ab3,
                                    const dfloat saab1,
                                    const dfloat saab2,
                                    const dfloat saab3,
                                    @restrict const  dlong *  vmapM,
                                    @restrict const  dfloat *  rhsq, 
                                    @restrict const  dfloat *  pmlrhsqx,
                                    @restrict const  dfloat *  pmlrhsqy,
                                    @restrict const  dfloat *  pmlrhsqz,
                                          @restrict dfloat *  q,
                                          @restrict dfloat *  pmlqx,
                                          @restrict dfloat *  pmlqy,
                                          @restrict dfloat *  pmlqz,
                                          @restrict dfloat *  fQM){
  // Low storage Runge Kutta time step update
  for(dlong es=0;es<pmlNelements;++es;@outer(0)){
    @shared dfloat s_q[p_Np*p_Nfields];
    @exclusive dlong e; 
    for(int n=0;n<p_maxNodes;++n;@inner(0)){
      e  = pmlElementIds[es];
      if (n < p_Np){
      
        const dlong pmlId = pmlIds[es];

        const dlong id  = p_Nfields*e*p_Np + n;
        const dlong pid = p_Nfields*pmlId*p_Np + n;

        const dlong rhsId1 = id + ((shift+0)%3)*offset;
        const dlong rhsId2 = id + ((shift+2)%3)*offset;
        const dlong rhsId3 = id + ((shift+1)%3)*offset;

        const dlong pmlrhsId1 = pid + ((shift+0)%3)*pmloffset;
        const dlong pmlrhsId2 = pid + ((shift+2)%3)*pmloffset;
        const dlong pmlrhsId3 = pid + ((shift+1)%3)*pmloffset;
        //
        #pragma unroll p_Nfields
         for(int fld=0; fld<p_Nfields; ++fld){
          const int fid = fld*p_Np; 

          pmlqx[pid+fid] += ab1*pmlrhsqx[pmlrhsId1+fid] + ab2*pmlrhsqx[pmlrhsId2+fid] + ab3*pmlrhsqx[pmlrhsId3+fid];
          pmlqy[pid+fid] += ab1*pmlrhsqy[pmlrhsId1+fid] + ab2*pmlrhsqy[pmlrhsId2+fid] + ab3*pmlrhsqy[pmlrhsId3+fid];

          dfloat n_q = 0.f; 

          if(fld<p_Nvars)
            n_q      = q[id+fid]+ab1*rhsq[rhsId1+fid]+ab2*rhsq[rhsId2+fid]+ab3*rhsq[rhsId3+fid];
          else
            n_q      = expdt*q[id+fid]+saab1*rhsq[rhsId1+fid] + saab2*rhsq[rhsId2+fid] + saab3*rhsq[rhsId3+fid];
          //          
          s_q[n+fid] = n_q;
          q[id+fid]  = n_q;
         }
      }
    }

    @barrier("local");

    for(int n=0;n<p_maxNodes;++n;@inner(0)){
      if(n<p_Nfaces*p_Nfp){

        const dlong vid  = e*p_Nfp*p_Nfaces + n;
        const int qidM   = vmapM[vid]-e*p_Np;

        const dlong qid  = e*p_Nfp*p_Nfaces*p_Nfields + n;
        
        #pragma unroll p_Nfields
         for (int fld = 0; fld < p_Nfields; ++fld){
          fQM[qid+fld*p_Nfp*p_Nfaces] = s_q[qidM+fld*p_Np];  
        }   
      }

    }
      
  }
}


