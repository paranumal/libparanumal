/*

The MIT License (MIT)

Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus, Rajesh Gandham

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

@kernel void ellAXPY(const dlong   numRows,
        const int             nnzPerRow,
        const dlong             strideLength,
        const dfloat           alpha,
        const dfloat           beta,
        @restrict const  dlong  * cols,
        @restrict const  dfloat * coefs,
        @restrict const  dfloat * x,
              @restrict dfloat * y){

  // y = alpha * A * x + beta * y
  for(dlong i=0;i<numRows;++i;@tile(256,@outer,@inner)){

    if(i < numRows){
      const dfloat betay = beta*y[i];

      dfloat result = 0.;
      for(int c=0; c<nnzPerRow; c++){
        // location in the memory
        const dlong address = c*strideLength+i;

        // access column index
        const dlong col = cols[address];

        if (col >-1) {
          const dfloat coeffn = coefs[address];
          const dfloat xn = x[col];

          result += coeffn*xn;
        }
      }
      y[i] = alpha*result + betay;//beta*y[row];
    }
  }
}

@kernel void ellZeqAXPY(const dlong   numRows,
           const int   nnzPerRow,
           const dlong   strideLength,
           const dfloat   alpha,
           const dfloat   beta,
           @restrict const  dlong  * cols,
           @restrict const  dfloat * coefs,
           @restrict const  dfloat * x,
           @restrict const  dfloat * y,
                 @restrict dfloat * z){

  // z = alpha * A * x + beta * y
  for(dlong i=0;i<numRows;++i;@tile(256,@outer,@inner)){
    if(i < numRows){
      dfloat result = 0.;
      for(int c=0; c<nnzPerRow; c++){
        // location in the memory
        const dlong address = c*strideLength+i;

        // access column index
        const dlong col = cols[address];

        // dont access coefs[address] if col is -ve
        if(col > -1) result += coefs[address]*x[col];
      }
      z[i] = alpha*result + beta*y[i];
    }
  }
}

@kernel void ellJacobi(const dlong   numRows,
           const int   nnzPerRow,
           const dlong   strideLength,
           @restrict const  dlong  * cols,
           @restrict const  dfloat * coefs,
           @restrict const  dfloat * x,
           @restrict const  dfloat * r,
                 @restrict dfloat * z){

  // z = r - (A-D)*x
  for(dlong i=0;i<numRows;++i;@tile(256,@outer,@inner)){
    if(i < numRows){
      dfloat result = r[i];

      // skip the first stride since it corresponds to diag
      for(int c=1; c<nnzPerRow; c++){
        // location in the memory
        const dlong address = c*strideLength+i;

        // access column index
        const dlong col = cols[address];

        // dont access coefs[address] or x[col] if col is -ve
        if(col > -1) result -= coefs[address]*x[col];
      }
      z[i] = result;
    }
  }
}

