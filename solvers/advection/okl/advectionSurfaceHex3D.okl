/*

The MIT License (MIT)

Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

void surfaceTerms(const int e,
                  const int sk,
                  const int face,
                  const int i,
                  const int j,
                  const int k,
                  const dfloat *sgeo,
                  const dfloat t,
                  const dfloat *x,
                  const dfloat *y,
                  const dfloat *z,
                  const int *vmapM,
                  const int *vmapP,
                  const int *EToB,
                  const dfloat *q,
                  dfloat *rhsq){

  const dfloat nx = sgeo[sk*p_Nsgeo+p_NXID];
  const dfloat ny = sgeo[sk*p_Nsgeo+p_NYID];
  const dfloat nz = sgeo[sk*p_Nsgeo+p_NZID];
  const dfloat sJ = sgeo[sk*p_Nsgeo+p_SJID];
  const dfloat invWJ = sgeo[sk*p_Nsgeo+p_WIJID];

  const dlong idM = vmapM[sk];
  const dlong idP = vmapP[sk];

  const dfloat qM = q[idM];
  dfloat qP = q[idP];

  const int bc = EToB[face+p_Nfaces*e];
  if(bc>0){
    advectionDirichletConditions3D(bc, t, x[idM], y[idM], z[idM], nx, ny, nz, qM, &qP);
  }

  dfloat cxM=0.0, cyM=0.0, czM=0.0;
  dfloat cxP=0.0, cyP=0.0, czP=0.0;
  advectionFlux3D(t, x[idM], y[idM], z[idM], qM, &cxM, &cyM, &czM);
  advectionFlux3D(t, x[idM], y[idM], z[idM], qP, &cxP, &cyP, &czP);

  const dfloat ndotcM = nx*cxM + ny*cyM + nz*czM;
  const dfloat ndotcP = nx*cxP + ny*cyP + nz*czP;

  // Find max normal velocity on the face
  dfloat uM=0.0, vM=0.0, wM=0.0;
  dfloat uP=0.0, vP=0.0, wP=0.0;
  advectionMaxWaveSpeed3D(t, x[idM], y[idM], z[idM], qM, &uM, &vM, &wM);
  advectionMaxWaveSpeed3D(t, x[idM], y[idM], z[idM], qP, &uP, &vP, &wP);

  const dfloat unM   = fabs(nx*uM + ny*vM + nz*wM);
  const dfloat unP   = fabs(nx*uP + ny*vP + nz*wP);
  const dfloat unMax = (unM > unP) ? unM : unP;

  const dlong id = e*p_Np+k*p_Nq*p_Nq+j*p_Nq+i;
  rhsq[id] -= 0.5*invWJ*sJ*(ndotcM+ndotcP-unMax*(qP-qM));
}

// batch process elements
@kernel void advectionSurfaceHex3D(const dlong Nelements,
                                   @restrict const dfloat * sgeo,
                                   @restrict const dfloat * LIFT,
                                   @restrict const dlong  * vmapM,
                                   @restrict const dlong  * vmapP,
                                   @restrict const int    * EToB,
                                   const dfloat time,
                                   @restrict const dfloat * x,
                                   @restrict const dfloat * y,
                                   @restrict const dfloat * z,
                                   @restrict const dfloat * q,
                                   @restrict dfloat *  rhsq){

  // for all elements
  for(dlong eo=0;eo<Nelements;eo+=p_NblockS;@outer(0)){

    // for all face nodes of all elements
    // face 0 & 5
    for(int es=0;es<p_NblockS;++es;@inner(2)){
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){
          const dlong e = eo + es;
          if(e<Nelements){
            const dlong sk0 = e*p_Nfp*p_Nfaces + 0*p_Nfp + j*p_Nq + i;
            const dlong sk5 = e*p_Nfp*p_Nfaces + 5*p_Nfp + j*p_Nq + i;

            //      surfaceTerms(sk0,0,i,j,0     );
            surfaceTerms(e,sk0,0,i,j,0, sgeo, time, x, y, z, vmapM, vmapP, EToB, q, rhsq);

            //surfaceTerms(sk5,5,i,j,(p_Nq-1));
            surfaceTerms(e,sk5,5,i,j,(p_Nq-1), sgeo, time, x, y, z, vmapM, vmapP, EToB, q, rhsq);
          }
        }
      }
    }

    @barrier("global");

    // face 1 & 3
    for(int es=0;es<p_NblockS;++es;@inner(2)){
      for(int k=0;k<p_Nq;++k;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){
          const dlong e = eo + es;
          if(e<Nelements){
            const dlong sk1 = e*p_Nfp*p_Nfaces + 1*p_Nfp + k*p_Nq + i;
            const dlong sk3 = e*p_Nfp*p_Nfaces + 3*p_Nfp + k*p_Nq + i;

            //      surfaceTerms(sk1,1,i,0     ,k);
            surfaceTerms(e,sk1,1,i,0,k, sgeo, time, x, y, z, vmapM, vmapP, EToB, q, rhsq);

            //      surfaceTerms(sk3,3,i,(p_Nq-1),k);
            surfaceTerms(e,sk3,3,i,(p_Nq-1),k, sgeo, time, x, y, z, vmapM, vmapP, EToB, q, rhsq);
          }
        }
      }
    }

    @barrier("global");

    // face 2 & 4
    for(int es=0;es<p_NblockS;++es;@inner(2)){
      for(int k=0;k<p_Nq;++k;@inner(1)){
        for(int j=0;j<p_Nq;++j;@inner(0)){
          const dlong e = eo + es;
          if(e<Nelements){
            const dlong sk2 = e*p_Nfp*p_Nfaces + 2*p_Nfp + k*p_Nq + j;
            const dlong sk4 = e*p_Nfp*p_Nfaces + 4*p_Nfp + k*p_Nq + j;

            //      surfaceTerms(sk2,2,(p_Nq-1),j,k);
            surfaceTerms(e,sk2,2,(p_Nq-1),j,k, sgeo, time, x, y, z, vmapM, vmapP, EToB, q, rhsq);

            //surfaceTerms(sk4,4,0     ,j,k);
            surfaceTerms(e,sk4,4,0,j,k, sgeo, time, x, y, z, vmapM, vmapP, EToB, q, rhsq);
          }
        }
      }
    }
  }
}

