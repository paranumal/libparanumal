/*

The MIT License (MIT)

Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/


kernel void ellipticBRGradientSurface2D_v0(const int Nelements,
         const int   * restrict vmapM,
         const int   * restrict vmapP,
         const dfloat * restrict sgeo,
         const int   * restrict EToB,
         const dfloat * restrict LIFTT,
         const dfloat * restrict q,
         dfloat * restrict gradq){

  // for all elements
  for(int eo=0;eo<Nelements;eo+=p_NblockS;outer0){

    shared dfloat s_fluxqx[p_NblockS][p_Nfp*p_Nfaces];
    shared dfloat s_fluxqy[p_NblockS][p_Nfp*p_Nfaces];

    // for all face nodes of all elements
    for(int es=0;es<p_NblockS;++es;inner1){
      for(int n=0;n<p_maxNodes;++n;inner0){ // maxNodes = max(Nfp*Nfaces,Np)
        int e = eo + es;
        if(e<Nelements){
          if(n<p_Nfp*p_Nfaces){
            // find face that owns this node
            int face = n/p_Nfp;
            // load surface geofactors for this face
            int sid    = p_Nsgeo*(e*p_Nfaces+face);
            dfloat nx   = sgeo[sid+p_NXID];
            dfloat ny   = sgeo[sid+p_NYID];
            dfloat sJ   = sgeo[sid+p_SJID];
            dfloat invJ = sgeo[sid+p_IJID];

            // indices of negative and positive traces of face node
            int id  = e*p_Nfp*p_Nfaces + n;
            const int idM = vmapM[id];
            const int idP = vmapP[id];

            dfloat  qM = q[idM], qP = q[idP];

            // apply boundary condition
            int bc = EToB[face+p_Nfaces*e];
            if(bc>0) {
              dfloat qxM = 0.f, qyM = 0.f;
              dfloat qxP = 0.f, qyP = 0.f;
              ellipticHomogeneousBC2D(bc, qM, qxM, qyM, qP, qxP, qyP);
              qP = 2*qP - qM;
            }

            // evaluate "flux" terms: LLF
            const dfloat sc = .5f*invJ * sJ ;

            // Centered flux for pr p*-p = 0.5(PP-PM) // Central Flux
            s_fluxqx[es][n]  = sc*nx*(qP-qM);
            s_fluxqy[es][n]  = sc*ny*(qP-qM);
          }
        }
      }
    }

    // wait for all flux functions are written to shared
    barrier(localMemFence);

    // for each node in the element
    for(int es=0;es<p_NblockS;++es;inner1){
      for(int n=0;n<p_maxNodes;++n;inner0){
        int e = eo + es;
        if(e<Nelements){
          if(n<p_Np){
            int id = e*2*p_Np;

            dfloat qx  = gradq[id+     n];
            dfloat qy  = gradq[id+p_Np+n];

            // Lift
            occaUnroll(p_NfacesNfp)
              for(int m=0;m<p_Nfaces*p_Nfp;++m){
                dfloat L = LIFTT[n+m*p_Np];
                qx += L*s_fluxqx[es][m];
                qy += L*s_fluxqy[es][m];
              }

            gradq[id+     n] = qx;
            gradq[id+p_Np+n] = qy;
          }
        }
      }
    }
  }
}



