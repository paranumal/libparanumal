/*

The MIT License (MIT)

Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/


#define datafloat dfloat

kernel void ellipticPartialAxTet3D_Ref0(int Nelements,
    int   * restrict elementList,
    datafloat * restrict ggeo,
    datafloat * restrict SrrT,
    datafloat * restrict SrsT,
    datafloat * restrict SrtT,
    datafloat * restrict SsrT,
    datafloat * restrict SssT,
    datafloat * restrict SstT,
    datafloat * restrict StrT,
    datafloat * restrict StsT,
    datafloat * restrict SttT,
    datafloat * restrict MM,
    datafloat lambda,
    datafloat  * restrict q,
    datafloat  * restrict Aq){

  for(int e=0;e<Nelements;e++;outer0){

    //  shared datafloat s_q[p_Np];

    //loop 1
    for(int n=0;n<p_Np;++n;inner0){
      int element = elementList[e];
      int gid = element*p_Nggeo;

      datafloat Grr = ggeo[gid + p_G00ID];
      datafloat Grs = ggeo[gid + p_G01ID];
      datafloat Grt = ggeo[gid + p_G02ID];
      datafloat Gss = ggeo[gid + p_G11ID];
      datafloat Gst = ggeo[gid + p_G12ID];
      datafloat Gtt = ggeo[gid + p_G22ID];
      datafloat J   = ggeo[gid + p_GWJID];

      datafloat qrr = 0.;
      datafloat qrs = 0.;
      datafloat qrt = 0.;
      datafloat qsr = 0.;
      datafloat qss = 0.;
      datafloat qst = 0.;
      datafloat qtr = 0.;
      datafloat qts = 0.;
      datafloat qtt = 0.;
      datafloat qM = 0.;

      for (int k=0;k<p_Np;k++) {
        qrr += SrrT[n+k*p_Np]*q[k+element*p_Np];
        qrs += SrsT[n+k*p_Np]*q[k+element*p_Np];
        qrt += SrtT[n+k*p_Np]*q[k+element*p_Np];
        qsr += SsrT[n+k*p_Np]*q[k+element*p_Np];
        qss += SssT[n+k*p_Np]*q[k+element*p_Np];
        qst += SstT[n+k*p_Np]*q[k+element*p_Np];
        qtr += StrT[n+k*p_Np]*q[k+element*p_Np];
        qts += StsT[n+k*p_Np]*q[k+element*p_Np];
        qtt += SttT[n+k*p_Np]*q[k+element*p_Np];
        qM  += MM[n+k*p_Np]*q[k+element*p_Np];
      }


      const int id = n + element*p_Np;

      Aq[id] = Grr*qrr+Grs*qrs+Grt*qrt
        +Grs*qsr+Gss*qss+Gst*qst 
        +Grt*qtr+Gst*qts+Gtt*qtt 
        +J*lambda*qM;
    }
  }
}

// Ref0+const
kernel void ellipticPartialAxTet3D_Ref1(const int Nelements,
    const int   * restrict elementList,
    const datafloat * restrict ggeo,
    const datafloat * restrict SrrT,
    const datafloat * restrict SrsT,
    const datafloat * restrict SrtT,
    const datafloat * restrict SsrT,
    const datafloat * restrict SssT,
    const datafloat * restrict SstT,
    const datafloat * restrict StrT,
    const datafloat * restrict StsT,
    const datafloat * restrict SttT,
    const datafloat * restrict MM,
    const datafloat lambda,
    const datafloat  * restrict q,
    datafloat  * restrict Aq){


  for(int e=0;e<Nelements;e++;outer0){

    //  shared datafloat s_q[p_Np];

    //loop 1
    for(int n=0;n<p_Np;++n;inner0){
      const int element = elementList[e];
      const int gid = element*p_Nggeo;

      const datafloat Grr = ggeo[gid + p_G00ID];
      const datafloat Grs = ggeo[gid + p_G01ID];
      const datafloat Grt = ggeo[gid + p_G02ID];
      const datafloat Gss = ggeo[gid + p_G11ID];
      const datafloat Gst = ggeo[gid + p_G12ID];
      const datafloat Gtt = ggeo[gid + p_G22ID];
      const datafloat J   = ggeo[gid + p_GWJID];

      datafloat qrr = 0.;
      datafloat qrs = 0.;
      datafloat qrt = 0.;
      datafloat qsr = 0.;
      datafloat qss = 0.;
      datafloat qst = 0.;
      datafloat qtr = 0.;
      datafloat qts = 0.;
      datafloat qtt = 0.;
      datafloat qM = 0.;

      for (int k=0;k<p_Np;k++) {
        qrr += SrrT[n+k*p_Np]*q[k+element*p_Np];
        qrs += SrsT[n+k*p_Np]*q[k+element*p_Np];
        qrt += SrtT[n+k*p_Np]*q[k+element*p_Np];
        qsr += SsrT[n+k*p_Np]*q[k+element*p_Np];
        qss += SssT[n+k*p_Np]*q[k+element*p_Np];
        qst += SstT[n+k*p_Np]*q[k+element*p_Np];
        qtr += StrT[n+k*p_Np]*q[k+element*p_Np];
        qts += StsT[n+k*p_Np]*q[k+element*p_Np];
        qtt += SttT[n+k*p_Np]*q[k+element*p_Np];
        qM  += MM[n+k*p_Np]*q[k+element*p_Np];
      }


      const int id = n + element*p_Np;

      Aq[id] = Grr*qrr+Grs*qrs+Grt*qrt
        +Grs*qsr+Gss*qss+Gst*qst 
        +Grt*qtr+Gst*qts+Gtt*qtt 
        +J*lambda*qM;
    }
  }
}
//Ref2 = Ref1 + main loop unrolled
kernel void ellipticPartialAxTet3D_Ref2(const int Nelements,
    const int   * restrict elementList,
    const datafloat * restrict ggeo,
    const datafloat * restrict SrrT,
    const datafloat * restrict SrsT,
    const datafloat * restrict SrtT,
    const datafloat * restrict SsrT,
    const datafloat * restrict SssT,
    const datafloat * restrict SstT,
    const datafloat * restrict StrT,
    const datafloat * restrict StsT,
    const datafloat * restrict SttT,
    const datafloat * restrict MM,
    const datafloat lambda,
    const datafloat  * restrict q,
    datafloat  * restrict Aq){


  for(int e=0;e<Nelements;e++;outer0){

    //  shared datafloat s_q[p_Np];

    //loop 1
    for(int n=0;n<p_Np;++n;inner0){
      const int element = elementList[e];
      const int gid = element*p_Nggeo;

      const datafloat Grr = ggeo[gid + p_G00ID];
      const datafloat Grs = ggeo[gid + p_G01ID];
      const datafloat Grt = ggeo[gid + p_G02ID];
      const datafloat Gss = ggeo[gid + p_G11ID];
      const datafloat Gst = ggeo[gid + p_G12ID];
      const datafloat Gtt = ggeo[gid + p_G22ID];
      const datafloat J   = ggeo[gid + p_GWJID];

      datafloat qrr = 0.;
      datafloat qrs = 0.;
      datafloat qrt = 0.;
      datafloat qsr = 0.;
      datafloat qss = 0.;
      datafloat qst = 0.;
      datafloat qtr = 0.;
      datafloat qts = 0.;
      datafloat qtt = 0.;
      datafloat qM = 0.;

      occaUnroll(p_Np)
        for (int k=0;k<p_Np;k++) {
          qrr += SrrT[n+k*p_Np]*q[k+element*p_Np];
          qrs += SrsT[n+k*p_Np]*q[k+element*p_Np];
          qrt += SrtT[n+k*p_Np]*q[k+element*p_Np];
          qsr += SsrT[n+k*p_Np]*q[k+element*p_Np];
          qss += SssT[n+k*p_Np]*q[k+element*p_Np];
          qst += SstT[n+k*p_Np]*q[k+element*p_Np];
          qtr += StrT[n+k*p_Np]*q[k+element*p_Np];
          qts += StsT[n+k*p_Np]*q[k+element*p_Np];
          qtt += SttT[n+k*p_Np]*q[k+element*p_Np];
          qM  += MM[n+k*p_Np]*q[k+element*p_Np];
        }


      const int id = n + element*p_Np;

      Aq[id] = Grr*qrr+Grs*qrs+Grt*qrt
        +Grs*qsr+Gss*qss+Gst*qst 
        +Grt*qtr+Gst*qts+Gtt*qtt 
        +J*lambda*qM;
    }
  }
}
//Ref3 = Ref2 read q once
kernel void ellipticPartialAxTet3D_Ref3(const int Nelements,
    const int   * restrict elementList,
    const datafloat * restrict ggeo,
    const datafloat * restrict SrrT,
    const datafloat * restrict SrsT,
    const datafloat * restrict SrtT,
    const datafloat * restrict SsrT,
    const datafloat * restrict SssT,
    const datafloat * restrict SstT,
    const datafloat * restrict StrT,
    const datafloat * restrict StsT,
    const datafloat * restrict SttT,
    const datafloat * restrict MM,
    const datafloat lambda,
    const datafloat  * restrict q,
    datafloat  * restrict Aq){


  for(int e=0;e<Nelements;e++;outer0){

    //  shared datafloat s_q[p_Np];

    //loop 1
    for(int n=0;n<p_Np;++n;inner0){
      const int element = elementList[e];
      const int gid = element*p_Nggeo;

      const datafloat Grr = ggeo[gid + p_G00ID];
      const datafloat Grs = ggeo[gid + p_G01ID];
      const datafloat Grt = ggeo[gid + p_G02ID];
      const datafloat Gss = ggeo[gid + p_G11ID];
      const datafloat Gst = ggeo[gid + p_G12ID];
      const datafloat Gtt = ggeo[gid + p_G22ID];
      const datafloat J   = ggeo[gid + p_GWJID];

      datafloat qrr = 0.;
      datafloat qrs = 0.;
      datafloat qrt = 0.;
      datafloat qsr = 0.;
      datafloat qss = 0.;
      datafloat qst = 0.;
      datafloat qtr = 0.;
      datafloat qts = 0.;
      datafloat qtt = 0.;
      datafloat qM = 0.;

      occaUnroll(p_Np)
        for (int k=0;k<p_Np;k++) {
          const datafloat qk = q[k+element*p_Np];

          qrr += SrrT[n+k*p_Np]*qk;
          qrs += SrsT[n+k*p_Np]*qk;
          qrt += SrtT[n+k*p_Np]*qk;
          qsr += SsrT[n+k*p_Np]*qk;
          qss += SssT[n+k*p_Np]*qk;
          qst += SstT[n+k*p_Np]*qk;
          qtr += StrT[n+k*p_Np]*qk;
          qts += StsT[n+k*p_Np]*qk;
          qtt += SttT[n+k*p_Np]*qk;
          qM  += MM[n+k*p_Np]*qk;
        }


      const int id = n + element*p_Np;

      Aq[id] = Grr*qrr+Grs*qrs+Grt*qrt
        +Grs*qsr+Gss*qss+Gst*qst 
        +Grt*qtr+Gst*qts+Gtt*qtt 
        +J*lambda*qM;
    }
  }
}


//Ref4 = Ref3 + q in shared
// (former Ref 1)
kernel void ellipticPartialAxTet3D_Ref4(const int Nelements,
    const int   * restrict elementList,
    const datafloat * restrict ggeo,
    const datafloat * restrict SrrT,
    const datafloat * restrict SrsT,
    const datafloat * restrict SrtT,
    const datafloat * restrict SsrT,
    const datafloat * restrict SssT,
    const datafloat * restrict SstT,
    const datafloat * restrict StrT,
    const datafloat * restrict StsT,
    const datafloat * restrict SttT,
    const datafloat * restrict MM,
    const datafloat lambda,
    const datafloat  * restrict q,
    datafloat  * restrict Aq){

  for(int e=0;e<Nelements;e++;outer0){

    shared datafloat s_q[p_Np];

    for(int n=0;n<p_Np;++n;inner0){
      //prefetch q
      const int element = elementList[e];
      const int id = n + element*p_Np;
      s_q[n] = q[id];
    }

    barrier(localMemFence);
    //loop 1
    for(int n=0;n<p_Np;++n;inner0){
      const int element = elementList[e];
      const int gid = element*p_Nggeo;

      const datafloat Grr = ggeo[gid + p_G00ID];
      const datafloat Grs = ggeo[gid + p_G01ID];
      const datafloat Grt = ggeo[gid + p_G02ID];
      const datafloat Gss = ggeo[gid + p_G11ID];
      const datafloat Gst = ggeo[gid + p_G12ID];
      const datafloat Gtt = ggeo[gid + p_G22ID];
      const datafloat J   = ggeo[gid + p_GWJID];

      datafloat qrr = 0.;
      datafloat qrs = 0.;
      datafloat qrt = 0.;
      datafloat qsr = 0.;
      datafloat qss = 0.;
      datafloat qst = 0.;
      datafloat qtr = 0.;
      datafloat qts = 0.;
      datafloat qtt = 0.;
      datafloat qM = 0.;

      occaUnroll(p_Np)
        for (int k=0;k<p_Np;k++) {
          const datafloat qk = s_q[k];

          qrr += SrrT[n+k*p_Np]*qk;
          qrs += SrsT[n+k*p_Np]*qk;
          qrt += SrtT[n+k*p_Np]*qk;
          qsr += SsrT[n+k*p_Np]*qk;
          qss += SssT[n+k*p_Np]*qk;
          qst += SstT[n+k*p_Np]*qk;
          qtr += StrT[n+k*p_Np]*qk;
          qts += StsT[n+k*p_Np]*qk;
          qtt += SttT[n+k*p_Np]*qk;
          qM  += MM[n+k*p_Np]*qk;

        }


      const int id = n + element*p_Np;

      Aq[id] = Grr*qrr+Grs*qrs+Grt*qrt
        +Grs*qsr+Gss*qss+Gst*qst 
        +Grt*qtr+Gst*qts+Gtt*qtt 
        +J*lambda*qM;
    }
  }
}


//Ref5 = Ref4+ geofactors in shared
kernel void ellipticPartialAxTet3D_Ref5(const int Nelements,
    const int   * restrict elementList,
    const datafloat * restrict ggeo,
    const datafloat * restrict SrrT,
    const datafloat * restrict SrsT,
    const datafloat * restrict SrtT,
    const datafloat * restrict SsrT,
    const datafloat * restrict SssT,
    const datafloat * restrict SstT,
    const datafloat * restrict StrT,
    const datafloat * restrict StsT,
    const datafloat * restrict SttT,
    const datafloat * restrict MM,
    const datafloat lambda,
    const datafloat  * restrict q,
    datafloat  * restrict Aq){

  for(int e=0;e<Nelements;e++;outer0){

    shared datafloat s_q[p_Np];
    shared datafloat s_ggeo[p_Nggeo];
    const int element = elementList[e];

    for(int n=0;n<p_Np;++n;inner0){
      //prefetch q
      const int id = n + element*p_Np;
      s_q[n] = q[id];
      int m=n;
      while(m<p_Nggeo){
        //              s_ggeo[et][m] = element[et]*p_Nggeo+m;
        s_ggeo[m] = ggeo[element*p_Nggeo+m];  
        m += p_Np;
      }

    }

    barrier(localMemFence);
    //loop 1
    for(int n=0;n<p_Np;++n;inner0){
      const int element = elementList[e];
      const datafloat Grr = s_ggeo[p_G00ID];
      const datafloat Grs = s_ggeo[p_G01ID];
      const datafloat Grt = s_ggeo[p_G02ID];
      const datafloat Gss = s_ggeo[p_G11ID];
      const datafloat Gst = s_ggeo[p_G12ID];
      const datafloat Gtt = s_ggeo[p_G22ID];
      const datafloat J   = s_ggeo[p_GWJID];



      datafloat qrr = 0.;
      datafloat qrs = 0.;
      datafloat qrt = 0.;
      datafloat qsr = 0.;
      datafloat qss = 0.;
      datafloat qst = 0.;
      datafloat qtr = 0.;
      datafloat qts = 0.;
      datafloat qtt = 0.;
      datafloat qM = 0.;

      occaUnroll(p_Np)
        for (int k=0;k<p_Np;k++) {
          const datafloat qk = s_q[k];

          qrr += SrrT[n+k*p_Np]*qk;
          qrs += SrsT[n+k*p_Np]*qk;
          qrt += SrtT[n+k*p_Np]*qk;
          qsr += SsrT[n+k*p_Np]*qk;
          qss += SssT[n+k*p_Np]*qk;
          qst += SstT[n+k*p_Np]*qk;
          qtr += StrT[n+k*p_Np]*qk;
          qts += StsT[n+k*p_Np]*qk;
          qtt += SttT[n+k*p_Np]*qk;
          qM  += MM[n+k*p_Np]*qk;
        }


      const int id = n + element*p_Np;

      Aq[id] = Grr*qrr+Grs*qrs+Grt*qrt
        +Grs*qsr+Gss*qss+Gst*qst 
        +Grt*qtr+Gst*qts+Gtt*qtt 
        +J*lambda*qM;
    }
  }
}

//Ref 6: Ref5 + less memory
// assumes SrsT actually contains SrsT + SsrT
//            SrtT actually contains SrtT + StrT
//            SstT actually contains SstT + StsT



kernel void ellipticPartialAxTet3D_Ref6(const int Nelements,
    const int   * restrict elementList,
    const datafloat * restrict ggeo,
    const datafloat * restrict SrrT,
    const datafloat * restrict SrsT,
    const datafloat * restrict SrtT,
    const datafloat * restrict SsrT,
    const datafloat * restrict SssT,
    const datafloat * restrict SstT,
    const datafloat * restrict StrT,
    const datafloat * restrict StsT,
    const datafloat * restrict SttT,
    const datafloat * restrict MM,
    const datafloat lambda,
    const datafloat  * restrict q,
    datafloat  * restrict Aq){

  for(int e=0;e<Nelements;e++;outer0){

    shared datafloat s_q[p_Np];
    shared datafloat s_ggeo[p_Nggeo];
    const int element = elementList[e];

    for(int n=0;n<p_Np;++n;inner0){
      //prefetch q
      const int id = n + element*p_Np;
      s_q[n] = q[id];
      int m=n;
      while(m<p_Nggeo){
        //              s_ggeo[et][m] = element[et]*p_Nggeo+m;
        s_ggeo[m] = ggeo[element*p_Nggeo+m];  
        m += p_Np;
      }

    }

    barrier(localMemFence);
    //loop 1
    for(int n=0;n<p_Np;++n;inner0){
      const int element = elementList[e];
      const datafloat Grr = s_ggeo[p_G00ID];
      const datafloat Grs = s_ggeo[p_G01ID];
      const datafloat Grt = s_ggeo[p_G02ID];
      const datafloat Gss = s_ggeo[p_G11ID];
      const datafloat Gst = s_ggeo[p_G12ID];
      const datafloat Gtt = s_ggeo[p_G22ID];
      const datafloat J   = s_ggeo[p_GWJID];


      datafloat qrr = 0.;
      datafloat qrs = 0.;
      datafloat qrt = 0.;
      datafloat qss = 0.;
      datafloat qst = 0.;
      datafloat qtt = 0.;
      datafloat qM = 0.;

      occaUnroll(p_Np)
        for (int k=0;k<p_Np;k++) {
          const datafloat qk = s_q[k];


          qrr += SrrT[n+k*p_Np]*qk;  
          qrs += SrsT[n+k*p_Np]*qk; // assume (Srs stores Srs+Ssr)
          qrt += SrtT[n+k*p_Np]*qk; // assume (Srt stores Srt+Str)
          qss += SssT[n+k*p_Np]*qk;
          qst += SstT[n+k*p_Np]*qk; // assume (Sst stores Sst+Sts)
          qtt += SttT[n+k*p_Np]*qk;
          qM  += MM[n+k*p_Np] *qk;



        }


      const int id = n + element*p_Np;


      Aq[id] = 
        Grr*qrr+
        Grs*qrs+
        Grt*qrt+
        Gss*qss+
        Gst*qst+
        Gtt*qtt+ 
        +J*lambda*qM;   

    }
  }
}
// optimizations:
//
// 1. multiple outputs per thread 
// 2. ggeo in shared for pratical reasons
// 3. load q from shared to register once and use multiple times
// 4. assumes SrsT actually contains SrsT + SsrT
//            SrtT actually contains SrtT + StrT
//            SstT actually contains SstT + StsT

kernel void ellipticPartialAxTet3D_Ref7(const int Nelements,
    const int   * restrict elementList,
    const datafloat * restrict ggeo,
    const datafloat * restrict SrrT,
    const datafloat * restrict SrsT,
    const datafloat * restrict SrtT,
    const datafloat * restrict SsrT,
    const datafloat * restrict SssT,
    const datafloat * restrict SstT,
    const datafloat * restrict StrT,
    const datafloat * restrict StsT,
    const datafloat * restrict SttT,
    const datafloat * restrict MM,
    const datafloat lambda,
    const datafloat  * restrict q,
    datafloat  * restrict Aq){

  // number of outputs per thread 
  // important to tune this at low order
  //#define p_Ne 2

  for(int eo=0;eo<Nelements;eo+=p_Ne;outer0){

    shared datafloat s_q[p_Ne][p_Np];
    shared datafloat s_ggeo[p_Ne][p_Nggeo];

    exclusive int element[p_Ne];

    for(int n=0;n<p_Np;++n;inner0){

      occaUnroll(p_Ne)
        for(int et=0;et<p_Ne;++et){
          const int e = eo + et;
          if(e<Nelements){
            element[et] = elementList[e];

            const int id = n + element[et]*p_Np;
            s_q[et][n] = q[id];

            int m=n;
            while(m<p_Nggeo){
              //              s_ggeo[et][m] = element[et]*p_Nggeo+m;
              s_ggeo[et][m] = ggeo[element[et]*p_Nggeo+m];  
              m += p_Np;
            }
          }
        }
    }

    barrier(localMemFence);

    for(int n=0;n<p_Np;++n;inner0){

      datafloat qrr[p_Ne], qrs[p_Ne], qrt[p_Ne], qss[p_Ne], qst[p_Ne], qtt[p_Ne], qM[p_Ne];

      occaUnroll(p_Ne)
        for(int et=0;et<p_Ne;++et){
          qrr[et] = 0;    qrs[et] = 0;    qrt[et] = 0;
          qss[et] = 0;    qst[et] = 0;
          qtt[et] = 0;
          qM[et] = 0;
        }

      // overall this does p_Ne*14 flops for  (7+p_Ne)*|datafloat| L1+shared accesse
      // arithmetic intensity is  (p_Ne*14/((7+p_Ne)*8)) flops per byte
      occaUnroll(p_Np)
        for (int k=0;k<p_Np;k++) {

          const datafloat Srr_nk = SrrT[n+k*p_Np];
          const datafloat Srs_nk = SrsT[n+k*p_Np];
          const datafloat Srt_nk = SrtT[n+k*p_Np];
          const datafloat Sss_nk = SssT[n+k*p_Np];
          const datafloat Sst_nk = SstT[n+k*p_Np];
          const datafloat Stt_nk = SttT[n+k*p_Np];
          const datafloat   MM_nk =    MM[n+k*p_Np];

          occaUnroll(p_Ne)
            for(int et=0;et<p_Ne;++et){

              const datafloat qk = s_q[et][k];
              qrr[et] += Srr_nk*qk;  
              qrs[et] += Srs_nk*qk; // assume (Srs stores Srs+Ssr)
              qrt[et] += Srt_nk*qk; // assume (Srt stores Srt+Str)
              qss[et] += Sss_nk*qk;
              qst[et] += Sst_nk*qk; // assume (Sst stores Sst+Sts)
              qtt[et] += Stt_nk*qk;
              qM[et]  += MM_nk*qk;
            }
        }

      occaUnroll(p_Ne)
        for(int et=0;et<p_Ne;++et){

          const int e = eo + et;
          if(e<Nelements){

            const datafloat Grr = s_ggeo[et][p_G00ID];
            const datafloat Grs = s_ggeo[et][p_G01ID];
            const datafloat Grt = s_ggeo[et][p_G02ID];
            const datafloat Gss = s_ggeo[et][p_G11ID];
            const datafloat Gst = s_ggeo[et][p_G12ID];
            const datafloat Gtt = s_ggeo[et][p_G22ID];
            const datafloat J   = s_ggeo[et][p_GWJID];

            const int id = n + element[et]*p_Np;

            Aq[id] = 
              Grr*qrr[et]+
              Grs*qrs[et]+
              Grt*qrt[et]+
              Gss*qss[et]+
              Gst*qst[et]+
              Gtt*qtt[et]+ 
              +J*lambda*qM[et];
          }
        }
    }
  }
}

kernel void ellipticPartialAxTet3D_Ref8(const int Nelements,
    const int   * restrict elementList,
    const datafloat * restrict ggeo,
    const datafloat * restrict SrrT,
    const datafloat * restrict SrsT,
    const datafloat * restrict SrtT,
    const datafloat * restrict SsrT,
    const datafloat * restrict SssT,
    const datafloat * restrict SstT,
    const datafloat * restrict StrT,
    const datafloat * restrict StsT,
    const datafloat * restrict SttT,
    const datafloat * restrict MM,
    const datafloat lambda,
    const datafloat  * restrict q,
    datafloat  * restrict Aq){

  // number of outputs per thread 
  // important to tune this at low order
  //#define p_Ne 2

  // p_Ne nodes per thread
  // p_Nb elements worth of threads per block

  for(int eo=0;eo<Nelements;eo+=p_Ne*p_Nb;outer0){

    shared datafloat s_q[p_Ne][p_Nb][p_Np];
    shared datafloat s_ggeo[p_Ne][p_Nb][p_Nggeo];

    exclusive int element[p_Ne];

    for(int b=0;b<p_Nb;++b;inner1){
      for(int n=0;n<p_Np;++n;inner0){

        occaUnroll(p_Ne)
          for(int et=0;et<p_Ne;++et){
            const int e = eo + b + p_Nb*et;

            if(e<Nelements){
              element[et] = elementList[e];

              const int id = n + element[et]*p_Np;
              s_q[et][b][n] = q[id];

              int m=n;
              while(m<p_Nggeo){
                //		s_ggeo[et][b][m] = element[et]*p_Nggeo+m;
                s_ggeo[et][b][m] = ggeo[element[et]*p_Nggeo+m];  
                m += p_Np;
              }
            }
          }
      }
    }

    barrier(localMemFence);

    for(int b=0;b<p_Nb;++b;inner1){
      for(int n=0;n<p_Np;++n;inner0){

        datafloat qrr[p_Ne], qrs[p_Ne], qrt[p_Ne], qss[p_Ne], qst[p_Ne], qtt[p_Ne], qM[p_Ne];

        occaUnroll(p_Ne)
          for(int et=0;et<p_Ne;++et){
            qrr[et] = 0;    qrs[et] = 0;    qrt[et] = 0;
            qss[et] = 0;    qst[et] = 0;
            qtt[et] = 0;
            qM[et] = 0;
          }

        // overall this does p_Ne*14 flops for  (7+p_Ne)*|datafloat| L1+shared accesse
        // arithmetic intensity is  (p_Ne*14/((7+p_Ne)*8)) flops per byte
        occaUnroll(p_Np)
          for (int k=0;k<p_Np;k++) {

            const datafloat Srr_nk = SrrT[n+k*p_Np];
            const datafloat Srs_nk = SrsT[n+k*p_Np];
            const datafloat Srt_nk = SrtT[n+k*p_Np];
            const datafloat Sss_nk = SssT[n+k*p_Np];
            const datafloat Sst_nk = SstT[n+k*p_Np];
            const datafloat Stt_nk = SttT[n+k*p_Np];
            const datafloat   MM_nk =    MM[n+k*p_Np];

            occaUnroll(p_Ne)
              for(int et=0;et<p_Ne;++et){

                const datafloat qk = s_q[et][b][k];
                qrr[et] += Srr_nk*qk;  
                qrs[et] += Srs_nk*qk; // assume (Srs stores Srs+Ssr)
                qrt[et] += Srt_nk*qk; // assume (Srt stores Srt+Str)
                qss[et] += Sss_nk*qk;
                qst[et] += Sst_nk*qk; // assume (Sst stores Sst+Sts)
                qtt[et] += Stt_nk*qk;
                qM[et]  += MM_nk*qk;
              }
          }

        occaUnroll(p_Ne)
          for(int et=0;et<p_Ne;++et){

            const int e = eo + b + p_Nb*et;
            if(e<Nelements){

              const datafloat Grr = s_ggeo[et][b][p_G00ID];
              const datafloat Grs = s_ggeo[et][b][p_G01ID];
              const datafloat Grt = s_ggeo[et][b][p_G02ID];
              const datafloat Gss = s_ggeo[et][b][p_G11ID];
              const datafloat Gst = s_ggeo[et][b][p_G12ID];
              const datafloat Gtt = s_ggeo[et][b][p_G22ID];
              const datafloat J   = s_ggeo[et][b][p_GWJID];

              const int id = n + element[et]*p_Np;

              Aq[id] = 
                Grr*qrr[et]+
                Grs*qrs[et]+
                Grt*qrt[et]+
                Gss*qss[et]+
                Gst*qst[et]+
                Gtt*qtt[et]+ 
                +J*lambda*qM[et];
            }
          }
      }
    }
  }
}
//geofactors in shared but loaded more efficiently

//#define elementOffset 0

kernel void ellipticPartialAxTet3D_Ref9(const int Nelements,
    const int elementOffset,
    const datafloat * restrict ggeo,
    const datafloat * restrict SrrT,
    const datafloat * restrict SrsT,
    const datafloat * restrict SrtT,
    const datafloat * restrict SsrT,
    const datafloat * restrict SssT,
    const datafloat * restrict SstT,
    const datafloat * restrict StrT,
    const datafloat * restrict StsT,
    const datafloat * restrict SttT,
    const datafloat * restrict MM,
    const datafloat lambda,
    const datafloat  * restrict q,
    datafloat  * restrict Aq){

  // number of outputs per thread 
  // important to tune this at low order
  //#define p_Ne 2

  // p_Ne nodes per thread
  // p_Nb elements worth of threads per block

  for(int eo=0;eo<Nelements;eo+=p_Ne*p_Nb;outer0){

    shared datafloat s_q[p_Ne][p_Nb][p_Np];
    shared datafloat s_ggeo[p_Ne][p_Nb][p_Nggeo];
    //exclusive int element[p_Ne];
    for(int b=0;b<p_Nb;++b;inner1){
      for(int n=0;n<p_Np;++n;inner0){

        occaUnroll(p_Ne)
          for(int et=0;et<p_Ne;++et){
            const int ebase = eo + b + p_Nb*et;
            const int e = elementOffset + ebase; 

            if(ebase<Nelements){
              //        element[et] = elementList[e];

              int id = n + e*p_Np;
              s_q[et][b][n] = q[id];

              int m = n + b*p_Nb;
              id = eo*p_Nggeo + m;
              while(m<p_Nggeo*p_Ne*p_Nb && id<Nelements*p_Nggeo){
                s_ggeo[0][0][m] = ggeo[id];
                id += p_Np*p_Nb;
                m += p_Np*p_Nb;
              }
            }
          }
      }
    }

    barrier(localMemFence);

    for(int b=0;b<p_Nb;++b;inner1){
      for(int n=0;n<p_Np;++n;inner0){

        datafloat qrr[p_Ne], qrs[p_Ne], qrt[p_Ne], qss[p_Ne], qst[p_Ne], qtt[p_Ne], qM[p_Ne];

        occaUnroll(p_Ne)
          for(int et=0;et<p_Ne;++et){
            qrr[et] = 0;    qrs[et] = 0;    qrt[et] = 0;
            qss[et] = 0;    qst[et] = 0;
            qtt[et] = 0;
            qM[et] = 0;
          }

        // overall this does p_Ne*14 flops for  (7+p_Ne)*|datafloat| L1+shared accesse
        // arithmetic intensity is  (p_Ne*14/((7+p_Ne)*8)) flops per byte
        occaUnroll(p_Np)
          for (int k=0;k<p_Np;k++) {

            const datafloat Srr_nk = SrrT[n+k*p_Np];
            const datafloat Srs_nk = SrsT[n+k*p_Np];
            const datafloat Srt_nk = SrtT[n+k*p_Np];
            const datafloat Sss_nk = SssT[n+k*p_Np];
            const datafloat Sst_nk = SstT[n+k*p_Np];
            const datafloat Stt_nk = SttT[n+k*p_Np];
            const datafloat   MM_nk =    MM[n+k*p_Np];

            occaUnroll(p_Ne)
              for(int et=0;et<p_Ne;++et){

                const datafloat qk = s_q[et][b][k];
                qrr[et] += Srr_nk*qk;  
                qrs[et] += Srs_nk*qk; // assume (Srs stores Srs+Ssr)
                qrt[et] += Srt_nk*qk; // assume (Srt stores Srt+Str)
                qss[et] += Sss_nk*qk;
                qst[et] += Sst_nk*qk; // assume (Sst stores Sst+Sts)
                qtt[et] += Stt_nk*qk;
                qM[et]  += MM_nk*qk;
              }
          }

        occaUnroll(p_Ne)
          for(int et=0;et<p_Ne;++et){
            const int ebase = eo + b + p_Nb*et;
            const int e = elementOffset + ebase;
            if(ebase<Nelements){
              const datafloat Grr = s_ggeo[et][b][p_G00ID];
              const datafloat Grs = s_ggeo[et][b][p_G01ID];
              const datafloat Grt = s_ggeo[et][b][p_G02ID];
              const datafloat Gss = s_ggeo[et][b][p_G11ID];
              const datafloat Gst = s_ggeo[et][b][p_G12ID];
              const datafloat Gtt = s_ggeo[et][b][p_G22ID];
              const datafloat J   = s_ggeo[et][b][p_GWJID];

              const int id = n + e*p_Np;


              Aq[id] = 
                Grr*qrr[et]+
                Grs*qrs[et]+
                Grt*qrt[et]+
                Gss*qss[et]+
                Gst*qst[et]+
                Gtt*qtt[et]+ 
                +J*lambda*qM[et];
            }
          }
      }
    }
  }
}
// geofactors in REGISTERS + elementOffset instead of element list



kernel void ellipticPartialAxTet3D_Ref10(const int Nelements,
    const int elementOffset,
    const datafloat * restrict ggeo,
    const datafloat * restrict SrrT,
    const datafloat * restrict SrsT,
    const datafloat * restrict SrtT,
    const datafloat * restrict SsrT,
    const datafloat * restrict SssT,
    const datafloat * restrict SstT,
    const datafloat * restrict StrT,
    const datafloat * restrict StsT,
    const datafloat * restrict SttT,
    const datafloat * restrict MM,
    const datafloat lambda,
    const datafloat  * restrict q,
    datafloat  * restrict Aq){

  // number of outputs per thread 
  // important to tune this at low order
  //#define p_Ne 2

  // p_Ne nodes per thread
  // p_Nb elements worth of threads per block

  for(int eo=0;eo<Nelements;eo+=p_Ne*p_Nb;outer0){

    shared datafloat s_q[p_Ne][p_Nb][p_Np];

    //exclusive int element[p_Ne];

    for(int b=0;b<p_Nb;++b;inner1){
      for(int n=0;n<p_Np;++n;inner0){

        occaUnroll(p_Ne)
          for(int et=0;et<p_Ne;++et){
            const int ebase = eo + b + p_Nb*et;            
            const int e = elementOffset + ebase;

            if(ebase<Nelements){
              //        element[et] = elementList[e];

              const int id = n + e*p_Np;
              s_q[et][b][n] = q[id];

            }
          }
      }
    }

    barrier(localMemFence);

    for(int b=0;b<p_Nb;++b;inner1){
      for(int n=0;n<p_Np;++n;inner0){

        datafloat qrr[p_Ne], qrs[p_Ne], qrt[p_Ne], qss[p_Ne], qst[p_Ne], qtt[p_Ne], qM[p_Ne];

        occaUnroll(p_Ne)
          for(int et=0;et<p_Ne;++et){
            qrr[et] = 0;    qrs[et] = 0;    qrt[et] = 0;
            qss[et] = 0;    qst[et] = 0;
            qtt[et] = 0;
            qM[et] = 0;
          }

        // overall this does p_Ne*14 flops for  (7+p_Ne)*|datafloat| L1+shared accesse
        // arithmetic intensity is  (p_Ne*14/((7+p_Ne)*8)) flops per byte
        occaUnroll(p_Np)
          for (int k=0;k<p_Np;k++) {

            const datafloat Srr_nk = SrrT[n+k*p_Np];
            const datafloat Srs_nk = SrsT[n+k*p_Np];
            const datafloat Srt_nk = SrtT[n+k*p_Np];
            const datafloat Sss_nk = SssT[n+k*p_Np];
            const datafloat Sst_nk = SstT[n+k*p_Np];
            const datafloat Stt_nk = SttT[n+k*p_Np];
            const datafloat   MM_nk =    MM[n+k*p_Np];

            occaUnroll(p_Ne)
              for(int et=0;et<p_Ne;++et){

                const datafloat qk = s_q[et][b][k];
                qrr[et] += Srr_nk*qk;  
                qrs[et] += Srs_nk*qk; // assume (Srs stores Srs+Ssr)
                qrt[et] += Srt_nk*qk; // assume (Srt stores Srt+Str)
                qss[et] += Sss_nk*qk;
                qst[et] += Sst_nk*qk; // assume (Sst stores Sst+Sts)
                qtt[et] += Stt_nk*qk;
                qM[et]  += MM_nk*qk;
              }
          }

        occaUnroll(p_Ne)
          for(int et=0;et<p_Ne;++et){
            const int ebase = eo + b + p_Nb*et;
            const int e = elementOffset + ebase;
            if(ebase<Nelements){


              int gid = e*p_Nggeo;

              datafloat Grr = ggeo[gid + p_G00ID];
              datafloat Grs = ggeo[gid + p_G01ID];
              datafloat Grt = ggeo[gid + p_G02ID];
              datafloat Gss = ggeo[gid + p_G11ID];
              datafloat Gst = ggeo[gid + p_G12ID];
              datafloat Gtt = ggeo[gid + p_G22ID];
              datafloat J   = ggeo[gid + p_GWJID];

              const int id = n + e*p_Np;

              Aq[id] = 
                Grr*qrr[et]+
                Grs*qrs[et]+
                Grt*qrt[et]+
                Gss*qss[et]+
                Gst*qst[et]+
                Gtt*qtt[et]+ 
                +J*lambda*qM[et];
            }
          }
      }
    }
  }
}

