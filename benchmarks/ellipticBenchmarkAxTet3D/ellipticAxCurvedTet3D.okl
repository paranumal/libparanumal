/*

The MIT License (MIT)

Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/


void ellipticPartialAxCurvedTet3D_Ref0(const int Nelements,
				       const int       * restrict elementList,
				       const datafloat * restrict ggeo,
				       const datafloat * restrict cDr,
				       const datafloat * restrict cDs,
				       const datafloat * restrict cDt,
				       const datafloat * restrict cI,
				       const datafloat * restrict cDrT,
				       const datafloat * restrict cDsT,
				       const datafloat * restrict cDtT,
				       const datafloat * restrict cIT,
				       const datafloat lambda,
				       const datafloat  * restrict q,
				       datafloat  * restrict tmp,
				       datafloat  * restrict Aq){

  for(int e=0;e<Nelements;e++;outer0){

    shared datafloat s_q[p_cubNp], s_Gq[p_cubNp];

    exclusive datafloat r_cGqs, r_cGqt, r_cq, r_Aq;
    
    for(int n=0;n<p_cubNp;++n;inner0){
      int element = elementList[e];
      if(n<p_Np)
	s_q[n] = q[n+element*p_Np];
    }

    barrier(localMemFence);

    //loop 1
    for(int n=0;n<p_cubNp;++n;inner0){
      int element = elementList[e];
      int gid = element*p_Nggeo*p_cubNp + n;

      datafloat Grr = ggeo[gid + p_G00ID*p_cubNp];
      datafloat Grs = ggeo[gid + p_G01ID*p_cubNp];
      datafloat Grt = ggeo[gid + p_G02ID*p_cubNp];
      datafloat Gss = ggeo[gid + p_G11ID*p_cubNp];
      datafloat Gst = ggeo[gid + p_G12ID*p_cubNp];
      datafloat Gtt = ggeo[gid + p_G22ID*p_cubNp];
      datafloat J   = ggeo[gid + p_GWJID*p_cubNp];

      datafloat cqr  = 0, cqs = 0, cqt = 0, cq = 0;

      // 5 L1+shared loads per 8 flops (13.4*8/(5*8) TFLOPS)
      occaUnroll(p_Np)
	for (int k=0;k<p_Np;k++) {
	  const dfloat qk = s_q[k];
	  const int id = n+k*p_cubNp;
	  cqr += cDrT[id]*qk;
	  cqs += cDsT[id]*qk;
	  cqt += cDtT[id]*qk;
	  cq  += cIT[id]*qk;
	}
      
      // assume includes Jacobian
      s_Gq[n] = Grr*cqr + Grs*cqs + Grt*cqt;

      r_cGqs = Grs*cqr + Gss*cqs + Gst*cqt;
      r_cGqt = Grt*cqr + Gst*cqs + Gtt*cqt;
      r_cq = lambda*J*cq;
      r_Aq = 0;
    }

    barrier(localMemFence);

    for(int k=0;k<p_cubNp;++k;inner0){
      if(k<p_Np){
	dfloat res = 0;
	
	occaUnroll(p_cubNp)
	  for (int n=0;n<p_cubNp;n++) {
	    const int id = n+k*p_cubNp;
	    res += cDrT[id]*s_Gq[n];
	  }

	r_Aq = res;
      }

      // reload
      s_q[k] = r_cGqs;
    }
    
    barrier(localMemFence);
    
    for(int k=0;k<p_cubNp;++k;inner0){
      if(k<p_Np){
	dfloat res = 0;
	
	occaUnroll(p_cubNp)
	  for (int n=0;n<p_cubNp;n++) {
	    const int id = n+k*p_cubNp;
	    res += cDsT[id]*s_q[n];
	  }
	
	r_Aq += res;
      }
      
      s_Gq[k] = r_cGqt;
    }

    barrier(localMemFence);
    
    for(int k=0;k<p_cubNp;++k;inner0){
      if(k<p_Np){
	dfloat res = 0;
	
	occaUnroll(p_cubNp)
	  for (int n=0;n<p_cubNp;n++) {
	    const int id = n+k*p_cubNp;
	    res += cDtT[id]*s_Gq[n];
	  }
	
	r_Aq += res;
      }
      s_q[k] = r_cq;
    }

    barrier(localMemFence);
    
    for(int k=0;k<p_cubNp;++k;inner0){
      if(k<p_Np){
	dfloat res = 0;
	
	occaUnroll(p_cubNp)
	  for (int n=0;n<p_cubNp;n++) {
	    const int id = n+k*p_cubNp;
	    res += cIT[id]*s_q[n];
	  }
	
	r_Aq += res;

	int element = elementList[e];	
	const int id = k + element*p_Np;
	Aq[id] = r_Aq;
      }
    }
  }
}



// (p_Ne) multiple outputs per thread
void ellipticPartialAxCurvedTet3D_Ref1(const int Nelements,
				       const int       * restrict elementList,
				       const datafloat * restrict ggeo,
				       const datafloat * restrict cDr,
				       const datafloat * restrict cDs,
				       const datafloat * restrict cDt,
				       const datafloat * restrict cI,
				       const datafloat * restrict cDrT,
				       const datafloat * restrict cDsT,
				       const datafloat * restrict cDtT,
				       const datafloat * restrict cIT,
				       const datafloat lambda,
				       const datafloat  * restrict q,
				       datafloat  * restrict tmp,
				       datafloat  * restrict Aq){

#define elementOffset 0
  
  for(int eo=0;eo<Nelements;eo+=p_Ne;outer0){
    shared datafloat s_q[p_Ne][p_Np];
    shared datafloat s_qr[p_Ne][p_cubNp], s_qs[p_Ne][p_cubNp], s_qt[p_Ne][p_cubNp], s_cq[p_Ne][p_cubNp];
    
    exclusive datafloat r_Aq[p_Ne];

    for(int n=0;n<p_Np;++n;inner0){

      occaUnroll(p_Ne)
	for(int es=0;es<p_Ne;++es){
	  int e = eo+es;
	  if(e<Nelements){
	    int element = e + elementOffset ; // elementList[e];
	    s_q[es][n] = q[n+element*p_Np];
	  }
	}
    }
    
    barrier(localMemFence);
    
    for(int t=0;t<p_Np;++t;inner0){

      occaUnroll() //hard coded
	for(int n=t;n<p_cubNp;n+=p_Np){
	  
	  datafloat cqr[p_Ne], cqs[p_Ne], cqt[p_Ne], cq[p_Ne];
	  
	  occaUnroll(p_Ne)
	    for(int es=0;es<p_Ne;++es){
	      cqr[es] = 0;
	      cqs[es] = 0;
	      cqt[es] = 0;
	      cq[es] = 0;
	    }
	  
	  // 5 L1+shared loads per 8 flops (13.4*8/(5*8) TFLOPS)
	  occaUnroll(p_Np)
	    for (int k=0;k<p_Np;k++) {
	      const int id = n+k*p_cubNp;
	      
	      const dfloat cDr_nk = cDrT[id];
	      const dfloat cDs_nk = cDsT[id];
	      const dfloat cDt_nk = cDtT[id];
	      const dfloat cI_nk = cIT[id];
	      
	      occaUnroll(p_Ne)
		for(int es=0;es<p_Ne;++es){
		  const dfloat qk = s_q[es][k];
		  
		  /// 8 flops per 1 shared
		  cqr[es] += cDr_nk*qk;
		  cqs[es] += cDs_nk*qk;
		  cqt[es] += cDt_nk*qk;
		  cq[es]  += cI_nk*qk;
		}
	    }
	  
	  occaUnroll(p_Ne)
	    for(int es=0;es<p_Ne;++es){
	      const int e = eo+es;
	      if(e<Nelements){
		const int element = e + elementOffset; // elementList[e];	      
		
		const int gid = element*p_Nggeo*p_cubNp + n;
		
		const datafloat Grr = ggeo[gid + p_G00ID*p_cubNp];
		const datafloat Grs = ggeo[gid + p_G01ID*p_cubNp];
		const datafloat Grt = ggeo[gid + p_G02ID*p_cubNp];
		const datafloat Gss = ggeo[gid + p_G11ID*p_cubNp];
		const datafloat Gst = ggeo[gid + p_G12ID*p_cubNp];
		const datafloat Gtt = ggeo[gid + p_G22ID*p_cubNp];
		const datafloat J   = ggeo[gid + p_GWJID*p_cubNp];
		
		// assume includes Jacobian
		s_qr[es][n] = Grr*cqr[es] + Grs*cqs[es] + Grt*cqt[es];
		s_qs[es][n] = Grs*cqr[es] + Gss*cqs[es] + Gst*cqt[es];
		s_qt[es][n] = Grt*cqr[es] + Gst*cqs[es] + Gtt*cqt[es];
		s_cq[es][n] = lambda*J*cq[es];
	      }
	    }
	}
      
      occaUnroll(p_Ne)
	for(int es=0;es<p_Ne;++es){
	  r_Aq[es] = 0;
	}
    }
    
    barrier(localMemFence);

    for(int k=0;k<p_Np;++k;inner0){

      occaUnroll(p_cubNp)
	for (int n=0;n<p_cubNp;n++) {
	  const int id = k+n*p_Np;
	  
	  const dfloat cDr_nk = cDr[id];
	  const dfloat cDs_nk = cDs[id];
	  const dfloat cDt_nk = cDt[id];
	  const dfloat cI_nk = cI[id];
	  
	  occaUnroll(p_Ne)
	    for(int es=0;es<p_Ne;++es){
	      r_Aq[es] += cDr_nk*s_qr[es][n];
	      r_Aq[es] += cDs_nk*s_qs[es][n];
	      r_Aq[es] += cDt_nk*s_qt[es][n];
	      r_Aq[es] += cI_nk*s_cq[es][n];
	    }
	}
    
      occaUnroll(p_Ne)
	for(int es=0;es<p_Ne;++es){
	  const int e = es + eo;
	  if(e<Nelements){
	    int element = e + elementOffset; // elementList[e];	
	    const int id = k + element*p_Np;
	    Aq[id] = r_Aq[es];
	  }
	}
    }
  }
}


// do not preload q into shared
void ellipticPartialAxCurvedTet3D_Ref2(const int Nelements,
				       const int       * restrict elementList,
				       const datafloat * restrict ggeo,
				       const datafloat * restrict cDr,
				       const datafloat * restrict cDs,
				       const datafloat * restrict cDt,
				       const datafloat * restrict cI,
				       const datafloat * restrict cDrT,
				       const datafloat * restrict cDsT,
				       const datafloat * restrict cDtT,
				       const datafloat * restrict cIT,
				       const datafloat lambda,
				       const datafloat  * restrict q,
				       datafloat  * restrict tmp,
				       datafloat  * restrict Aq){

#define elementOffset 0
  
  for(int eo=0;eo<Nelements;eo+=p_Ne;outer0){

    shared datafloat s_qr[p_Ne][p_cubNp], s_qs[p_Ne][p_cubNp], s_qt[p_Ne][p_cubNp], s_cq[p_Ne][p_cubNp];
    
    exclusive datafloat r_Aq[p_Ne];

    for(int t=0;t<p_Np;++t;inner0){

      occaUnroll() //hard coded
	for(int n=t;n<p_cubNp;n+=p_Np){
	  
	  datafloat cqr[p_Ne], cqs[p_Ne], cqt[p_Ne], cq[p_Ne];
	  
	  occaUnroll(p_Ne)
	    for(int es=0;es<p_Ne;++es){
	      cqr[es] = 0;
	      cqs[es] = 0;
	      cqt[es] = 0;
	      cq[es] = 0;
	    }
	  
	  // 5 L1+shared loads per 8 flops (13.4*8/(5*8) TFLOPS)
	  occaUnroll(p_Np)
	    for (int k=0;k<p_Np;k++) {
	      const int id = n+k*p_cubNp;
	      
	      const dfloat cDr_nk = cDrT[id];
	      const dfloat cDs_nk = cDsT[id];
	      const dfloat cDt_nk = cDtT[id];
	      const dfloat cI_nk = cIT[id];
	      
	      occaUnroll(p_Ne)
		for(int es=0;es<p_Ne;++es){
		  // do not prefetch
		  int e = eo+es;
		  int element = e + elementOffset ; 
		  const dfloat qk = (element<Nelements) ? q[k+element*p_Np] : 0;
		  
		  /// 8 flops per 1 shared
		  cqr[es] += cDr_nk*qk;
		  cqs[es] += cDs_nk*qk;
		  cqt[es] += cDt_nk*qk;
		  cq[es]  += cI_nk*qk;
		}
	    }
	  
	  occaUnroll(p_Ne)
	    for(int es=0;es<p_Ne;++es){
	      const int e = eo+es;
	      if(e<Nelements){
		const int element = e + elementOffset; // elementList[e];	      
		
		const int gid = element*p_Nggeo*p_cubNp + n;
		
		const datafloat Grr = ggeo[gid + p_G00ID*p_cubNp];
		const datafloat Grs = ggeo[gid + p_G01ID*p_cubNp];
		const datafloat Grt = ggeo[gid + p_G02ID*p_cubNp];
		const datafloat Gss = ggeo[gid + p_G11ID*p_cubNp];
		const datafloat Gst = ggeo[gid + p_G12ID*p_cubNp];
		const datafloat Gtt = ggeo[gid + p_G22ID*p_cubNp];
		const datafloat J   = ggeo[gid + p_GWJID*p_cubNp];
		
		// assume includes Jacobian
		s_qr[es][n] = Grr*cqr[es] + Grs*cqs[es] + Grt*cqt[es];
		s_qs[es][n] = Grs*cqr[es] + Gss*cqs[es] + Gst*cqt[es];
		s_qt[es][n] = Grt*cqr[es] + Gst*cqs[es] + Gtt*cqt[es];
		s_cq[es][n] = lambda*J*cq[es];
	      }
	    }
	}
      
      occaUnroll(p_Ne)
	for(int es=0;es<p_Ne;++es){
	  r_Aq[es] = 0;
	}
    }
    
    barrier(localMemFence);

    for(int k=0;k<p_Np;++k;inner0){

      occaUnroll(p_cubNp)
	for (int n=0;n<p_cubNp;n++) {
	  const int id = k+n*p_Np;
	  
	  const dfloat cDr_nk = cDr[id];
	  const dfloat cDs_nk = cDs[id];
	  const dfloat cDt_nk = cDt[id];
	  const dfloat cI_nk = cI[id];
	  
	  occaUnroll(p_Ne)
	    for(int es=0;es<p_Ne;++es){
	      r_Aq[es] += cDr_nk*s_qr[es][n];
	      r_Aq[es] += cDs_nk*s_qs[es][n];
	      r_Aq[es] += cDt_nk*s_qt[es][n];
	      r_Aq[es] += cI_nk*s_cq[es][n];
	    }
	}
    
      occaUnroll(p_Ne)
	for(int es=0;es<p_Ne;++es){
	  const int e = es + eo;
	  if(e<Nelements){
	    int element = e + elementOffset; // elementList[e];	
	    const int id = k + element*p_Np;
	    Aq[id] = r_Aq[es];
	  }
	}
    }
  }
}




// remove multiple outputs
void ellipticPartialAxCurvedTet3D_Ref3(const int Nelements,
				       const int       * restrict elementList,
				       const datafloat * restrict ggeo,
				       const datafloat * restrict cDr,
				       const datafloat * restrict cDs,
				       const datafloat * restrict cDt,
				       const datafloat * restrict cI,
				       const datafloat * restrict cDrT,
				       const datafloat * restrict cDsT,
				       const datafloat * restrict cDtT,
				       const datafloat * restrict cIT,
				       const datafloat lambda,
				       const datafloat  * restrict q,
				       datafloat  * restrict tmp,
				       datafloat  * restrict Aq){

#define elementOffset 0
  
  for(int eo=0;eo<Nelements;++eo;outer0){
    
    shared datafloat s_qr[p_cubNp], s_qs[p_cubNp], s_qt[p_cubNp], s_cq[p_cubNp];
    
    for(int t=0;t<p_Np;++t;inner0){

      const int element = eo+elementOffset;
      
      occaUnroll() //hard coded
	for(int n=t;n<p_cubNp;n+=p_Np){

	  datafloat cqr = 0, cqs = 0, cqt = 0, cq =0;
	  
	  // 6 L1+shared loads per 8 flops (13.4*8/(6*8) TFLOPS)
	  occaUnroll(p_Np)
	    for (int k=0;k<p_Np;k++) {
	      const int id = n+k*p_cubNp;
	      
	      const dfloat cDr_nk = cDrT[id];
	      const dfloat cDs_nk = cDsT[id];
	      const dfloat cDt_nk = cDtT[id];
	      const dfloat cI_nk = cIT[id];
	      
	      // do not prefetch
	      const dfloat qk = q[k+element*p_Np];
	      
	      /// 8 flops per 1 shared
	      cqr += cDr_nk*qk;
	      cqs += cDs_nk*qk;
	      cqt += cDt_nk*qk;
	      cq  += cI_nk*qk;
	    }


	  const int gid = element*p_Nggeo*p_cubNp + n;
	  
	  const datafloat Grr = ggeo[gid + p_G00ID*p_cubNp];
	  const datafloat Grs = ggeo[gid + p_G01ID*p_cubNp];
	  const datafloat Grt = ggeo[gid + p_G02ID*p_cubNp];
	  const datafloat Gss = ggeo[gid + p_G11ID*p_cubNp];
	  const datafloat Gst = ggeo[gid + p_G12ID*p_cubNp];
	  const datafloat Gtt = ggeo[gid + p_G22ID*p_cubNp];
	  const datafloat J   = ggeo[gid + p_GWJID*p_cubNp];
	  
	  // assume includes Jacobian
	  s_qr[n] = Grr*cqr + Grs*cqs + Grt*cqt;
	  s_qs[n] = Grs*cqr + Gss*cqs + Gst*cqt;
	  s_qt[n] = Grt*cqr + Gst*cqs + Gtt*cqt;
	  s_cq[n] = lambda*J*cq;
	}
    }
      
    barrier(localMemFence);

    for(int k=0;k<p_Np;++k;inner0){

      dfloat r_Aq = 0;
      
      occaUnroll(p_cubNp)
	for (int n=0;n<p_cubNp;n++) {
	  const int id = k+n*p_Np;
	  
	  const dfloat cDr_nk = cDr[id];
	  const dfloat cDs_nk = cDs[id];
	  const dfloat cDt_nk = cDt[id];
	  const dfloat cI_nk = cI[id];
	  
	  r_Aq += cDr_nk*s_qr[n];
	  r_Aq += cDs_nk*s_qs[n];
	  r_Aq += cDt_nk*s_qt[n];
	  r_Aq += cI_nk*s_cq[n];
	}
      
      int element = eo + elementOffset;
      const int id = k + element*p_Np;
      Aq[id] = r_Aq;
    }
  }
}




// add simd cramming
void ellipticPartialAxCurvedTet3D_Ref4(const int Nelements,
				       const int       * restrict elementList,
				       const datafloat * restrict ggeo,
				       const datafloat * restrict cDr,
				       const datafloat * restrict cDs,
				       const datafloat * restrict cDt,
				       const datafloat * restrict cI,
				       const datafloat * restrict cDrT,
				       const datafloat * restrict cDsT,
				       const datafloat * restrict cDtT,
				       const datafloat * restrict cIT,
				       const datafloat lambda,
				       const datafloat  * restrict q,
				       datafloat  * restrict tmp,
				       datafloat  * restrict Aq){

#define elementOffset 0
  
  for(int eo=0;eo<Nelements;eo+=p_Nb;outer0){
    
    shared datafloat s_qr[p_Nb][p_cubNp], s_qs[p_Nb][p_cubNp], s_qt[p_Nb][p_cubNp], s_cq[p_Nb][p_cubNp];

    for(int eb=0;eb<p_Nb;++eb;inner1){
      for(int t=0;t<p_Np;++t;inner0){

	const int element = eo+eb+elementOffset;

	if(eo+eb<Nelements){

	  occaUnroll() //hard coded
	    for(int n=t;n<p_cubNp;n+=p_Np){
	      
	      datafloat cqr = 0, cqs = 0, cqt = 0, cq =0;
	      
	      // 6 L1+shared loads per 8 flops (13.4*8/(6*8) TFLOPS)
	      occaUnroll(p_Np)
		for (int k=0;k<p_Np;k++) {
		  const int id = n+k*p_cubNp;
		  
		  const dfloat cDr_nk = cDrT[id];
		  const dfloat cDs_nk = cDsT[id];
		  const dfloat cDt_nk = cDtT[id];
		  const dfloat cI_nk = cIT[id];
		  
		  // do not prefetch
		  const dfloat qk = q[k+element*p_Np];
		  
		  /// 8 flops per 1 shared
		  cqr += cDr_nk*qk;
		  cqs += cDs_nk*qk;
		  cqt += cDt_nk*qk;
		  cq  += cI_nk*qk;
		}
	      
	      
	      const int gid = element*p_Nggeo*p_cubNp + n;
	      
	      const datafloat Grr = ggeo[gid + p_G00ID*p_cubNp];
	      const datafloat Grs = ggeo[gid + p_G01ID*p_cubNp];
	      const datafloat Grt = ggeo[gid + p_G02ID*p_cubNp];
	      const datafloat Gss = ggeo[gid + p_G11ID*p_cubNp];
	      const datafloat Gst = ggeo[gid + p_G12ID*p_cubNp];
	      const datafloat Gtt = ggeo[gid + p_G22ID*p_cubNp];
	      const datafloat J   = ggeo[gid + p_GWJID*p_cubNp];
	      
	      // assume includes Jacobian
	      s_qr[eb][n] = Grr*cqr + Grs*cqs + Grt*cqt;
	      s_qs[eb][n] = Grs*cqr + Gss*cqs + Gst*cqt;
	      s_qt[eb][n] = Grt*cqr + Gst*cqs + Gtt*cqt;
	      s_cq[eb][n] = lambda*J*cq;
	    }
	}
      }
    }
    
    barrier(localMemFence);

    for(int eb=0;eb<p_Nb;++eb;inner1){
      for(int k=0;k<p_Np;++k;inner0){
	
	dfloat r_Aq = 0;
	
	occaUnroll(p_cubNp)
	  for (int n=0;n<p_cubNp;n++) {
	    const int id = k+n*p_Np;
	  
	    const dfloat cDr_nk = cDr[id];
	    const dfloat cDs_nk = cDs[id];
	    const dfloat cDt_nk = cDt[id];
	    const dfloat cI_nk = cI[id];
	    
	    r_Aq += cDr_nk*s_qr[eb][n];
	    r_Aq += cDs_nk*s_qs[eb][n];
	    r_Aq += cDt_nk*s_qt[eb][n];
	    r_Aq += cI_nk*s_cq[eb][n];
	  }
	
	int element = eo + eb +  elementOffset;
	if(eo+eb<Nelements){
	  const int id = k + element*p_Np;
	  Aq[id] = r_Aq;
	}
      }
    }
  }
}




// use temporaries
void ellipticPartialAxCurvedTet3D_Ref5(const int Nelements,
				       const int       * restrict elementList,
				       const datafloat * restrict ggeo,
				       const datafloat * restrict cDr,
				       const datafloat * restrict cDs,
				       const datafloat * restrict cDt,
				       const datafloat * restrict cI,
				       const datafloat * restrict cDrT,
				       const datafloat * restrict cDsT,
				       const datafloat * restrict cDtT,
				       const datafloat * restrict cIT,
				       const datafloat lambda,
				       const datafloat  * restrict q,
				       datafloat  * restrict tmp,
				       datafloat  * restrict Aq){

#define elementOffset 0
  
  for(int eo=0;eo<Nelements;eo+=p_Nb;outer0){
    
    for(int eb=0;eb<p_Nb;++eb;inner1){
      for(int t=0;t<p_Np;++t;inner0){

	const int element = eo+eb+elementOffset;

	if(eo+eb<Nelements){

	  occaUnroll() //hard coded
	    for(int n=t;n<p_cubNp;n+=p_Np){
	      
	      datafloat cqr = 0, cqs = 0, cqt = 0, cq =0;
	      
	      // 6 L1+shared loads per 8 flops (13.4*8/(6*8) TFLOPS)
	      occaUnroll(p_Np)
		for (int k=0;k<p_Np;k++) {
		  const int id = n+k*p_cubNp;
		  
		  const dfloat cDr_nk = cDrT[id];
		  const dfloat cDs_nk = cDsT[id];
		  const dfloat cDt_nk = cDtT[id];
		  const dfloat cI_nk = cIT[id];
		  
		  // do not prefetch
		  const dfloat qk = q[k+element*p_Np];
		  
		  /// 8 flops per 1 shared
		  cqr += cDr_nk*qk;
		  cqs += cDs_nk*qk;
		  cqt += cDt_nk*qk;
		  cq  += cI_nk*qk;
		}
	      
	      
	      const int gid = element*p_Nggeo*p_cubNp + n;
	      
	      const datafloat Grr = ggeo[gid + p_G00ID*p_cubNp];
	      const datafloat Grs = ggeo[gid + p_G01ID*p_cubNp];
	      const datafloat Grt = ggeo[gid + p_G02ID*p_cubNp];
	      const datafloat Gss = ggeo[gid + p_G11ID*p_cubNp];
	      const datafloat Gst = ggeo[gid + p_G12ID*p_cubNp];
	      const datafloat Gtt = ggeo[gid + p_G22ID*p_cubNp];
	      const datafloat J   = ggeo[gid + p_GWJID*p_cubNp];
	      
	      // assume includes Jacobian
	      int base = element*p_cubNp*4 + n;
	      tmp[base+0*p_cubNp] = Grr*cqr + Grs*cqs + Grt*cqt;
	      tmp[base+1*p_cubNp] = Grs*cqr + Gss*cqs + Gst*cqt;
	      tmp[base+2*p_cubNp] = Grt*cqr + Gst*cqs + Gtt*cqt;
	      tmp[base+3*p_cubNp] = lambda*J*cq;
	    }
	}
      }
    }
    
    barrier(globalMemFence);

    for(int eb=0;eb<p_Nb;++eb;inner1){
      for(int k=0;k<p_Np;++k;inner0){

	int element = eo + eb +  elementOffset;
	if(eo+eb<Nelements){
	  
	  dfloat r_Aq = 0;
	  
	  occaUnroll(p_cubNp)
	    for (int n=0;n<p_cubNp;n++) {
	      const int id = k+n*p_Np;
	      
	      const dfloat cDr_nk = cDr[id];
	      const dfloat cDs_nk = cDs[id];
	      const dfloat cDt_nk = cDt[id];
	      const dfloat cI_nk = cI[id];
	      
	      const int base = 4*p_cubNp*element + n;
		
	      r_Aq += cDr_nk*tmp[base+0*p_cubNp];
	      r_Aq += cDs_nk*tmp[base+1*p_cubNp];
	      r_Aq += cDt_nk*tmp[base+2*p_cubNp];
	      r_Aq +=  cI_nk*tmp[base+3*p_cubNp];
	    }
	  
	  const int id = k + element*p_Np;
	  Aq[id] = r_Aq;
	}
      }
    }
  }
}



// use kernel splitting
void ellipticPartialAxCurvedTet3D_Ref6(const int Nelements,
				       const int       * restrict elementList,
				       const datafloat * restrict ggeo,
				       const datafloat * restrict cDr,
				       const datafloat * restrict cDs,
				       const datafloat * restrict cDt,
				       const datafloat * restrict cI,
				       const datafloat * restrict cDrT,
				       const datafloat * restrict cDsT,
				       const datafloat * restrict cDtT,
				       const datafloat * restrict cIT,
				       const datafloat lambda,
				       const datafloat  * restrict q,
				       datafloat  * restrict tmp,
				       datafloat  * restrict Aq){

#define elementOffset 0

  // kernel 6.0
  for(int eo=0;eo<Nelements;eo+=p_Nb;outer0){
    
    for(int eb=0;eb<p_Nb;++eb;inner1){
      for(int t=0;t<p_Np;++t;inner0){

	const int element = eo+eb+elementOffset;

	if(eo+eb<Nelements){

	  occaUnroll() //hard coded
	    for(int n=t;n<p_cubNp;n+=p_Np){
	      
	      datafloat cqr = 0, cqs = 0, cqt = 0, cq =0;
	      
	      // 6 L1+shared loads per 8 flops (13.4*8/(6*8) TFLOPS)
	      occaUnroll(p_Np)
		for (int k=0;k<p_Np;k++) {
		  const int id = n+k*p_cubNp;
		  
		  const dfloat cDr_nk = cDrT[id];
		  const dfloat cDs_nk = cDsT[id];
		  const dfloat cDt_nk = cDtT[id];
		  const dfloat cI_nk = cIT[id];
		  
		  // do not prefetch
		  const dfloat qk = q[k+element*p_Np];
		  
		  /// 8 flops per 1 shared
		  cqr += cDr_nk*qk;
		  cqs += cDs_nk*qk;
		  cqt += cDt_nk*qk;
		  cq  += cI_nk*qk;
		}
	      
	      
	      const int gid = element*p_Nggeo*p_cubNp + n;
	      
	      const datafloat Grr = ggeo[gid + p_G00ID*p_cubNp];
	      const datafloat Grs = ggeo[gid + p_G01ID*p_cubNp];
	      const datafloat Grt = ggeo[gid + p_G02ID*p_cubNp];
	      const datafloat Gss = ggeo[gid + p_G11ID*p_cubNp];
	      const datafloat Gst = ggeo[gid + p_G12ID*p_cubNp];
	      const datafloat Gtt = ggeo[gid + p_G22ID*p_cubNp];
	      const datafloat J   = ggeo[gid + p_GWJID*p_cubNp];
	      
	      // assume includes Jacobian
	      const int base = element*p_cubNp*4 + n;
	      tmp[base+0*p_cubNp] = Grr*cqr + Grs*cqs + Grt*cqt;
	      tmp[base+1*p_cubNp] = Grs*cqr + Gss*cqs + Gst*cqt;
	      tmp[base+2*p_cubNp] = Grt*cqr + Gst*cqs + Gtt*cqt;
	      tmp[base+3*p_cubNp] = lambda*J*cq;
	    }
	}
      }
    }
  }

  // kernel 6.1

  for(int eo=0;eo<Nelements;eo+=p_Nb;outer0){

    for(int eb=0;eb<p_Nb;++eb;inner1){
      for(int k=0;k<p_Np;++k;inner0){

	if(eo+eb<Nelements){
	  const int element = eo + eb +  elementOffset;
	  
	  dfloat r_Aq = 0;
	  
	  occaUnroll(p_cubNp)
	    for (int n=0;n<p_cubNp;n++) {
	      const int id = k+n*p_Np;
	      
	      const dfloat cDr_nk = cDr[id];
	      const dfloat cDs_nk = cDs[id];
	      const dfloat cDt_nk = cDt[id];
	      const dfloat cI_nk = cI[id];
	      
	      const int base = 4*p_cubNp*element + n;
		
	      r_Aq += cDr_nk*tmp[base+0*p_cubNp];
	      r_Aq += cDs_nk*tmp[base+1*p_cubNp];
	      r_Aq += cDt_nk*tmp[base+2*p_cubNp];
	      r_Aq +=  cI_nk*tmp[base+3*p_cubNp];
	    }
	  
	  const int id = k + element*p_Np;
	  Aq[id] = r_Aq;
	}
      }
    }
  }
}



// revert to ref4 and reduce to Np storage
void ellipticPartialAxCurvedTet3D_Ref7(const int Nelements,
				       const int       * restrict elementList,
				       const datafloat * restrict ggeo,
				       const datafloat * restrict cDr,
				       const datafloat * restrict cDs,
				       const datafloat * restrict cDt,
				       const datafloat * restrict cI,
				       const datafloat * restrict cDrT,
				       const datafloat * restrict cDsT,
				       const datafloat * restrict cDtT,
				       const datafloat * restrict cIT,
				       const datafloat lambda,
				       const datafloat  * restrict q,
				       datafloat  * restrict tmp,
				       datafloat  * restrict Aq){

#define elementOffset 0
  
  for(int eo=0;eo<Nelements;eo+=p_Nb;outer0){
    
    shared datafloat s_qr[p_Nb][p_Np], s_qs[p_Nb][p_Np], s_qt[p_Nb][p_Np], s_cq[p_Nb][p_Np];

    exclusive dfloat r_Aq;
    
    for(int n0=0;n0<p_cubNp;n0+=p_Np){

      barrier(localMemFence);
      
      for(int eb=0;eb<p_Nb;++eb;inner1){
	for(int t=0;t<p_Np;++t;inner0){
	  
	  if(n0==0) r_Aq = 0;
	  
	  const int n = n0 + t;
	  
	  const int element = eo+eb+elementOffset;
	  
	  if(eo+eb<Nelements && n<p_cubNp){
	    
	    datafloat cqr = 0, cqs = 0, cqt = 0, cq =0;
	    
	    // 6 L1+shared loads per 8 flops (13.4*8/(6*8) TFLOPS)
	    occaUnroll(p_Np)
	      for (int k=0;k<p_Np;k++) {
		const int id = n+k*p_cubNp;
		
		const dfloat cDr_nk = cDrT[id];
		const dfloat cDs_nk = cDsT[id];
		const dfloat cDt_nk = cDtT[id];
		const dfloat cI_nk = cIT[id];
		
		// do not prefetch
		const dfloat qk = q[k+element*p_Np];
		
		/// 8 flops per 5 shared/L1
		cqr += cDr_nk*qk;
		cqs += cDs_nk*qk;
		cqt += cDt_nk*qk;
		cq  += cI_nk*qk;
	      }
	    
	    
	    const int gid = element*p_Nggeo*p_cubNp + n;
	    
	    const datafloat Grr = ggeo[gid + p_G00ID*p_cubNp];
	    const datafloat Grs = ggeo[gid + p_G01ID*p_cubNp];
	    const datafloat Grt = ggeo[gid + p_G02ID*p_cubNp];
	    const datafloat Gss = ggeo[gid + p_G11ID*p_cubNp];
	    const datafloat Gst = ggeo[gid + p_G12ID*p_cubNp];
	    const datafloat Gtt = ggeo[gid + p_G22ID*p_cubNp];
	    const datafloat J   = ggeo[gid + p_GWJID*p_cubNp];
	    
	    // assume includes Jacobian
	    s_qr[eb][t] = Grr*cqr + Grs*cqs + Grt*cqt;
	    s_qs[eb][t] = Grs*cqr + Gss*cqs + Gst*cqt;
	    s_qt[eb][t] = Grt*cqr + Gst*cqs + Gtt*cqt;
	    s_cq[eb][t] = lambda*J*cq;
	  }
	}
      }
      
      barrier(localMemFence);
      
      for(int eb=0;eb<p_Nb;++eb;inner1){
	for(int k=0;k<p_Np;++k;inner0){
	  
	  occaUnroll(p_Np)
	    for (int t=0;t<p_Np;t++) {
	      const int m = t + n0; 
	      const int id = k+m*p_Np;
	      
	      const dfloat cDr_nk = cDr[id];
	      const dfloat cDs_nk = cDs[id];
	      const dfloat cDt_nk = cDt[id];
	      const dfloat cI_nk = cI[id];
	      
	      r_Aq += cDr_nk*s_qr[eb][t];
	      r_Aq += cDs_nk*s_qs[eb][t];
	      r_Aq += cDt_nk*s_qt[eb][t];
	      r_Aq += cI_nk*s_cq[eb][t];
	    }
	}
      }
    }
    
    for(int eb=0;eb<p_Nb;++eb;inner1){
      for(int k=0;k<p_Np;++k;inner0){
	
	const int element = eo + eb +  elementOffset;
	if(eo+eb<Nelements){
	  const int id = k + element*p_Np;
	  Aq[id] = r_Aq;
	}
      }
    }
  }
}


// reduce thread count (not good)
void ellipticPartialAxCurvedTet3D_Ref8(const int Nelements,
				       const int       * restrict elementList,
				       const datafloat * restrict ggeo,
				       const datafloat * restrict cDr,
				       const datafloat * restrict cDs,
				       const datafloat * restrict cDt,
				       const datafloat * restrict cI,
				       const datafloat * restrict cDrT,
				       const datafloat * restrict cDsT,
				       const datafloat * restrict cDtT,
				       const datafloat * restrict cIT,
				       const datafloat lambda,
				       const datafloat  * restrict q,
				       datafloat  * restrict tmp,
				       datafloat  * restrict Aq){

#define elementOffset 0
#define p_Nt p_Np
  
  for(int eo=0;eo<Nelements;eo+=p_Nb;outer0){
    
    shared datafloat s_qr[p_Nb][p_Nt], s_qs[p_Nb][p_Nt], s_qt[p_Nb][p_Nt], s_cq[p_Nb][p_Nt], s_q[p_Nb][p_Np];

    for(int eb=0;eb<p_Nb;++eb;inner1){
      for(int t=0;t<p_Nt;++t;inner0){

	const int element = eo+eb+elementOffset;

	if(eo+eb<Nelements){
	  occaUnroll()
	    for(int n=t;n<p_Np;n+=p_Nt){
	      Aq[n + element*p_Np] = 0;
	      s_q[eb][n] = q[n + element*p_Np];
	    }
	}
      }
    }

    occaUnroll()
    for(int n0=0;n0<p_cubNp;n0+=p_Nt){

      barrier(localMemFence);
      
      for(int eb=0;eb<p_Nb;++eb;inner1){
	for(int t=0;t<p_Nt;++t;inner0){
	  
	  const int n = n0 + t;
	  
	  const int element = eo+eb+elementOffset;
	  
	  if(eo+eb<Nelements && n<p_cubNp){
	    
	    datafloat cqr = 0, cqs = 0, cqt = 0, cq =0;
	    
	    // 6 L1+shared loads per 8 flops (13.4*8/(6*8) TFLOPS)
	    occaUnroll(p_Np)
	      for (int k=0;k<p_Np;k++) {
		const int id = n+k*p_cubNp;
		
		const dfloat cDr_nk = cDrT[id];
		const dfloat cDs_nk = cDsT[id];
		const dfloat cDt_nk = cDtT[id];
		const dfloat cI_nk = cIT[id];
		
		const dfloat qk = s_q[eb][k];
		
		/// 8 flops per 5 shared
		cqr += cDr_nk*qk;
		cqs += cDs_nk*qk;
		cqt += cDt_nk*qk;
		cq  += cI_nk*qk;
	      }
	    
	    
	    const int gid = element*p_Nggeo*p_cubNp + n;
	    
	    const datafloat Grr = ggeo[gid + p_G00ID*p_cubNp];
	    const datafloat Grs = ggeo[gid + p_G01ID*p_cubNp];
	    const datafloat Grt = ggeo[gid + p_G02ID*p_cubNp];
	    const datafloat Gss = ggeo[gid + p_G11ID*p_cubNp];
	    const datafloat Gst = ggeo[gid + p_G12ID*p_cubNp];
	    const datafloat Gtt = ggeo[gid + p_G22ID*p_cubNp];
	    const datafloat J   = ggeo[gid + p_GWJID*p_cubNp];
	    
	    // assume includes Jacobian
	    s_qr[eb][t] = Grr*cqr + Grs*cqs + Grt*cqt;
	    s_qs[eb][t] = Grs*cqr + Gss*cqs + Gst*cqt;
	    s_qt[eb][t] = Grt*cqr + Gst*cqs + Gtt*cqt;
	    s_cq[eb][t] = lambda*J*cq;
	  }
	}
      }

      barrier(localMemFence);
      
      for(int eb=0;eb<p_Nb;++eb;inner1){
	for(int k0=0;k0<p_Nt;++k0;inner0){

	  const int element = eo + eb +  elementOffset;
	  if(eo+eb<Nelements){

	    occaUnroll(p_Nt)
	    for(int k=k0;k<p_Np;k+=p_Nt){
	      
	      if(k<p_Np){

		dfloat r_Aq = 0;
		
		occaUnroll(p_Nt)
		  for (int t=0;t<p_Nt;t++) {
		    const int m = t + n0; 
		    const int id = k+m*p_Np;
		    
		    const dfloat cDr_nk = cDr[id];
		    const dfloat cDs_nk = cDs[id];
		    const dfloat cDt_nk = cDt[id];
		    const dfloat cI_nk = cI[id];
		    
		    r_Aq += cDr_nk*s_qr[eb][t];
		    r_Aq += cDs_nk*s_qs[eb][t];
		    r_Aq += cDt_nk*s_qt[eb][t];
		    r_Aq += cI_nk*s_cq[eb][t];
		  }
		
		const int id = k + element*p_Np;
		Aq[id] += r_Aq;
	      }
	    }
	  }
	}
      }
    }
  }
}


// multiple outputs per thread (Ref10 - should try shared q again)
void ellipticPartialAxCurvedTet3D_Ref9(const int Nelements,
				       const int       * restrict elementList,
				       const datafloat * restrict ggeo,
				       const datafloat * restrict cDr,
				       const datafloat * restrict cDs,
				       const datafloat * restrict cDt,
				       const datafloat * restrict cI,
				       const datafloat * restrict cDrT,
				       const datafloat * restrict cDsT,
				       const datafloat * restrict cDtT,
				       const datafloat * restrict cIT,
				       const datafloat lambda,
				       const datafloat  * restrict q,
				       datafloat  * restrict tmp,
				       datafloat  * restrict Aq){

#define elementOffset 0
  
  for(int eo=0;eo<Nelements;eo+=p_Nb*p_Ne;outer0){
    
    shared datafloat s_qr[p_Ne][p_Nb][p_Np], s_qs[p_Ne][p_Nb][p_Np], s_qt[p_Ne][p_Nb][p_Np], s_cq[p_Ne][p_Nb][p_Np];

    exclusive dfloat r_Aq[p_Ne];
    
    for(int n0=0;n0<p_cubNp;n0+=p_Np){

      barrier(localMemFence);
      
      for(int eb=0;eb<p_Nb;++eb;inner1){
	for(int t=0;t<p_Np;++t;inner0){
	  
	  if(n0==0){
	    occaUnroll(p_Ne)
	      for(int es=0;es<p_Ne;++es){
		r_Aq[es] = 0;
	      }
	  }
	  
	  const int n = n0 + t;
	  if(n<p_cubNp){
	    
	    datafloat cqr[p_Ne], cqs[p_Ne], cqt[p_Ne], cq[p_Ne];

	    occaUnroll(p_Ne)
	      for(int es=0;es<p_Ne;++es){
		cqr[es] = 0;
		cqs[es] = 0;
		cqt[es] = 0;
		cq[es] = 0;
	      }
	    
	    // 6 L1+shared loads per 8 flops (13.4*8/(6*8) TFLOPS)
	    occaUnroll(p_Np)
	      for (int k=0;k<p_Np;k++) {
		const int id = n+k*p_cubNp;
		
		const dfloat cDr_nk = cDrT[id];
		const dfloat cDs_nk = cDsT[id];
		const dfloat cDt_nk = cDtT[id];
		const dfloat cI_nk = cIT[id];

		occaUnroll(p_Ne)
		  for(int es=0;es<p_Ne;++es){
		    
		    const int e = eo+eb+es*p_Nb;
		    
		    if(e<Nelements){
		      // do not prefetch (rely on L1)
		      const dfloat qk = q[k+(e+elementOffset)*p_Np];
		      
		      /// 8 flops per 5 shared/L1
		      cqr[es] += cDr_nk*qk;
		      cqs[es] += cDs_nk*qk;
		      cqt[es] += cDt_nk*qk;
		      cq [es] += cI_nk*qk;
		    }
		  }
	      }

	    occaUnroll(p_Ne)
	      for(int es=0;es<p_Ne;++es){
		
		const int e = eo+eb+es*p_Nb;
		
		if(e<Nelements){
		  const int gid = (e+elementOffset)*p_Nggeo*p_cubNp + n;
		  
		  const datafloat Grr = ggeo[gid + p_G00ID*p_cubNp];
		  const datafloat Grs = ggeo[gid + p_G01ID*p_cubNp];
		  const datafloat Grt = ggeo[gid + p_G02ID*p_cubNp];
		  const datafloat Gss = ggeo[gid + p_G11ID*p_cubNp];
		  const datafloat Gst = ggeo[gid + p_G12ID*p_cubNp];
		  const datafloat Gtt = ggeo[gid + p_G22ID*p_cubNp];
		  const datafloat J   = ggeo[gid + p_GWJID*p_cubNp];
		  
		  // assume includes Jacobian
		  s_qr[es][eb][t] = Grr*cqr[es] + Grs*cqs[es] + Grt*cqt[es];
		  s_qs[es][eb][t] = Grs*cqr[es] + Gss*cqs[es] + Gst*cqt[es];
		  s_qt[es][eb][t] = Grt*cqr[es] + Gst*cqs[es] + Gtt*cqt[es];
		  s_cq[es][eb][t] = lambda*J*cq[es];
		}
	      }
	  }
	}
      }
      
      barrier(localMemFence);
      
      for(int eb=0;eb<p_Nb;++eb;inner1){
	for(int k=0;k<p_Np;++k;inner0){
	  
	  occaUnroll(p_Np)
	    for (int t=0;t<p_Np;t++) {
	      const int m = t + n0; 
	      const int id = k+m*p_Np;
	      
	      const dfloat cDr_nk = cDr[id];
	      const dfloat cDs_nk = cDs[id];
	      const dfloat cDt_nk = cDt[id];
	      const dfloat cI_nk = cI[id];
	      
	      occaUnroll(p_Ne)
		for(int es=0;es<p_Ne;++es){
		  r_Aq[es] += cDr_nk*s_qr[es][eb][t];
		  r_Aq[es] += cDs_nk*s_qs[es][eb][t];
		  r_Aq[es] += cDt_nk*s_qt[es][eb][t];
		  r_Aq[es] += cI_nk*s_cq[es][eb][t];
		}
	    }
	}
      }
    }

    for(int eb=0;eb<p_Nb;++eb;inner1){
      for(int k=0;k<p_Np;++k;inner0){

	occaUnroll(p_Ne)
	  for(int es=0;es<p_Ne;++es){

	    const int e = eo+eb+es*p_Nb;
	    
	    if(e<Nelements){
	      const int id = k + (e+elementOffset)*p_Np;
	      Aq[id] = r_Aq[es];
	    }
	  }
      }
    }
  }
}

