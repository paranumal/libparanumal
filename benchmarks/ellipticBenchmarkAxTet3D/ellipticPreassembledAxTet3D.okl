/*

The MIT License (MIT)

Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

// v0: basic
void ellipticPartialPreassembledAxTet3D_Ref0(const int Nelements,
					     const int elementOffset,
					     const datafloat * restrict SS,
					     const datafloat  * restrict q,
					     datafloat * restrict Sq){
  
  for(int e=0;e<Nelements;e++;outer0){

    shared datafloat s_q[p_Np];

    // prefetch
    for(int n=0;n<p_Np;++n;inner0){
      s_q[n] = q[n+e*p_Np];
    }

    barrier(localMemFence);

    for(int n=0;n<p_Np;++n;inner0){
      const datafloat * restrict SSe = SS + (e+elementOffset)*(long long int)(p_Np*p_Np);
      
      // accumulator
      datafloat r_Aq = 0.;

      // 2 flops per 2 loads => max throughput of 1.6 TFLOPS/s
      occaUnroll(p_Np)
	for (int m=0;m<p_Np;m++) {
	  r_Aq += SSe[n+m*p_Np]*s_q[m];
	}
      
      const int id = n + (e+elementOffset)*p_Np;
      Sq[id] = r_Aq;
    }
  }
}

// v1: SIMD cramming
void ellipticPartialPreassembledAxTet3D_Ref1(const int Nelements,
					     const int elementOffset,
					     const datafloat * restrict SS,
					     const datafloat  * restrict q,
					     datafloat * restrict Sq){
  
  for(int eo=0;eo<Nelements;eo+=p_Nb;outer0){
    
    shared datafloat s_q[p_Nb][p_Np];

    // prefetch
    for(int b=0;b<p_Nb;++b;inner1){
      for(int n=0;n<p_Np;++n;inner0){
	
	const int element = eo + b;
	
	if(element<Nelements){
	  s_q[b][n] = q[n+element*p_Np];
	}
      }
    }
    
    barrier(localMemFence);
    
    
    for(int b=0;b<p_Nb;++b;inner1){
      for(int n=0;n<p_Np;++n;inner0){
	
	const int element = eo + b;
	
	if(element<Nelements){
	  
	  const datafloat * restrict SSe = SS + (element+elementOffset)*(long long int)(p_Np*p_Np);
	  
	  // accumulator
	  datafloat r_Aq = 0.;
	
	  // 2 flops per 2 loads => max throughput of 1.6 TFLOPS/s
	  occaUnroll(p_Np)
	    for (int m=0;m<p_Np;m++) {
	      r_Aq += SSe[n+m*p_Np]*s_q[b][m];
	    }
	  
	  const int id = n + (element+elementOffset)*p_Np;
	  Sq[id] = r_Aq;
	}
      }
    }
  }
}


// v2: adjust matrix access for SIMD cramming
void ellipticPartialPreassembledAxTet3D_Ref2(const int Nelements,
					     const int elementOffset,
					     const datafloat * restrict SS,
					     const datafloat  * restrict q,
					     datafloat * restrict Sq){
  
  for(int eo=0;eo<Nelements;eo+=p_Nb;outer0){
    
    shared datafloat s_q[p_Nb][p_Np];

    // prefetch
    for(int b=0;b<p_Nb;++b;inner1){
      for(int n=0;n<p_Np;++n;inner0){
	
	const int element = eo + b;
	
	if(element<Nelements){
	  s_q[b][n] = q[n+element*p_Np];
	}
      }
    }
    
    barrier(localMemFence);
    
    
    for(int b=0;b<p_Nb;++b;inner1){
      for(int n=0;n<p_Np;++n;inner0){
	
	const int element = eo + b;
	
	if(element<Nelements){

	  const datafloat * restrict SSeb = SS + (eo*p_Np+b)*(long long int)p_Np;
	  
	  // accumulator
	  datafloat r_Aq = 0.;
	
	  // 2 flops per 2 loads => max throughput of 1.6 TFLOPS/s
	  occaUnroll(p_Np)
	    for (int m=0;m<p_Np;m++) {
	      r_Aq += SSeb[n + m*p_Nb*p_Np]*s_q[b][m]; // notice the grouping of columns
	    }
	  
	  const int id = n + (element+elementOffset)*p_Np;
	  Sq[id] = r_Aq;
	}
      }
    }
  }
}



