/*

The MIT License (MIT)

Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

kernel void ellipticAxSparseTet3D_v0(const int Nelements,
				     const int   * restrict elementList,
				     const dfloat * restrict ggeo,
				     const char4  * restrict IndT,
				     const dfloat * restrict Srr,
				     const dfloat * restrict Srs,
				     const dfloat * restrict Srt,
				     const dfloat * restrict Sss,
				     const dfloat * restrict Sst,
				     const dfloat * restrict Stt,
				     const dfloat * restrict MM,
				     const dfloat lambda,
				     const dfloat * restrict q,
				     dfloat * restrict Aq){

  // needs p_NnodesV (nodes per thread) and p_NblockV (elements per chunk) defined
  for(int eo=0;eo<Nelements;eo+=p_NnodesV*p_NblockV;outer0){
    shared dfloat s_q[p_NnodesV][p_NblockV][p_Np];
    shared dfloat s_ggeo[p_NnodesV][p_NblockV][p_Nggeo];

    for(int es=0;es<p_NblockV;++es;inner1){
      for(int n=0;n<p_Np;++n;inner0){

	// coalesced read of ggeo 
	int t = n + p_Np*es;
	while(t<p_NnodesV*p_NblockV*p_Nggeo && eo*p_Nggeo+t<Nelements*p_Nggeo){          
	  s_ggeo[0][0][t] = ggeo[eo*p_Nggeo+t];
	  t += p_Np*p_NblockV;
	}

	occaUnroll(p_NnodesV)
	  for(int et=0;et<p_NnodesV;++et){
	    const int e = eo + es + et*p_NblockV;
	    if(e<Nelements){
	      //prefetch q
	      const int id = n + e*p_Np;
	      s_q[et][es][n] = q[id];
	    }
	  }
      }
    }

    barrier(localMemFence);

    for(int es=0;es<p_NblockV;++es;inner1){
      for(int n=0;n<p_Np;++n;inner0){

	// do this part irrespective of e
	dfloat r_qrr[p_NnodesV], r_qrs[p_NnodesV], r_qrt[p_NnodesV];
	dfloat r_qss[p_NnodesV], r_qst[p_NnodesV], r_qtt[p_NnodesV];
	dfloat r_Mq[p_NnodesV];

	occaUnroll(p_NnodesV)
	  for(int et=0;et<p_NnodesV;++et){
	    r_qrr[et] = 0; r_qrs[et] = 0; r_qrt[et] = 0;
	    r_qss[et] = 0; r_qst[et] = 0; r_qtt[et] = 0;
	    r_Mq[et] = 0;
	  }

	occaUnroll(p_maxNnzPerRow/4)
	  for (int k=0;k<p_maxNnzPerRow/4;k++) {
	    const char4 Indn = IndT[n + p_Np*k];
	    int Inds[4];
	    Inds[0] = Indn.x;
	    Inds[1] = Indn.y;
	    Inds[2] = Indn.z;
	    Inds[3] = Indn.w;
	    int idk;

	    occaUnroll(4) //seems inefficient
	      for (int k2=0; k2<4; k2++){
		idk = Inds[k2];
		
		if(!idk) break;

		--idk;

		// assume Srr, Srs, Sss are stored as a row-major matrix with maxNnzPerRow rows and Np columns
		const int id = n + (k2+4*k)*p_Np;

		// 6 loads from global (probably L1 for NnodesV*6 flops)
		const dfloat Srr_nk = Srr[id];
		const dfloat Srs_nk = Srs[id];
		const dfloat Srt_nk = Srt[id];
		const dfloat Sss_nk = Sss[id];
		const dfloat Sst_nk = Sst[id];
		const dfloat Stt_nk = Sst[id];
		const dfloat MM_nk = MM[id];

		occaUnroll(p_NnodesV)
		  for(int et=0;et<p_NnodesV;++et){
		    // fetch from shared (for reuse three times)
		    // 6 flops per 8 bytes
		    const dfloat r_qk = s_q[et][es][idk];

		    r_qrr[et] += Srr_nk*r_qk;
		    r_qrs[et] += Srs_nk*r_qk;
		    r_qrt[et] += Srt_nk*r_qk;

		    r_qss[et] += Sss_nk*r_qk;
		    r_qst[et] += Sst_nk*r_qk;

		    r_qtt[et] += Stt_nk*r_qk;
		    
		    r_Mq[et] += MM_nk*r_qk;
		  }
	      }
	    if(!idk) break;
	  }

	// this part has to check for element index validity
	occaUnroll(p_NnodesV)
	  for(int et=0;et<p_NnodesV;++et){
	    const int e = eo + es + et*p_NblockV;

	    if (e<Nelements) {
	      dfloat res1;
	      res1  = s_ggeo[et][es][p_G00ID]*r_qrr[et];
	      res1 += s_ggeo[et][es][p_G01ID]*r_qrs[et];
	      res1 += s_ggeo[et][es][p_G02ID]*r_qrt[et];
	      res1 += s_ggeo[et][es][p_G11ID]*r_qss[et];
	      res1 += s_ggeo[et][es][p_G12ID]*r_qst[et];
	      res1 += s_ggeo[et][es][p_G22ID]*r_qtt[et];

	      res1 += s_ggeo[et][es][p_GWJID]*r_Mq[et];
	      
	      const int id = n + e*p_Np;
	      Aq[id] = res1;
	    }
	  }
      }
    }
  }
}

kernel void ellipticPartialAxSparseTet3D_v0(const int Nelements,
					    const int   * restrict elementList,
					    const dfloat * restrict ggeo,
					    const char4  * restrict IndT,
					    const dfloat * restrict Srr,
					    const dfloat * restrict Srs,
					    const dfloat * restrict Srt,
					    const dfloat * restrict Sss,
					    const dfloat * restrict Sst,
					    const dfloat * restrict Stt,
					    const dfloat * restrict MM,
					    const dfloat lambda,
					    const dfloat * restrict q,
					    dfloat * restrict Aq){
  
  // needs p_NnodesV (nodes per thread) and p_NblockV (elements per chunk) defined
  
  for(int eo=0;eo<Nelements;eo+=p_NnodesV*p_NblockV;outer0){

    shared int s_elements[p_NnodesV][p_NblockV];
    shared dfloat s_q[p_NnodesV][p_NblockV][p_Np];

    for(int es=0;es<p_NblockV;++es;inner1){
      for(int n=0;n<p_Np;++n;inner0){
	int t = n + es*p_Np;

	while(t<p_NblockV*p_NnodesV){
	  const int e = eo + t;
	  if(e<Nelements)
	    s_elements[0][t] = elementList[e];
	  t+=p_Np*p_NblockV;
	}
      }
    }

    barrier(localMemFence);

    for(int es=0;es<p_NblockV;++es;inner1){
      for(int n=0;n<p_Np;++n;inner0){

	occaUnroll(p_NnodesV)
	  for(int et=0;et<p_NnodesV;++et){
	    const int e = eo + es + et*p_NblockV;
	    if(e<Nelements){
	      //prefetch q
	      const int element = s_elements[et][es];
	      const int id = n + element*p_Np;
	      s_q[et][es][n] = q[id];
	    }
	  }
      }
    }
    
    barrier(localMemFence);
    
    for(int es=0;es<p_NblockV;++es;inner1){
      for(int n=0;n<p_Np;++n;inner0){

	// do this part irrespective of e
	dfloat r_qrr[p_NnodesV], r_qrs[p_NnodesV], r_qrt[p_NnodesV];
	dfloat r_qss[p_NnodesV], r_qst[p_NnodesV], r_qtt[p_NnodesV];
	dfloat r_Mq[p_NnodesV];

	occaUnroll(p_NnodesV)
	  for(int et=0;et<p_NnodesV;++et){
	    r_qrr[et] = 0; r_qrs[et] = 0; r_qrt[et] = 0;
	    r_qss[et] = 0; r_qst[et] = 0; r_qtt[et] = 0;
	    r_Mq[et] = 0;
	  }

	occaUnroll(p_maxNnzPerRow)
	  for (int k=0;k<p_maxNnzPerRow/4;k++) {
	    const char4 Indn = IndT[n + p_Np*k];
	    int Inds[4];
	    Inds[0] = Indn.x;
	    Inds[1] = Indn.y;
	    Inds[2] = Indn.z;
	    Inds[3] = Indn.w;

	    occaUnroll(4) //seems inefficient
	      for (int k2=0; k2<4; k2++){
		int idk = Inds[k2];

		//printf("thread %d, idk = %d\n", n,idk);

		if(!idk) break;

		--idk;

		// assume Srr, Srs, Sss are stored as a row-major matrix with maxNnzPerRow rows and Np columns
		const int id = n + (k2+4*k)*p_Np;
		// 3 loads from global (probably L1 for NnodesV*6 flops)
		const dfloat Srr_nk = Srr[id];
		const dfloat Srs_nk = Srs[id];
		const dfloat Srt_nk = Srt[id];
		const dfloat Sss_nk = Sss[id];
		const dfloat Sst_nk = Sst[id];
		const dfloat Stt_nk = Stt[id];
		const dfloat MM_nk = MM[id];

		//printf("thread %d, idk = %d, Srr = %f, Srs = %f, Sss = %f \n", n,idk, Srr_nk,Srs_nk,Sss_nk);

		occaUnroll(p_NnodesV)
		  for(int et=0;et<p_NnodesV;++et){
		    const dfloat r_qk = s_q[et][es][idk];

		    r_qrr[et] += Srr_nk*r_qk;
		    r_qrs[et] += Srs_nk*r_qk;
		    r_qrt[et] += Srt_nk*r_qk;
		    r_qss[et] += Sss_nk*r_qk;
		    r_qst[et] += Sst_nk*r_qk;
		    r_qtt[et] += Stt_nk*r_qk;
		    r_Mq[et]  += MM_nk*r_qk;
		  }
	      }
	  }

	// this part has to check for element index validity
	occaUnroll(p_NnodesV)
	  for(int et=0;et<p_NnodesV;++et){
	    const int e = eo + es + et*p_NblockV;

	    if (e<Nelements) {
	      const int element = s_elements[et][es];

	      const int gid = element*p_Nggeo;
	      const dfloat Grr = ggeo[gid + p_G00ID];
	      const dfloat Grs = ggeo[gid + p_G01ID];
	      const dfloat Grt = ggeo[gid + p_G02ID];
	      const dfloat Gss = ggeo[gid + p_G11ID];
	      const dfloat Gst = ggeo[gid + p_G12ID];
	      const dfloat Gtt = ggeo[gid + p_G22ID];
	      const dfloat J = ggeo[gid+p_GWJID];

	      dfloat res1;
	      res1  = Grr*r_qrr[et];
	      res1 += Grs*r_qrs[et];
	      res1 += Grt*r_qrt[et];
	      res1 += Gss*r_qss[et];
	      res1 += Gst*r_qst[et];
	      res1 += Gtt*r_qtt[et];
	      res1 += J*r_Mq[et];
	      
	      const int id = n + element*p_Np;
	      Aq[id] = res1;
	    }
	  }
      }
    }
  }
}



kernel void ellipticPartialAxSparseTet3D_v1(const int Nelements,
					    const int   * restrict elementList,
					    const dfloat * restrict ggeo,
					    const char4  * restrict IndT,
					    const dfloat * restrict Srr,
					    const dfloat * restrict Srs,
					    const dfloat * restrict Srt,
					    const dfloat * restrict Sss,
					    const dfloat * restrict Sst,
					    const dfloat * restrict Stt,
					    const dfloat * restrict MM,
					    const dfloat lambda,
					    const dfloat * restrict q,
					    dfloat * restrict Aq){

  // needs p_NnodesV (nodes per thread) and p_NblockV (elements per chunk) defined

  for(int eo=0;eo<Nelements;eo+=p_NnodesV*p_NblockV;outer0){
    shared int s_elements[p_NnodesV][p_NblockV];
    shared dfloat s_q[p_NnodesV][p_NblockV][p_Np];

    for(int es=0;es<p_NblockV;++es;inner1){
      for(int n=0;n<p_Np;++n;inner0){
	int t = n + es*p_Np;
	while(t<p_NblockV*p_NnodesV){
	  const int e = eo + t;
	  if(e<Nelements)
	    s_elements[0][t] = elementList[e];
	  t+=p_Np*p_NblockV;
	}
      }
    }

    barrier(localMemFence);

    for(int es=0;es<p_NblockV;++es;inner1){
      for(int n=0;n<p_Np;++n;inner0){

	occaUnroll(p_NnodesV)
	  for(int et=0;et<p_NnodesV;++et){
	    const int e = eo + es + et*p_NblockV;
	    if(e<Nelements){
	      //prefetch q
	      const int element = s_elements[et][es];
	      const int id = n + element*p_Np;
	      s_q[et][es][n] = q[id];
	    }
	  }
      }
    }

    barrier(localMemFence);

    for(int es=0;es<p_NblockV;++es;inner1){
      for(int n=0;n<p_Np;++n;inner0){

	// do this part irrespective of e
	dfloat r_qrr[p_NnodesV], r_qrs[p_NnodesV], r_qrt[p_NnodesV];
	dfloat r_qss[p_NnodesV], r_qst[p_NnodesV], r_qtt[p_NnodesV];
	dfloat r_Mq[p_NnodesV];

	occaUnroll(p_NnodesV)
	  for(int et=0;et<p_NnodesV;++et){
	    r_qrr[et] = 0; r_qrs[et] = 0; r_qrt[et] = 0;
	    r_qss[et] = 0; r_qst[et] = 0; r_qst[et] = 0;
	    r_Mq[et] = 0;
	  }


	occaUnroll(p_maxNnzPerRow/4)
	  for (int k=0;k<( ((int)p_maxNnzPerRow/4));k++) {
	    const char4 Indn = IndT[n + p_Np*k];
	    int Inds[4];
	    Inds[0] = Indn.x;
	    Inds[1] = Indn.y;
	    Inds[2] = Indn.z;
	    Inds[3] = Indn.w;

	    occaUnroll(4) //seems inefficient
	      for (int k2=0; k2<4; k2++){
		int idk = Inds[k2];

		if (idk){     
		  --idk;

		  // assume Srr, Srs, Sss are stored as a row-major matrix with maxNnzPerRow rows and Np columns
		  const int id = n + (k2+4*k)*p_Np;
		  // 3 loads from global (probably L1 for NnodesV*6 flops)
		  const dfloat Srr_nk = Srr[id];
		  const dfloat Srs_nk = Srs[id];
		  const dfloat Srt_nk = Srt[id];
		  const dfloat Sss_nk = Sss[id];
		  const dfloat Sst_nk = Sst[id];
		  const dfloat Stt_nk = Stt[id];
		  const dfloat MM_nk = MM[id];
		  
		  occaUnroll(p_NnodesV)
		    for(int et=0;et<p_NnodesV;++et){
		      const int e = eo + es + et*p_NblockV;
		      // fetch from shared (for reuse three times)
		      // 6 flops per 8 bytes
		      const dfloat r_qk = s_q[et][es][idk];

		      r_qrr[et] += Srr_nk*r_qk;
		      r_qrs[et] += Srs_nk*r_qk;
		      r_qrt[et] += Srt_nk*r_qk;
		      r_qss[et] += Sss_nk*r_qk;
		      r_qst[et] += Sst_nk*r_qk;
		      r_qtt[et] += Stt_nk*r_qk;
		      r_Mq[et]  += MM_nk*r_qk;
		    }
		}
	      }
	  }

	// this part has to check for element index validity
	occaUnroll(p_NnodesV)
	  for(int et=0;et<p_NnodesV;++et){
	    const int e = eo + es + et*p_NblockV;

	    if (e<Nelements) {
	      const int element = s_elements[et][es];

	      const int gid = element*p_Nggeo;
	      const dfloat Grr = ggeo[gid + p_G00ID];
	      const dfloat Grs = ggeo[gid + p_G01ID];
	      const dfloat Grt = ggeo[gid + p_G02ID];
	      const dfloat Gss = ggeo[gid + p_G11ID];
	      const dfloat Gst = ggeo[gid + p_G12ID];
	      const dfloat Gtt = ggeo[gid + p_G22ID];
	      const dfloat J  = ggeo[gid + p_GWJID];

	      const int id = n + element*p_Np;
	      Aq[id] =
		Grr*r_qrr[et] +  Grs*r_qrs[et] + Grt*r_qrt[et] + 
		Gss*r_qss[et] +  Gst*r_qst[et] + Gtt*r_qtt[et] +
		J*r_Mq[et];
	      
	    }
	  }
      }
    }
  }
}


#define elementOffset 0
kernel void ellipticPartialAxSparseTet3D_v2(const int Nelements,
					    const int   * restrict elementList,
					    const dfloat * restrict ggeo,
					    const char4  * restrict IndT,
					    const dfloat * restrict Srr,
					    const dfloat * restrict Srs,
					    const dfloat * restrict Srt,
					    const dfloat * restrict Sss,
					    const dfloat * restrict Sst,
					    const dfloat * restrict Stt,
					    const dfloat * restrict MM,
					    const dfloat lambda,
					    const dfloat * restrict q,
					    dfloat * restrict Aq){

  // needs p_NnodesV (nodes per thread) and p_NblockV (elements per chunk) defined

  for(int eo=0;eo<Nelements;eo+=p_NnodesV*p_NblockV;outer0){
    shared dfloat s_q[p_NnodesV][p_NblockV][p_Np];

    for(int es=0;es<p_NblockV;++es;inner1){
      for(int n=0;n<p_Np;++n;inner0){

	occaUnroll(p_NnodesV)
	  for(int et=0;et<p_NnodesV;++et){
	    const int e = eo + es + et*p_NblockV;
	    if(e<Nelements){
	      //prefetch q
	      const int id = n + (elementOffset+e)*p_Np;
	      s_q[et][es][n] = q[id];
	    }
	  }
      }
    }

    barrier(localMemFence);
    
    for(int es=0;es<p_NblockV;++es;inner1){
      for(int n=0;n<p_Np;++n;inner0){
	
	// do this part irrespective of e
	dfloat r_qrr[p_NnodesV], r_qrs[p_NnodesV], r_qrt[p_NnodesV];
	dfloat r_qss[p_NnodesV], r_qst[p_NnodesV], r_qtt[p_NnodesV];
	dfloat r_Mq[p_NnodesV];

	occaUnroll(p_NnodesV)
	  for(int et=0;et<p_NnodesV;++et){
	    r_qrr[et] = 0; r_qrs[et] = 0; r_qrt[et] = 0;
	    r_qss[et] = 0; r_qst[et] = 0; r_qst[et] = 0;
	    r_Mq[et] = 0;
	  }


	//	occaUnroll(p_maxNnzPerRow/4)
	  for (int k=0;k<( ((int)p_maxNnzPerRow/4));k++) {
	    const char4 Indn = IndT[n + p_Np*k];
	    int Inds[4];
	    Inds[0] = Indn.x;
	    Inds[1] = Indn.y;
	    Inds[2] = Indn.z;
	    Inds[3] = Indn.w;

	    occaUnroll(4) //seems inefficient
	      for (int k2=0; k2<4; k2++){
		int idk = Inds[k2]; 

		if (idk){     
		  --idk;

		  // assume Srr, Srs, Sss are stored as a row-major matrix with maxNnzPerRow rows and Np columns
		  const int id = n + (k2+4*k)*p_Np;
		  // 3 loads from global (probably L1 for NnodesV*6 flops)
		  const dfloat Srr_nk = Srr[id];
		  const dfloat Srs_nk = Srs[id];
		  const dfloat Srt_nk = Srt[id];
		  const dfloat Sss_nk = Sss[id];
		  const dfloat Sst_nk = Sst[id];
		  const dfloat Stt_nk = Stt[id];
		  const dfloat MM_nk = MM[id];
		  
		  occaUnroll(p_NnodesV)
		    for(int et=0;et<p_NnodesV;++et){
		      // fetch from shared (for reuse three times)
		      // 6 flops per 8 bytes
		      const dfloat r_qk = s_q[et][es][idk];

		      r_qrr[et] += Srr_nk*r_qk;
		      r_qrs[et] += Srs_nk*r_qk;
		      r_qrt[et] += Srt_nk*r_qk;
		      r_qss[et] += Sss_nk*r_qk;
		      r_qst[et] += Sst_nk*r_qk;
		      r_qtt[et] += Stt_nk*r_qk;
		      r_Mq[et]  += MM_nk*r_qk;
		    }
		}
	      }
	  }

	// this part has to check for element index validity
	occaUnroll(p_NnodesV)
	  for(int et=0;et<p_NnodesV;++et){
	    const int e = eo + es + et*p_NblockV;

	    if (e<Nelements) {
	      const int gid = (e+elementOffset)*p_Nggeo;
	      const dfloat Grr = ggeo[gid + p_G00ID];
	      const dfloat Grs = ggeo[gid + p_G01ID];
	      const dfloat Grt = ggeo[gid + p_G02ID];
	      const dfloat Gss = ggeo[gid + p_G11ID];
	      const dfloat Gst = ggeo[gid + p_G12ID];
	      const dfloat Gtt = ggeo[gid + p_G22ID];
	      const dfloat J  = ggeo[gid + p_GWJID];

	      const int id = n + (e+elementOffset)*p_Np;
	      Aq[id] =
		Grr*r_qrr[et] +  Grs*r_qrs[et] + Grt*r_qrt[et] + 
		Gss*r_qss[et] +  Gst*r_qst[et] + Gtt*r_qtt[et] +
		J*r_Mq[et];
	      
	    }
	  }
      }
    }
  }
}

