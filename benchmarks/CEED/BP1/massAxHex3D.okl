/*

The MIT License (MIT)

Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

#if p_gjNq==8 || p_gjNq==16
#define p_gjPad 1
#else
#define p_gjPad 0
#endif

#if p_Nq==8 || p_Nq==16
#define p_gllPad 1
#else
#define p_gllPad 0
#endif

#define p_Nq2 (p_Nq*p_Nq)
#define p_gjNp (p_gjNq*p_gjNq*p_gjNq)
#define p_gjNq2 (p_gjNq*p_gjNq)

//dumb starts here =======================
//absolute worst kernel I can think of

// reference kernel; no unrolling anywhere and no padding, no const, no compiler variables
//worst out of the worst
//written by KS
kernel void massPartialAxHex3D_baselineVeryBad(int Nelements,
    int *  elementList,
    dfloat * gjGeo,
    dfloat *  gjI,
    dfloat *  q,
    dfloat *  Mq,
    dfloat * qtmp,
    dfloat * qtmp2
    ){


  for(int e=0;e<Nelements;++e;outer0){

    shared dfloat s_I[p_gjNq][p_gjNq];

    //	exclusive dfloat r_q[p_gjNq];
    //	exclusive dfloat r_Mq[p_gjNq];

    //	shared dfloat s_q1[p_gjNq][p_gjNq];
    //		shared dfloat s_q2[p_gjNq][p_gjNq];

    //	exclusive int emap;

    // prefetch D and I matrices and zero register storage
    for(int b=0;b<p_gjNq;++b;inner1){
      for(int a=0;a<p_gjNq;++a;inner0){

        int emap = elementList[e];

        if(a<p_Nq)
          s_I[b][a] = gjI[a+p_Nq*b];

      }
    }


    barrier(localMemFence);

    for(int b=0;b<p_gjNq;++b;inner1){
      for(int a=0;a<p_gjNq;++a;inner0){
        if(a<p_Nq && b<p_Nq){

          int emap = elementList[e];
          for(int k=0;k<p_gjNq;++k){
            dfloat tmp = 0;

            for(int c=0;c<p_Nq;++c){

              tmp += s_I[k][c]*q[emap*p_Np+c*p_Nq2+b*p_Nq+a];
              qtmp2[emap*p_gjNp+c*p_gjNq2+b*p_gjNq+a] =0.0f;
              //r_Mq[c];
            }
            Mq[emap*p_gjNp+k*p_gjNq2+b*p_gjNq+a] = tmp;
            //tmp;
            //	r_q[k] = tmp;
          }

        }
      }
    }

    //error starts here
    for(int k=0;k<p_gjNq;++k){

      for(int b=0;b<p_gjNq;++b;inner1){
        for(int i=0;i<p_gjNq;++i;inner0){
          int emap = elementList[e];
          if(b<p_Nq){
            dfloat tmp = 0;

            for(int a=0;a<p_Nq;++a){
              tmp += s_I[i][a]*Mq[emap*p_gjNp+k*p_gjNq2+b*p_gjNq+a];
              //s_q1[b][a];
            }
            qtmp[emap*p_gjNp+k*p_gjNq2+b*p_gjNq+i] = tmp;
            //	s_q2[b][i] = tmp;
          }
        }
      }

      barrier(localMemFence);

      for(int j=0;j<p_gjNq;++j;inner1){
        for(int i=0;i<p_gjNq;++i;inner0){
          int emap = elementList[e];
          dfloat r_GwJ = gjGeo[p_Nggeo*emap*p_gjNp+k*p_gjNq*p_gjNq+j*p_gjNq+i + p_GWJID*p_gjNp];

          dfloat tmp = 0;

          for(int b=0;b<p_Nq;++b){
            tmp += s_I[j][b]*qtmp[emap*p_gjNp+k*p_gjNq2+b*p_gjNq+i];
            //s_q2[b][i];
          }

          //	s_q1[j][i]
          Mq[emap*p_gjNp+k*p_gjNq2+j*p_gjNq+i]= r_GwJ*tmp;
        }
      }

      barrier(localMemFence);

      for(int b=0;b<p_gjNq;++b;inner1){
        for(int i=0;i<p_gjNq;++i;inner0){
          int emap = elementList[e];
          if(b<p_Nq){
            dfloat tmp = 0;


            for(int j=0;j<p_gjNq;++j){
              tmp += s_I[j][b]*Mq[emap*p_gjNp+k*p_gjNq2+j*p_gjNq+i];
              //s_q1[j][i];
            }
            //		s_q2[b][i]
            qtmp[emap*p_gjNp+k*p_gjNq2+b*p_gjNq+i] = tmp;
          }
        }
      }

      barrier(localMemFence);

      for(int b=0;b<p_gjNq;++b;inner1){
        for(int a=0;a<p_gjNq;++a;inner0){
          int emap = elementList[e];
          if(a<p_Nq && b<p_Nq){

            dfloat tmp = 0;
            for(int i=0;i<p_gjNq;++i){
              tmp += s_I[i][a]*qtmp[emap*p_gjNp+k*p_gjNq2+b*p_gjNq+i];
              //s_q2[b][i];
            }

            for(int c=0;c<p_Nq;++c){
              qtmp2[emap*p_gjNp+c*p_gjNq2+b*p_gjNq+a] += s_I[k][c]*tmp;
            }
          }
        }
      }
    }

    for(int b=0;b<p_gjNq;++b;inner1){
      for(int a=0;a<p_gjNq;++a;inner0){
        int emap = elementList[e];
        if(a<p_Nq && b<p_Nq){
          for(int c=0;c<p_Nq;++c){
            const int id = emap*p_Np + c*p_Nq2 + b*p_Nq + a;
            Mq[id] = qtmp2[emap*p_Np+c*p_Nq2+b*p_Nq+a] ;
            //r_Mq[c];
          }
        }

      }
    }
  }
}



//dumb ends here ================

//TW baseline


// reference kernel; no unrolling anywhere and no padding, no const, no compiler variables
kernel void massPartialAxHex3D_vBaselineTW(int Nelements,
    int *  elementList,
    dfloat * gjGeo,
    dfloat *  gjI,
    dfloat *  q,
    dfloat *  Mq){


  for(int e=0;e<Nelements;++e;outer0){

    int Nq = p_gjNq-1;
    int Nq2 = Nq*Nq;
    int Np = Nq*Nq2;

    shared dfloat s_I[p_gjNq][p_gjNq];

    shared dfloat s_q1[p_gjNq][p_gjNq];
    shared dfloat s_q2[p_gjNq][p_gjNq];

    exclusive int emap;

    // prefetch D and I matrices and zero register storage
    for(int b=0;b<p_gjNq;++b;inner1){
      for(int a=0;a<p_gjNq;++a;inner0){

        emap = elementList[e];

        if(a<Nq)
          s_I[b][a] = gjI[a+Nq*b];

        if(a<Nq && b<Nq){
          for(int c=0;c<Nq;++c){
            const int id = emap*Np + c*Nq2 + b*Nq + a;
            Mq[id] = 0.0;
          }
        }
      }
    }

    barrier(localMemFence);

    //error starts here
    for(int k=0;k<p_gjNq;++k){

      barrier(localMemFence);

      for(int b=0;b<p_gjNq;++b;inner1){
        for(int a=0;a<p_gjNq;++a;inner0){

          if(a<Nq && b<Nq){
            dfloat tmp = 0;

            // fetch straight from q
            for(int c=0;c<p_Nq;++c){
              tmp += s_I[k][c]*q[emap*Np+c*Nq2+b*Nq+a];
            }

            s_q1[b][a] = tmp;
          }
        }
      }

      barrier(localMemFence);

      for(int b=0;b<p_gjNq;++b;inner1){
        for(int i=0;i<p_gjNq;++i;inner0){
          if(b<Nq){
            dfloat tmp = 0;

            for(int a=0;a<p_	Nq;++a){
              tmp += s_I[i][a]*s_q1[b][a];
            }
            s_q2[b][i] = tmp;
          }
        }
      }

      barrier(localMemFence);

      for(int j=0;j<p_gjNq;++j;inner1){
        for(int i=0;i<p_gjNq;++i;inner0){

          dfloat r_GwJ = gjGeo[p_Nggeo*emap*p_gjNp+k*p_gjNq*p_gjNq+j*p_gjNq+i + p_GWJID*p_gjNp];

          dfloat tmp = 0;

          for(int b=0;b<Nq;++b){
            tmp += s_I[j][b]*s_q2[b][i];
          }

          s_q1[j][i] = r_GwJ*tmp;
        }
      }

      barrier(localMemFence);

      for(int b=0;b<p_gjNq;++b;inner1){
        for(int i=0;i<p_gjNq;++i;inner0){
          if(b<Nq){
            dfloat tmp = 0;


            for(int j=0;j<p_gjNq;++j){
              tmp += s_I[j][b]*s_q1[j][i];
            }
            s_q2[b][i] = tmp;
          }
        }
      }

      barrier(localMemFence);

      for(int b=0;b<p_gjNq;++b;inner1){
        for(int a=0;a<p_gjNq;++a;inner0){
          if(a<Nq && b<Nq){

            dfloat tmp = 0;
            for(int i=0;i<p_gjNq;++i){
              tmp += s_I[i][a]*s_q2[b][i];
            }

            // write straight to Mq
            for(int c=0;c<Nq;++c){
              const int id = emap*Np + c*Nq2 + b*Nq + a;
              Mq[id] += s_I[k][c]*tmp;
            }
          }
        }
      }
    }
  }
}



// reference kernel; no unrolling anywhere and no padding, no const, no compiler variables
kernel void massPartialAxHex3D_vRef0(int Nelements,
    int *  elementList,
    dfloat * gjGeo,
    dfloat *  gjI,
    dfloat *  q,
    dfloat *  Mq){


  for(int e=0;e<Nelements;++e;outer0){

    int Nq = p_gjNq-1;
    int Nq2 = Nq*p_Nq;
    int Np = Nq*p_Nq2;

    shared dfloat s_I[p_gjNq][p_gjNq];

    exclusive dfloat r_q[p_gjNq];
    exclusive dfloat r_Mq[p_gjNq];

    shared dfloat s_q1[p_gjNq][p_gjNq];
    shared dfloat s_q2[p_gjNq][p_gjNq];

    exclusive int emap;

    // prefetch D and I matrices and zero register storage
    for(int b=0;b<p_gjNq;++b;inner1){
      for(int a=0;a<p_gjNq;++a;inner0){

        emap = elementList[e];

        if(a<p_Nq)
          s_I[b][a] = gjI[a+p_Nq*b];

        for(int c=0;c<p_Nq;++c){
          //		r_q[c] = 0.0f;
          r_Mq[c] = q[emap*p_Np+c*p_Nq2+b*p_Nq+a];
        }
        //		for(int c=0;c<glNq;++c){
        //		r_q[c] = 0.0f;
        for(int c=0;c<p_Nq;++c){
          if(a<p_Nq && b<p_Nq){
            r_Mq[c] = q[emap*p_Np+c*p_Nq2+b*p_Nq+a];
          }
          else {
            r_Mq[c] = 0.0f;
          }
        }

      }
      }


      barrier(localMemFence);

      for(int b=0;b<p_gjNq;++b;inner1){
        for(int a=0;a<p_gjNq;++a;inner0){
          if(a<p_Nq && b<p_Nq){


            for(int k=0;k<p_gjNq;++k){
              dfloat tmp = 0;

              for(int c=0;c<p_Nq;++c){

                tmp += s_I[k][c]*r_Mq[c];
              }
              r_q[k] = tmp;
            }


            for(int c=0;c<p_Nq;++c){
              r_Mq[c] = 0;
            }
          }
        }
      }
      //error starts here
      for(int k=0;k<p_gjNq;++k){

        barrier(localMemFence);

        for(int b=0;b<p_gjNq;++b;inner1){
          for(int a=0;a<p_gjNq;++a;inner0){
            if(a<p_Nq && b<p_Nq)
              s_q1[b][a] = r_q[k];
          }
        }

        barrier(localMemFence);

        for(int b=0;b<p_gjNq;++b;inner1){
          for(int i=0;i<p_gjNq;++i;inner0){
            if(b<p_Nq){
              dfloat tmp = 0;

              for(int a=0;a<p_Nq;++a){
                tmp += s_I[i][a]*s_q1[b][a];
              }
              s_q2[b][i] = tmp;
            }
          }
        }

        barrier(localMemFence);

        for(int j=0;j<p_gjNq;++j;inner1){
          for(int i=0;i<p_gjNq;++i;inner0){

            dfloat r_GwJ = gjGeo[p_Nggeo*emap*p_gjNp+k*p_gjNq*p_gjNq+j*p_gjNq+i + p_GWJID*p_gjNp];

            dfloat tmp = 0;

            for(int b=0;b<p_Nq;++b){
              tmp += s_I[j][b]*s_q2[b][i];
            }

            s_q1[j][i] = r_GwJ*tmp;
          }
        }

        barrier(localMemFence);

        for(int b=0;b<p_gjNq;++b;inner1){
          for(int i=0;i<p_gjNq;++i;inner0){
            if(b<p_Nq){
              dfloat tmp = 0;


              for(int j=0;j<p_gjNq;++j){
                tmp += s_I[j][b]*s_q1[j][i];
              }
              s_q2[b][i] = tmp;
            }
          }
        }

        barrier(localMemFence);

        for(int b=0;b<p_gjNq;++b;inner1){
          for(int a=0;a<p_gjNq;++a;inner0){
            if(a<p_Nq && b<p_Nq){

              dfloat tmp = 0;
              for(int i=0;i<p_gjNq;++i){
                tmp += s_I[i][a]*s_q2[b][i];
              }
              for(int c=0;c<p_Nq;++c){
                r_Mq[c] += s_I[k][c]*tmp;
              }
            }
          }
        }
      }

      for(int b=0;b<p_gjNq;++b;inner1){
        for(int a=0;a<p_gjNq;++a;inner0){
          if(a<p_Nq && b<p_Nq){
            for(int c=0;c<p_Nq;++c){
              const int id = emap*p_Np + c*p_Nq2 + b*p_Nq + a;
              Mq[id] = r_Mq[c];
            }
          }
        }
      }
    }
  }




  kernel void massPartialAxHex3D_v1(const int Nelements,
      const int * restrict elementList,
      const dfloat * restrict gjGeo,
      const dfloat * restrict gjI,
      const dfloat * restrict q,
      dfloat * restrict Mq){


    for(int e=0;e<Nelements;++e;outer0){

      shared dfloat s_I[p_gjNq][p_Nq+p_gllPad];

      exclusive dfloat r_q[p_gjNq];
      exclusive dfloat r_Mq[p_Nq];

      shared dfloat s_q1[p_gjNq][p_gjNq+p_gjPad];
      shared dfloat s_q2[p_gjNq][p_gjNq+p_gjPad];

      exclusive int emap;

      // prefetch D and I matrices and zero register storage
      for(int b=0;b<p_gjNq;++b;inner1){
        for(int a=0;a<p_gjNq;++a;inner0){

          emap = elementList[e];

          if(a<p_Nq)

            s_I[b][a] = gjI[a+p_Nq*b];

          occaUnroll(p_Nq)

            for(int c=0;c<p_Nq;++c){
              if(a<p_Nq && b<p_Nq){
                r_Mq[c] = q[emap*p_Np+c*p_Nq2+b*p_Nq+a];
              }
              else {
                r_Mq[c] = 0.0f;
              }
            }
        }
      }

      barrier(localMemFence);

      for(int b=0;b<p_gjNq;++b;inner1){
        for(int a=0;a<p_gjNq;++a;inner0){
          if(a<p_Nq && b<p_Nq){

            occaUnroll(p_gjNq)
              for(int k=0;k<p_gjNq;++k){
                dfloat tmp = 0;
                occaUnroll(p_Nq)
                  for(int c=0;c<p_Nq;++c){
                    tmp += s_I[k][c]*r_Mq[c];
                  }
                r_q[k] = tmp;
              }

            occaUnroll(p_Nq)
              for(int c=0;c<p_Nq;++c){
                r_Mq[c] = 0;
              }
          }
        }
      }

      occaUnroll(p_gjNq)
        for(int k=0;k<p_gjNq;++k){

          barrier(localMemFence);

          for(int b=0;b<p_gjNq;++b;inner1){
            for(int a=0;a<p_gjNq;++a;inner0){
              if(a<p_Nq && b<p_Nq)
                s_q1[b][a] = r_q[k];
            }
          }

          barrier(localMemFence);

          for(int b=0;b<p_gjNq;++b;inner1){
            for(int i=0;i<p_gjNq;++i;inner0){
              if(b<p_Nq){
                dfloat tmp = 0;
                occaUnroll(p_Nq)
                  for(int a=0;a<p_Nq;++a){
                    tmp += s_I[i][a]*s_q1[b][a];
                  }
                s_q2[b][i] = tmp;
              }
            }
          }

          barrier(localMemFence);

          for(int j=0;j<p_gjNq;++j;inner1){
            for(int i=0;i<p_gjNq;++i;inner0){

              const dfloat r_GwJ = gjGeo[p_Nggeo*emap*p_gjNp+k*p_gjNq*p_gjNq+j*p_gjNq+i + p_GWJID*p_gjNp];

              dfloat tmp = 0;

              occaUnroll(p_Nq)
                for(int b=0;b<p_Nq;++b){
                  tmp += s_I[j][b]*s_q2[b][i];
                }

              s_q1[j][i] = r_GwJ*tmp;
            }
          }

          barrier(localMemFence);

          for(int b=0;b<p_gjNq;++b;inner1){
            for(int i=0;i<p_gjNq;++i;inner0){
              if(b<p_Nq){
                dfloat tmp = 0;

                occaUnroll(p_gjNq)
                  for(int j=0;j<p_gjNq;++j){
                    tmp += s_I[j][b]*s_q1[j][i];
                  }
                s_q2[b][i] = tmp;
              }
            }
          }

          barrier(localMemFence);

          for(int b=0;b<p_gjNq;++b;inner1){
            for(int a=0;a<p_gjNq;++a;inner0){
              if(a<p_Nq && b<p_Nq){

                dfloat tmp = 0;

                occaUnroll(p_gjNq)
                  for(int i=0;i<p_gjNq;++i){
                    tmp += s_I[i][a]*s_q2[b][i];
                  }

                occaUnroll(p_Nq)
                  for(int c=0;c<p_Nq;++c){
                    r_Mq[c] += s_I[k][c]*tmp;
                  }
              }
            }
          }
        }

      for(int b=0;b<p_gjNq;++b;inner1){
        for(int a=0;a<p_gjNq;++a;inner0){
          if(a<p_Nq && b<p_Nq){
            occaUnroll(p_Nq)
              for(int c=0;c<p_Nq;++c){
                const int id = emap*p_Np + c*p_Nq2 + b*p_Nq + a;
                Mq[id] = r_Mq[c];
              }
          }
        }
      }
    }
  }


  kernel void massPartialAxHex3D_v2(const int Nelements,
      const int * restrict elementList,
      const dfloat * restrict gjGeo,
      const dfloat * restrict gjI,
      const dfloat * restrict q,
      dfloat * restrict Mq){


    for(int e=0;e<Nelements;++e;outer0){

      shared dfloat s_I[p_gjNq][p_Nq+p_gllPad];
      volatile shared dfloat s_q[p_gjNq][p_gjNq][p_gjNq+p_gjPad];

      exclusive dfloat r_q[p_gjNq];

      exclusive int emap;

      // prefetch D and I matrices and zero register storage
      for(int b=0;b<p_gjNq;++b;inner1){
        for(int a=0;a<p_gjNq;++a;inner0){

          emap = elementList[e];

          if(a<p_Nq)
            s_I[b][a] = gjI[a+p_Nq*b];

          if(a<p_Nq && b<p_Nq){
            occaUnroll(p_Nq)
              for(int c=0;c<p_Nq;++c)
                s_q[c][b][a] = q[emap*p_Np+c*p_Nq2+b*p_Nq+a];
          }
        }
      }

      barrier(localMemFence);

      // transform in b
      for(int c=0;c<p_gjNq;++c;inner1){
        for(int a=0;a<p_gjNq;++a;inner0){
          if(a<p_Nq && c<p_Nq){
            // prefetch to registers
            occaUnroll(p_Nq)
              for(int b=0;b<p_Nq;++b)
                r_q[b] = s_q[c][b][a];

            // transform in b
            occaUnroll(p_gjNq)
              for(int j=0;j<p_gjNq;++j){
                dfloat tmp = 0;
                occaUnroll(p_Nq)
                  for(int b=0;b<p_Nq;++b)
                    tmp += s_I[j][b]*r_q[b];
                s_q[c][j][a] = tmp; // ok since only this thread
              }
          }
        }
      }

      barrier(localMemFence);

      // transform in a
      for(int c=0;c<p_gjNq;++c;inner1){
        for(int j=0;j<p_gjNq;++j;inner0){
          if(c<p_Nq){

            // prefetch to registers
            occaUnroll(p_Nq)
              for(int a=0;a<p_Nq;++a)
                r_q[a] = s_q[c][j][a];

            // transform in a
            occaUnroll(p_gjNq)
              for(int i=0;i<p_gjNq;++i){
                dfloat tmp = 0;
                occaUnroll(p_Nq)
                  for(int a=0;a<p_Nq;++a)
                    tmp += s_I[i][a]*r_q[a];
                s_q[c][j][i] = tmp; // ok since only this thread
              }
          }
        }
      }

      barrier(localMemFence);

      // transform in c
      for(int j=0;j<p_gjNq;++j;inner1){
        for(int i=0;i<p_gjNq;++i;inner0){
          // prefetch to registers
          occaUnroll(p_Nq)
            for(int c=0;c<p_Nq;++c)
              r_q[c] = s_q[c][j][i];

          // transform in c
          occaUnroll(p_gjNq)
            for(int k=0;k<p_gjNq;++k){
              // prefetch integration weights
              const int id = p_Nggeo*emap*p_gjNp
                +k*p_gjNq*p_gjNq+j*p_gjNq+i+p_GWJID*p_gjNp;
              const dfloat r_GwJ = gjGeo[id];

              dfloat tmp = 0;
              occaUnroll(p_Nq)
                for(int c=0;c<p_Nq;++c)
                  tmp += s_I[k][c]*r_q[c];

              s_q[k][j][i] = r_GwJ*tmp; // ok since only this thread
            }
        }
      }

      barrier(localMemFence);

      // transform back in b
      for(int k=0;k<p_gjNq;++k;inner1){
        for(int i=0;i<p_gjNq;++i;inner0){
          occaUnroll(p_gjNq)
            for(int j=0;j<p_gjNq;++j)
              r_q[j] = s_q[k][j][i];

          occaUnroll(p_Nq)
            for(int b=0;b<p_Nq;++b){
              dfloat tmp = 0;
              occaUnroll(p_gjNq)
                for(int j=0;j<p_gjNq;++j)
                  tmp += s_I[j][b]*r_q[j];
              s_q[k][b][i] = tmp; // ok since only this thread
            }
        }
      }

      barrier(localMemFence);

      // transform back in a
      for(int k=0;k<p_gjNq;++k;inner1){
        for(int b=0;b<p_gjNq;++b;inner0){
          if(b<p_Nq){
            occaUnroll(p_gjNq)
              for(int i=0;i<p_gjNq;++i)
                r_q[i] = s_q[k][b][i];

            occaUnroll(p_Nq)
              for(int a=0;a<p_Nq;++a){
                dfloat tmp = 0;
                occaUnroll(p_gjNq)
                  for(int i=0;i<p_gjNq;++i)
                    tmp += s_I[i][a]*r_q[i];
                s_q[k][b][a] = tmp; // ok since only this thread
              }
          }
        }
      }

      barrier(localMemFence);

      // transform back in c
      for(int b=0;b<p_gjNq;++b;inner1){
        for(int a=0;a<p_gjNq;++a;inner0){
          if(a<p_Nq && b<p_Nq){
            occaUnroll(p_gjNq)
              for(int k=0;k<p_gjNq;++k)
                r_q[k] = s_q[k][b][a];

            occaUnroll(p_Nq)
              for(int c=0;c<p_Nq;++c){
                dfloat tmp = 0;
                occaUnroll(p_gjNq)
                  for(int k=0;k<p_gjNq;++k)
                    tmp += s_I[k][c]*r_q[k];

                Mq[emap*p_Np+c*p_Nq2+b*p_Nq+a] = tmp;
              }
          }
        }
      }
    }
  }

  /*
#if p_gjNq%2 == 1
#define p_halfI ((p_gjNq+1)/2)
#else
#define p_halfI ((p_gjNq+1)/2)
#endif
   */

  //#define p_halfI (p_gjNq+p_gjNq%2)/2

  //written by Kasia to reduce the shmem use

  kernel void massPartialAxHex3D_redShmem(const int Nelements,
      const int * restrict elementList,
      const dfloat * restrict gjGeo,
      const dfloat * restrict gjI,
      const dfloat * restrict q,
      dfloat * restrict Mq){


    for(int e=0;e<Nelements;++e;outer0){

      //	  shared dfloat s_I[p_halfI][p_Nq+p_gllPad];
      shared dfloat s_I[p_halfI][p_Nq+p_gllPad];
      volatile shared dfloat s_q[p_gjNq][p_gjNq][p_gjNq+p_gjPad];

      exclusive dfloat r_q[p_gjNq];

      exclusive int emap;

      // prefetch D and I matrices and zero register storage
      for(int b=0;b<p_gjNq;++b;inner1){
        for(int a=0;a<p_gjNq;++a;inner0){

          emap = elementList[e];

          if(a<p_Nq && b<p_halfI)
            s_I[b][a] = gjI[a+p_Nq*b];

          if(a<p_Nq && b<p_Nq){
            occaUnroll(p_Nq)
              for(int c=0;c<p_Nq;++c)
                s_q[c][b][a] = q[emap*p_Np+c*p_Nq2+b*p_Nq+a];
          }
          //		for (int c=0;c<p_gjNq; ++c)
          //	{
          //	Mq[emap*p_Np+c*p_Nq2+b*p_Nq+a] = 0.0f;
          //}
        }
      }

      barrier(localMemFence);

      // transform in b
      for(int c=0;c<p_gjNq;++c;inner1){
        for(int a=0;a<p_gjNq;++a;inner0){
          if(a<p_Nq && c<p_Nq){
            // prefetch to registers
            occaUnroll(p_Nq)
              for(int b=0;b<p_Nq;++b)
                r_q[b] = s_q[c][b][a];

            // transform in b
            occaUnroll(p_halfI)
              for(int j=0;j<p_halfI;++j){
                dfloat tmp = 0;
                dfloat tmp2 = 0;
                occaUnroll(p_Nq)
                  for(int b=0;b<p_Nq;++b)
                  {
                    dfloat tmpI = s_I[j][b];
                    tmp  += tmpI*r_q[b];
                    tmp2 += tmpI*r_q[p_Nq-1-b];

                  }
                s_q[c][j][a] = tmp; // ok since only this thread
                s_q[c][p_gjNq-1-j][a] = tmp2;


              }
          }
        }
      }

      barrier(localMemFence);

      // transform in a
      for(int c=0;c<p_gjNq;++c;inner1){
        for(int j=0;j<p_gjNq;++j;inner0){
          if(c<p_Nq){

            // prefetch to registers
            occaUnroll(p_Nq)
              for(int a=0;a<p_Nq;++a)
                r_q[a] = s_q[c][j][a];

            // transform in a
            occaUnroll(p_halfI)

              for(int i=0;i<p_halfI;++i){
                dfloat tmp = 0;
                dfloat tmp2 = 0;
                occaUnroll(p_Nq)
                  for(int a=0;a<p_Nq;++a)
                  {
                    dfloat tmpI = s_I[i][a];
                    tmp += tmpI*r_q[a];
                    tmp2+=tmpI*r_q[p_Nq-1-a];
                  }
                s_q[c][j][i] = tmp; // ok since only this thread
                s_q[c][p_gjNq-1-j][i] = tmp2;


              }
          }
        }
      }

      barrier(localMemFence);

      // transform in c
      for(int j=0;j<p_gjNq;++j;inner1){
        for(int i=0;i<p_gjNq;++i;inner0){
          // prefetch to registers
          occaUnroll(p_Nq)
            for(int c=0;c<p_Nq;++c)
              r_q[c] = s_q[c][j][i];

          // transform in c
          occaUnroll(p_halfI)
            for(int k=0;k<p_halfI;++k){
              // prefetch integration weights
              const int id = p_Nggeo*emap*p_gjNp
                +k*p_gjNq*p_gjNq+j*p_gjNq+i+p_GWJID*p_gjNp;
              const int id2 = p_Nggeo*emap*p_gjNp
                +(p_gjNq-1-k)*p_gjNq*p_gjNq+j*p_gjNq+i+p_GWJID*p_gjNp;
              const dfloat r_GwJ = gjGeo[id];
              const dfloat r_GwJ2 = gjGeo[id2];
              dfloat tmp = 0;
              dfloat tmp2 = 0;
              occaUnroll(p_Nq)
                for(int c=0;c<p_Nq;++c){
                  dfloat tmpI = s_I[k][c];
                  tmp += tmpI*r_q[c];
                  tmp2 += tmpI*r_q[p_Nq-1-c];
                }

              s_q[k][j][i] = r_GwJ*tmp; // ok since only this thread
              s_q[p_gjNq-k-1][j][i] = r_GwJ2*tmp2;


            }
        }
      }

      barrier(localMemFence);

      // transform back in b
      for(int k=0;k<p_gjNq;++k;inner1){
        for(int i=0;i<p_gjNq;++i;inner0){
          occaUnroll(p_gjNq)
            for(int j=0;j<p_gjNq;++j)
              r_q[j] = s_q[k][j][i];

          //	occaUnroll(p_Nq)
          //	for(int b=0;b<p_Nq;++b){
          occaUnroll(p_halfI)
            for(int b=0;b<p_halfI;++b){
              dfloat tmp = 0;
              dfloat tmp2 = 0;
              occaUnroll(p_halfI)
                for(int j=0;j<p_halfI;++j){
                  //be careful with middle values
                  dfloat tmpI = s_I[j][b];
                  dfloat tmpI2 = s_I[j][p_Nq-1-b];
                  tmp += tmpI*r_q[j] ;
                  tmp2 += tmpI*r_q[p_gjNq-1-j];
                  //+ tmpI2*r_q[];

                  if ((p_gjNq%2 == 0)|| (j!=(p_halfI-1)))
                  {
                    tmp += tmpI2*r_q[p_gjNq-1-j];
                    tmp2 += tmpI2*r_q[j];

                  }

                }
              s_q[k][b][i] = tmp; // ok since only this thread
              s_q[k][p_Nq-1-b][i] = tmp2;


            }
        }
        }

        barrier(localMemFence);

        // transform back in a
        for(int k=0;k<p_gjNq;++k;inner1){
          for(int b=0;b<p_gjNq;++b;inner0){
            if(b<p_Nq){
              occaUnroll(p_gjNq)
                for(int i=0;i<p_gjNq;++i)
                  r_q[i] = s_q[k][b][i];

              occaUnroll(p_halfI)
                for(int a=0;a<p_halfI;++a){
                  dfloat tmp = 0;
                  dfloat tmp2 = 0;
                  occaUnroll(p_halfI)
                    for(int i=0;i<p_halfI;++i){
                      dfloat tmpI = s_I[i][a];
                      dfloat tmpI2 = s_I[i][p_Nq-1-a];
                      tmp += tmpI*r_q[i] ;
                      tmp2 += tmpI*r_q[p_gjNq-1-i];
                      if ((p_gjNq%2 == 0)|| (i!=(p_halfI-1)))
                      {
                        tmp += tmpI2*r_q[p_gjNq-1-i];
                        tmp2 += tmpI2*r_q[i];

                      }


                    }
                  s_q[k][b][a] = tmp; // ok since only this thread
                  s_q[k][b][p_Nq-1-a] = tmp2;


                }
            }
          }
        }

        barrier(localMemFence);

        // transform back in c
        for(int b=0;b<p_gjNq;++b;inner1){
          for(int a=0;a<p_gjNq;++a;inner0){
            if(a<p_Nq && b<p_Nq){
              occaUnroll(p_gjNq)
                for(int k=0;k<p_gjNq;++k)
                  r_q[k] = s_q[k][b][a];

              occaUnroll(p_halfI)
                for(int c=0;c<p_halfI;++c){
                  dfloat tmp = 0;
                  dfloat tmp2 = 0;
                  occaUnroll(p_halfI)
                    for(int k=0;k<p_halfI;++k){
                      dfloat tmpI = s_I[k][c];
                      dfloat tmpI2 = s_I[k][p_Nq-1-c];
                      tmp += tmpI*r_q[k] ;
                      tmp2 += tmpI*r_q[p_gjNq-1-k];

                      if ((p_gjNq%2 == 0)|| (k!=(p_halfI-1)))
                      {
                        tmp += tmpI2*r_q[p_gjNq-1-k];
                        tmp2 += tmpI2*r_q[k];

                      }
                    }

                  Mq[emap*p_Np+c*p_Nq2+b*p_Nq+a] = tmp;
                  Mq[emap*p_Np+(p_Nq-1-c)*p_Nq2+b*p_Nq+a] = tmp2;
                }
            }
          }
        }
      }
    }


    //end of redShmem

    //v3 is the same as v1 just the loop is not unrolled --- we look at the effects of unrolling


    kernel void massPartialAxHex3D_v3(const int Nelements,
        const int * restrict elementList,
        const dfloat * restrict gjGeo,
        const dfloat * restrict gjI,
        const dfloat * restrict q,
        dfloat * restrict Mq){


      for(int e=0;e<Nelements;++e;outer0){

        shared dfloat s_I[p_gjNq][p_Nq+p_gllPad];

        exclusive dfloat r_q[p_gjNq];
        exclusive dfloat r_Mq[p_Nq];

        shared dfloat s_q1[p_gjNq][p_gjNq+p_gjPad];
        shared dfloat s_q2[p_gjNq][p_gjNq+p_gjPad];

        exclusive int emap;

        // prefetch D and I matrices and zero register storage
        for(int b=0;b<p_gjNq;++b;inner1){
          for(int a=0;a<p_gjNq;++a;inner0){

            emap = elementList[e];

            if(a<p_Nq)
              s_I[b][a] = gjI[a+p_Nq*b];

            occaUnroll(p_Nq)
              //		for(int c=0;c<p_Nq;++c)
              //		r_Mq[c] = q[emap*p_Np+c*p_Nq2+b*p_Nq+a];
              for(int c=0;c<p_Nq;++c){
                if(a<p_Nq && b<p_Nq){
                  r_Mq[c] = q[emap*p_Np+c*p_Nq2+b*p_Nq+a];
                }
                else {
                  r_Mq[c] = 0.0f;
                }
              }

          }
        }

        barrier(localMemFence);

        for(int b=0;b<p_gjNq;++b;inner1){
          for(int a=0;a<p_gjNq;++a;inner0){
            if(a<p_Nq && b<p_Nq){

              occaUnroll(p_gjNq)
                for(int k=0;k<p_gjNq;++k){
                  dfloat tmp = 0;
                  occaUnroll(p_Nq)
                    for(int c=0;c<p_Nq;++c){
                      tmp += s_I[k][c]*r_Mq[c];
                    }
                  r_q[k] = tmp;
                }

              occaUnroll(p_Nq)
                for(int c=0;c<p_Nq;++c){
                  r_Mq[c] = 0;
                }
            }
          }
        }

        //	occaUnroll(p_gjNq)
        for(int k=0;k<p_gjNq;++k){

          barrier(localMemFence);

          for(int b=0;b<p_gjNq;++b;inner1){
            for(int a=0;a<p_gjNq;++a;inner0){
              if(a<p_Nq && b<p_Nq)
                s_q1[b][a] = r_q[k];
            }
          }

          barrier(localMemFence);

          for(int b=0;b<p_gjNq;++b;inner1){
            for(int i=0;i<p_gjNq;++i;inner0){
              if(b<p_Nq){
                dfloat tmp = 0;
                occaUnroll(p_Nq)
                  for(int a=0;a<p_Nq;++a){
                    tmp += s_I[i][a]*s_q1[b][a];
                  }
                s_q2[b][i] = tmp;
              }
            }
          }

          barrier(localMemFence);

          for(int j=0;j<p_gjNq;++j;inner1){
            for(int i=0;i<p_gjNq;++i;inner0){

              const dfloat r_GwJ = gjGeo[p_Nggeo*emap*p_gjNp+k*p_gjNq*p_gjNq+j*p_gjNq+i + p_GWJID*p_gjNp];

              dfloat tmp = 0;

              occaUnroll(p_Nq)
                for(int b=0;b<p_Nq;++b){
                  tmp += s_I[j][b]*s_q2[b][i];
                }

              s_q1[j][i] = r_GwJ*tmp;
            }
          }

          barrier(localMemFence);

          for(int b=0;b<p_gjNq;++b;inner1){
            for(int i=0;i<p_gjNq;++i;inner0){
              if(b<p_Nq){
                dfloat tmp = 0;

                occaUnroll(p_gjNq)
                  for(int j=0;j<p_gjNq;++j){
                    tmp += s_I[j][b]*s_q1[j][i];
                  }
                s_q2[b][i] = tmp;
              }
            }
          }

          barrier(localMemFence);

          for(int b=0;b<p_gjNq;++b;inner1){
            for(int a=0;a<p_gjNq;++a;inner0){
              if(a<p_Nq && b<p_Nq){

                dfloat tmp = 0;

                occaUnroll(p_gjNq)
                  for(int i=0;i<p_gjNq;++i){
                    tmp += s_I[i][a]*s_q2[b][i];
                  }

                occaUnroll(p_Nq)
                  for(int c=0;c<p_Nq;++c){
                    r_Mq[c] += s_I[k][c]*tmp;
                  }
              }
            }
          }
        }

        for(int b=0;b<p_gjNq;++b;inner1){
          for(int a=0;a<p_gjNq;++a;inner0){
            if(a<p_Nq && b<p_Nq){
              occaUnroll(p_Nq)
                for(int c=0;c<p_Nq;++c){
                  const int id = emap*p_Np + c*p_Nq2 + b*p_Nq + a;
                  Mq[id] = r_Mq[c];
                }
            }
          }
        }
      }
    }


    //REF1 the same as ref0 but with const mem


    kernel void massPartialAxHex3D_vRef1(const int Nelements,
        const int * restrict elementList,
        const dfloat * restrict gjGeo,
        const dfloat * restrict gjI,
        const dfloat * restrict q,
        dfloat * restrict Mq){


      for(int e=0;e<Nelements;++e;outer0){

        int Nq = p_gjNq-1;
        int Nq2 = Nq*p_Nq;
        int Np = Nq*p_Nq2;

        shared dfloat s_I[p_gjNq][p_gjNq];

        exclusive dfloat r_q[p_gjNq];
        exclusive dfloat r_Mq[p_gjNq];

        shared dfloat s_q1[p_gjNq][p_gjNq];
        shared dfloat s_q2[p_gjNq][p_gjNq];

        exclusive int emap;

        // prefetch D and I matrices and zero register storage
        for(int b=0;b<p_gjNq;++b;inner1){
          for(int a=0;a<p_gjNq;++a;inner0){

            emap = elementList[e];

            if(a<p_Nq)
              s_I[b][a] = gjI[a+p_Nq*b];

            for(int c=0;c<p_Nq;++c){
              //		r_q[c] = 0.0f;
              r_Mq[c] = q[emap*p_Np+c*p_Nq2+b*p_Nq+a];
            }
            //		for(int c=0;c<glNq;++c){
            //		r_q[c] = 0.0f;
            for(int c=0;c<p_Nq;++c){
              if(a<p_Nq && b<p_Nq){
                r_Mq[c] = q[emap*p_Np+c*p_Nq2+b*p_Nq+a];
              }
              else {
                r_Mq[c] = 0.0f;
              }
            }

          }
          }


          barrier(localMemFence);

          for(int b=0;b<p_gjNq;++b;inner1){
            for(int a=0;a<p_gjNq;++a;inner0){
              if(a<p_Nq && b<p_Nq){


                for(int k=0;k<p_gjNq;++k){
                  dfloat tmp = 0;

                  for(int c=0;c<p_Nq;++c){

                    tmp += s_I[k][c]*r_Mq[c];
                  }
                  r_q[k] = tmp;
                }


                for(int c=0;c<p_Nq;++c){
                  r_Mq[c] = 0;
                }
              }
            }
          }
          //error starts here
          for(int k=0;k<p_gjNq;++k){

            barrier(localMemFence);

            for(int b=0;b<p_gjNq;++b;inner1){
              for(int a=0;a<p_gjNq;++a;inner0){
                if(a<p_Nq && b<p_Nq)
                  s_q1[b][a] = r_q[k];
              }
            }

            barrier(localMemFence);

            for(int b=0;b<p_gjNq;++b;inner1){
              for(int i=0;i<p_gjNq;++i;inner0){
                if(b<p_Nq){
                  dfloat tmp = 0;

                  for(int a=0;a<p_Nq;++a){
                    tmp += s_I[i][a]*s_q1[b][a];
                  }
                  s_q2[b][i] = tmp;
                }
              }
            }

            barrier(localMemFence);

            for(int j=0;j<p_gjNq;++j;inner1){
              for(int i=0;i<p_gjNq;++i;inner0){

                dfloat r_GwJ = gjGeo[p_Nggeo*emap*p_gjNp+k*p_gjNq*p_gjNq+j*p_gjNq+i + p_GWJID*p_gjNp];

                dfloat tmp = 0;

                for(int b=0;b<p_Nq;++b){
                  tmp += s_I[j][b]*s_q2[b][i];
                }

                s_q1[j][i] = r_GwJ*tmp;
              }
            }

            barrier(localMemFence);

            for(int b=0;b<p_gjNq;++b;inner1){
              for(int i=0;i<p_gjNq;++i;inner0){
                if(b<p_Nq){
                  dfloat tmp = 0;


                  for(int j=0;j<p_gjNq;++j){
                    tmp += s_I[j][b]*s_q1[j][i];
                  }
                  s_q2[b][i] = tmp;
                }
              }
            }

            barrier(localMemFence);

            for(int b=0;b<p_gjNq;++b;inner1){
              for(int a=0;a<p_gjNq;++a;inner0){
                if(a<p_Nq && b<p_Nq){

                  dfloat tmp = 0;
                  for(int i=0;i<p_gjNq;++i){
                    tmp += s_I[i][a]*s_q2[b][i];
                  }
                  for(int c=0;c<p_Nq;++c){
                    r_Mq[c] += s_I[k][c]*tmp;
                  }
                }
              }
            }
          }

          for(int b=0;b<p_gjNq;++b;inner1){
            for(int a=0;a<p_gjNq;++a;inner0){
              if(a<p_Nq && b<p_Nq){
                for(int c=0;c<p_Nq;++c){
                  const int id = emap*p_Np + c*p_Nq2 + b*p_Nq + a;
                  Mq[id] = r_Mq[c];
                }
              }
            }
          }
        }
      }
