/*

The MIT License (MIT)

Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

kernel void ellipticAxTri2D_v1(
    const int Nelements,
    const int   * restrict elementList,
    const dfloat * restrict ggeo,
    const char4  * restrict IndT,
    const dfloat * restrict Srr,
    const dfloat * restrict Srs,
    const dfloat * restrict Sss,
    const dfloat * restrict MM,
    const dfloat lambda,
    const dfloat * restrict q,
    dfloat * restrict Aq){
  // needs p_NnodesV (nodes per thread) and p_NblockV (elements per chunk) defined
  for(int eo=0;eo<Nelements;eo+=p_NnodesV*p_NblockV;outer0){
    shared dfloat s_q[p_NnodesV][p_NblockV][p_Np];
    shared dfloat s_ggeo[p_NnodesV][p_NblockV][p_Nggeo];

    for(int es=0;es<p_NblockV;++es;inner1){
      for(int n=0;n<p_Np;++n;inner0){

        // coalesced read of ggeo 
        int t = n + p_Np*es;
        while(t<p_NnodesV*p_NblockV*p_Nggeo && eo*p_Nggeo+t<Nelements*p_Nggeo){          
          s_ggeo[0][0][t] = ggeo[eo*p_Nggeo+t];
          t += p_Np*p_NblockV;
        }

        occaUnroll(p_NnodesV)
          for(int et=0;et<p_NnodesV;++et){
            const int e = eo + es + et*p_NblockV;
            if(e<Nelements){
              //prefetch q
              const int id = n + e*p_Np;
              s_q[et][es][n] = q[id];
            }
          }
      }
    }

    barrier(localMemFence);

    for(int es=0;es<p_NblockV;++es;inner1){
      for(int n=0;n<p_Np;++n;inner0){

        // do this part irrespective of e
        dfloat r_qrr[p_NnodesV];
        dfloat r_qrs[p_NnodesV];
        dfloat r_qss[p_NnodesV];

        occaUnroll(p_NnodesV)
          for(int et=0;et<p_NnodesV;++et){
            r_qrr[et] = 0;
            r_qrs[et] = 0;
            r_qss[et] = 0;
          }


        occaUnroll(p_SparseNnzPerRow)
          for (int k=0;k<p_SparseNnzPerRow;k++) {
            const char4 Indn = IndT[n + p_Np*k]; 
            const char *pt_Indn = (char*) &Indn;

            int idk;

            occaUnroll(4) //seems inefficient
              for (int k2=0; k2<4; k2++){
                idk = pt_Indn[k2];

                if(!idk) break;

                --idk;

                // assume Srr, Srs, Sss are stored as a row-major matrix with maxNnzPerRow rows and Np columns
                const int id = n + (k2+4*k)*p_Np;
                // 3 loads from global (probably L1 for NnodesV*6 flops)
                const dfloat Srr_nk = Srr[id];
                const dfloat Srs_nk = Srs[id];
                const dfloat Sss_nk = Sss[id];

                occaUnroll(p_NnodesV)
                  for(int et=0;et<p_NnodesV;++et){
                    const int e = eo + es + et*p_NblockV;
                    // fetch from shared (for reuse three times)
                    // 6 flops per 8 bytes
                    const dfloat r_qk = s_q[et][es][idk];

                    r_qrr[et] += Srr_nk*r_qk;
                    r_qrs[et] += Srs_nk*r_qk;
                    r_qss[et] += Sss_nk*r_qk;
                  }
              }
            if(!idk) break;
          }

        // this part has to check for element index validity
        occaUnroll(p_NnodesV)
          for(int et=0;et<p_NnodesV;++et){
            const int e = eo + es + et*p_NblockV;

            if (e<Nelements) {
              dfloat res1 = s_ggeo[et][es][p_G00ID]*r_qrr[et];
              res1 += s_ggeo[et][es][p_G01ID]*r_qrs[et];
              res1 += s_ggeo[et][es][p_G11ID]*r_qss[et];

              const int id = n + e*p_Np;
              Aq[id] = res1;
            }
          }
      }
    }
  }
}
/*
   kernel void ellipticPartialAxTri2D_v2(const int Nelements,
   const int   * restrict elementList,
   const dfloat * restrict ggeo,
   const dfloat * restrict Srr,
   const dfloat * restrict Srs,
   const char4  * restrict IndT,
   const dfloat * restrict Sss,
   const dfloat * restrict MM,
   const dfloat lambda,
   const dfloat * restrict q,
   dfloat * restrict Aq){

// needs p_NnodesV (nodes per thread) and p_NblockV (elements per chunk) defined
for(int eo=0;eo<Nelements;eo+=p_NnodesV*p_NblockV;outer0){
shared dfloat s_q[p_NnodesV][p_NblockV][p_Np];
shared dfloat s_ggeo[p_NnodesV][p_NblockV][p_Nggeo];

for(int es=0;es<p_NblockV;++es;inner1){
for(int n=0;n<p_Np;++n;inner0){

// coalesced read of ggeo 
int t = n + p_Np*es;
while(t<p_NnodesV*p_NblockV*p_Nggeo && eo*p_Nggeo+t<Nelements*p_Nggeo){          
s_ggeo[0][0][t] = ggeo[eo*p_Nggeo+t];
t += p_Np*p_NblockV;
}

occaUnroll(p_NnodesV)
for(int et=0;et<p_NnodesV;++et){
const int e = eo + es + et*p_NblockV;
if(e<Nelements){
//prefetch q
const int id = n + e*p_Np;
s_q[et][es][n] = q[id];
}
}
}
}

barrier(localMemFence);

for(int es=0;es<p_NblockV;++es;inner1){
for(int n=0;n<p_Np;++n;inner0){

// do this part irrespective of e
dfloat r_Laq[p_NnodesV];

occaUnroll(p_NnodesV)
for(int et=0;et<p_NnodesV;++et){
r_Laq[et] = 0;
}


//occaUnroll(p_SparseNnzPerRow)
for (int k=0;k<p_SparseNnzPerRow;k++) {
const char4 Indn = IndT[n + p_Np*k]; 
const char *pt_Indn = (char*) &Indn;

int idk;

//occaUnroll(4) //seems inefficient
for (int k2=0; k2<4; k2++){
idk = pt_Indn[k2];

if(!idk) break;

--idk;

// assume Srr, Srs, Sss are stored as a row-major matrix with maxNnzPerRow rows and Np columns
const int id = n + (k2+4*k)*p_Np;
// 3 loads from global (probably L1 for NnodesV*6 flops)
const dfloat Srr_nk = Srr[id];
const dfloat Srs_nk = Srs[id];
const dfloat Sss_nk = Sss[id];

occaUnroll(p_NnodesV)
  for(int et=0;et<p_NnodesV;++et){
    const int e = eo + es + et*p_NblockV;
    // fetch from shared (for reuse three times)
    // 6 flops per 8 bytes
    const dfloat r_qk = s_q[et][es][idk];
    dfloat r_lap = s_ggeo[et][es][p_G00ID]*Srr_nk;
    r_lap +=  s_ggeo[et][es][p_G01ID]*Srs_nk;
    r_lap +=  s_ggeo[et][es][p_G11ID]*Sss_nk;
    r_Laq[et] += r_lap*r_qk;
  }
}
if(!idk) break;
}

// this part has to check for element index validity
occaUnroll(p_NnodesV)
  for(int et=0;et<p_NnodesV;++et){
    const int e = eo + es + et*p_NblockV;

    if (e<Nelements) {


      const int id = n + e*p_Np;
      Aq[id] = r_Laq[et];
    }
  }
}
}
}
}
*/
/*
   kernel void ellipticAxPartialTri2D_v4(const int Nelements,
   const int   * restrict elementList,
   const dfloat * restrict ggeo,
   const dfloat2 * restrict Srr,
   const dfloat2 * restrict Srs,
   const char4  * restrict IndT,
   const dfloat2 * restrict Sss,
   const dfloat * restrict MM,
   const dfloat lambda,
   const dfloat * restrict q,
   dfloat * restrict Aq){

// needs p_NnodesV (nodes per thread) and p_NblockV (elements per chunk) defined
for(int eo=0;eo<Nelements;eo+=p_NnodesV*p_NblockV;outer0){
shared dfloat s_q[p_NnodesV][p_NblockV][p_Np];
shared dfloat s_ggeo[p_NnodesV][p_NblockV][p_Nggeo];

for(int es=0;es<p_NblockV;++es;inner1){
for(int n=0;n<p_Np;++n;inner0){

// coalesced read of ggeo 
int t = n + p_Np*es;
while(t<p_NnodesV*p_NblockV*p_Nggeo && eo*p_Nggeo+t<Nelements*p_Nggeo){          
s_ggeo[0][0][t] = ggeo[eo*p_Nggeo+t];
t += p_Np*p_NblockV;
}

occaUnroll(p_NnodesV)
for(int et=0;et<p_NnodesV;++et){
const int e = eo + es + et*p_NblockV;
if(e<Nelements){
//prefetch q
const int id = n + e*p_Np;
s_q[et][es][n] = q[id];
}
}
}
}

barrier(localMemFence);

for(int es=0;es<p_NblockV;++es;inner1){
for(int n=0;n<p_Np;++n;inner0){

// do this part irrespective of e
dfloat r_Laq[p_NnodesV];

occaUnroll(p_NnodesV)
for(int et=0;et<p_NnodesV;++et){
r_Laq[et] = 0;
}


//occaUnroll(p_SparseNnzPerRow)
for (int k=0;k<p_SparseNnzPerRow;k++) {
const char4 Indn = IndT[n + p_Np*k]; 

int id0 = Indn.x-1;
int id1 = Indn.y-1;
int id2 = Indn.z-1;
int id3 = Indn.w-1;

id0 = (id0<0) ? 0:id0;
id1 = (id1<0) ? 0:id1;
id2 = (id2<0) ? 0:id2;
id3 = (id3<0) ? 0:id3;

// assume Srr, Srs, Sss are stored as a row-major matrix with maxNnzPerRow rows and Np columns
const int id = n + (k*2)*p_Np;

// 3 loads from global (probably L1 for NnodesV*6 flops)
const dfloat2 Srr_nk1 = Srr[id];
const dfloat2 Srs_nk1 = Srs[id];
const dfloat2 Sss_nk1 = Sss[id];

const dfloat2 Srr_nk2 = Srr[id+p_Np];
const dfloat2 Srs_nk2 = Srs[id+p_Np];
const dfloat2 Sss_nk2 = Sss[id+p_Np];

occaUnroll(p_NnodesV)
  for(int et=0;et<p_NnodesV;++et){
    const dfloat G00 = s_ggeo[et][es][p_G00ID];
    const dfloat G01 = s_ggeo[et][es][p_G01ID];
    const dfloat G11 = s_ggeo[et][es][p_G11ID];

    const dfloat r_qk0 = s_q[et][es][id0];
    const dfloat r_qk1 = s_q[et][es][id1];
    const dfloat r_qk2 = s_q[et][es][id2];
    const dfloat r_qk3 = s_q[et][es][id3];

    dfloat r_lap0 = G00*Srr_nk1.x;
    dfloat r_lap1 = G00*Srr_nk1.y;
    dfloat r_lap2 = G00*Srr_nk2.x;
    dfloat r_lap3 = G00*Srr_nk2.y;

    r_lap0 +=  G01*Srs_nk1.x;
    r_lap1 +=  G01*Srs_nk1.y;
    r_lap2 +=  G01*Srs_nk2.x;
    r_lap3 +=  G01*Srs_nk2.y;

    r_lap0 +=  G11*Sss_nk1.x;
    r_lap1 +=  G11*Sss_nk1.y;
    r_lap2 +=  G11*Sss_nk2.x;
    r_lap3 +=  G11*Sss_nk2.y;

    r_Laq[et] += r_lap0*r_qk0;
    r_Laq[et] += r_lap1*r_qk1;
    r_Laq[et] += r_lap2*r_qk2;
    r_Laq[et] += r_lap3*r_qk3;

  }
}


// this part has to check for element index validity
occaUnroll(p_NnodesV)
  for(int et=0;et<p_NnodesV;++et){
    const int e = eo + es + et*p_NblockV;

    if (e<Nelements) {


      const int id = n + e*p_Np;
      Aq[id] = r_Laq[et];
    }
  }
}
}
}
}

*/
kernel void ellipticAxTri2D_v0(
    const int Nelements,
    const int   * restrict elementList,
    const dfloat * restrict ggeo,
    const char4  * restrict IndT,
    const dfloat4 * restrict Srr,
    const dfloat4 * restrict Srs,
    const dfloat4 * restrict Sss,
    const dfloat * restrict MM,
    const dfloat lambda,
    const dfloat * restrict q,
    dfloat * restrict Aq){
  // needs p_NnodesV (nodes per thread) and p_NblockV (elements per chunk) defined
  for(int eo=0;eo<Nelements;eo+=p_NnodesV*p_NblockV;outer0){
    shared dfloat s_q[p_NnodesV][p_NblockV][p_Np];
    shared dfloat s_ggeo[p_NnodesV][p_NblockV][p_Nggeo];

    for(int es=0;es<p_NblockV;++es;inner1){
      for(int n=0;n<p_Np;++n;inner0){

        // coalesced read of ggeo 
        int t = n + p_Np*es;
        while(t<p_NnodesV*p_NblockV*p_Nggeo && eo*p_Nggeo+t<Nelements*p_Nggeo){          
          s_ggeo[0][0][t] = ggeo[eo*p_Nggeo+t];
          t += p_Np*p_NblockV;
        }

        occaUnroll(p_NnodesV)
          for(int et=0;et<p_NnodesV;++et){
            const int e = eo + es + et*p_NblockV;
            if(e<Nelements){
              //prefetch q
              const int id = n + e*p_Np;
              s_q[et][es][n] = q[id];
            }
          }
      }
    }

    barrier(localMemFence);

    for(int es=0;es<p_NblockV;++es;inner1){
      for(int n=0;n<p_Np;++n;inner0){

        // do this part irrespective of e
        dfloat r_Laq[p_NnodesV];

        occaUnroll(p_NnodesV)
          for(int et=0;et<p_NnodesV;++et){
            r_Laq[et] = 0;
          }


        //  occaUnroll(p_SparseNnzPerRow)
        for (int k=0;k<p_SparseNnzPerRow/4;k++) {
          const char4 Indn = IndT[n + p_Np*k]; 

          int id0 = Indn.x-1;
          int id1 = Indn.y-1;
          int id2 = Indn.z-1;
          int id3 = Indn.w-1;

          id0 = (id0<0) ? 0:id0;
          id1 = (id1<0) ? 0:id1;
          id2 = (id2<0) ? 0:id2;
          id3 = (id3<0) ? 0:id3;

          // assume Srr, Srs, Sss are stored as a row-major matrix with maxNnzPerRow rows and Np columns
          const int id = n + k*p_Np;

          // 3 loads from global (probably L1 for NnodesV*6 flops)
          const dfloat4 Srr_nk = Srr[id];
          const dfloat4 Srs_nk = Srs[id];
          const dfloat4 Sss_nk = Sss[id];

          occaUnroll(p_NnodesV)
            for(int et=0;et<p_NnodesV;++et){
              const dfloat G00 = s_ggeo[et][es][p_G00ID];
              const dfloat G01 = s_ggeo[et][es][p_G01ID];
              const dfloat G11 = s_ggeo[et][es][p_G11ID];

              // 4 flops
              dfloat4 r_lap = G00*Srr_nk;

              // 4x2 flops
              r_lap += G01*Srs_nk;

              // 4x2 flops
              r_lap += G11*Sss_nk;

              // 4x2 flops
              r_Laq[et] += r_lap.x*s_q[et][es][id0];
              r_Laq[et] += r_lap.y*s_q[et][es][id1];
              r_Laq[et] += r_lap.z*s_q[et][es][id2];
              r_Laq[et] += r_lap.w*s_q[et][es][id3];
              ++et;
            }
        }


        // this part has to check for element index validity
        occaUnroll(p_NnodesV)
          for(int et=0;et<p_NnodesV;++et){
            const int e = eo + es + et*p_NblockV;

            if (e<Nelements) {


              const int id = n + e*p_Np;
              Aq[id] = r_Laq[et];
            }
          }
      }
    }
  }
}

/*
   kernel void ellipticPartialAxTri2D_v0(const int Nelements,
   const int   * restrict elementList,
   const dfloat * restrict ggeo,
   const dfloat * restrict Srr,
   const dfloat * restrict Srs,
   const char4  * restrict IndT,
   const dfloat * restrict Sss,
   const dfloat * restrict MM,
   const dfloat lambda,
   const dfloat * restrict q,
   dfloat * restrict Aq){

// needs p_NnodesV (nodes per thread) and p_NblockV (elements per chunk) defined

for(int eo=0;eo<Nelements;eo+=p_NnodesV*p_NblockV;outer0){
shared int s_elements[p_NnodesV][p_NblockV];
shared dfloat s_q[p_NnodesV][p_NblockV][p_Np];

for(int es=0;es<p_NblockV;++es;inner1){
for(int n=0;n<p_Np;++n;inner0){
int t = n + es*p_Np;
while(t<p_NblockV*p_NnodesV){
const int e = eo + t;
if(e<Nelements)
s_elements[0][t] = elementList[e];
t+=p_Np*p_NblockV;
}
}
}

barrier(localMemFence);

for(int es=0;es<p_NblockV;++es;inner1){
for(int n=0;n<p_Np;++n;inner0){

occaUnroll(p_NnodesV)
for(int et=0;et<p_NnodesV;++et){
const int e = eo + es + et*p_NblockV;
if(e<Nelements){
//prefetch q
const int element = s_elements[et][es];
const int id = n + element*p_Np;
s_q[et][es][n] = q[id];
}
}
}
}

barrier(localMemFence);

for(int es=0;es<p_NblockV;++es;inner1){
for(int n=0;n<p_Np;++n;inner0){

// do this part irrespective of e
dfloat r_qrr[p_NnodesV];
dfloat r_qrs[p_NnodesV];
dfloat r_qss[p_NnodesV];

occaUnroll(p_NnodesV)
for(int et=0;et<p_NnodesV;++et){
r_qrr[et] = 0;
r_qrs[et] = 0;
r_qss[et] = 0;
}


occaUnroll(p_maxNnzPerRow/4)
for (int k=0;k<( ((int)p_maxNnzPerRow/4));k++) {
const char4 Indn = IndT[n + p_Np*k]; 
const char *pt_Indn = (char*) &Indn;

occaUnroll(4) //seems inefficient
  for (int k2=0; k2<4; k2++){
    int idk = pt_Indn[k2];

    if(!idk) break;

    --idk;

    // assume Srr, Srs, Sss are stored as a row-major matrix with maxNnzPerRow rows and Np columns
    const int id = n + (k2+4*k)*p_Np;
    // 3 loads from global (probably L1 for NnodesV*6 flops)
    const dfloat Srr_nk = Srr[id];
    const dfloat Srs_nk = Srs[id];
    const dfloat Sss_nk = Sss[id];

    occaUnroll(p_NnodesV)
      for(int et=0;et<p_NnodesV;++et){
        const int e = eo + es + et*p_NblockV;
        // fetch from shared (for reuse three times)
        // 6 flops per 8 bytes
        const dfloat r_qk = s_q[et][es][idk];

        r_qrr[et] += Srr_nk*r_qk;
        r_qrs[et] += Srs_nk*r_qk;
        r_qss[et] += Sss_nk*r_qk;
      }
  }
}

// this part has to check for element index validity
occaUnroll(p_NnodesV)
  for(int et=0;et<p_NnodesV;++et){
    const int e = eo + es + et*p_NblockV;

    if (e<Nelements) {
      const int element = s_elements[et][es];

      const int gid = element*p_Nggeo;
      const dfloat Grr = ggeo[gid + p_G00ID];
      const dfloat Grs = ggeo[gid + p_G01ID];
      const dfloat Gss = ggeo[gid + p_G11ID];

      dfloat res1 = Grr*r_qrr[et];
      res1 += Grs*r_qrs[et];
      res1 += Gss*r_qss[et];

      const int id = n + element*p_Np;
      Aq[id] = res1;
    }
  }
}
}
}
}
*/
//KS CODE STARTS
kernel void ellipticAxTri2D_v2(const int Nelements,
    const int   * restrict elementList,
    const dfloat * restrict ggeo,
    const char4  * restrict IndT,
    const dfloat * restrict Srr,
    const dfloat * restrict Srs,
    const dfloat * restrict Sss,
    const dfloat * restrict MM,
    const dfloat lambda,
    const dfloat * restrict q,
    dfloat * restrict Aq){

  // needs p_NnodesV (nodes per thread) and p_NblockV (elements per chunk) defined

  for(int eo=0;eo<Nelements;eo+=p_NnodesV*p_NblockV;outer0){
    shared int s_elements[p_NnodesV][p_NblockV];
    shared dfloat s_q[p_NnodesV][p_NblockV][p_Np];

    for(int es=0;es<p_NblockV;++es;inner1){
      for(int n=0;n<p_Np;++n;inner0){
        int t = n + es*p_Np;
        while(t<p_NblockV*p_NnodesV){
          const int e = eo + t;
          if(e<Nelements)
            s_elements[0][t] = elementList[e];
          t+=p_Np*p_NblockV;
        }
      }
    }

    barrier(localMemFence);

    for(int es=0;es<p_NblockV;++es;inner1){
      for(int n=0;n<p_Np;++n;inner0){

        occaUnroll(p_NnodesV)
          for(int et=0;et<p_NnodesV;++et){
            const int e = eo + es + et*p_NblockV;
            if(e<Nelements){
              //prefetch q
              const int element = s_elements[et][es];
              const int id = n + element*p_Np;
              s_q[et][es][n] = q[id];
            }
          }
      }
    }

    barrier(localMemFence);

    for(int es=0;es<p_NblockV;++es;inner1){
      for(int n=0;n<p_Np;++n;inner0){

        // do this part irrespective of e
        dfloat r_qrr[p_NnodesV];
        dfloat r_qrs[p_NnodesV];
        dfloat r_qss[p_NnodesV];

        occaUnroll(p_NnodesV)
          for(int et=0;et<p_NnodesV;++et){
            r_qrr[et] = 0;
            r_qrs[et] = 0;
            r_qss[et] = 0;
          }


        occaUnroll(p_SparseNnzPerRow/4)
          for (int k=0;k<p_SparseNnzPerRow/4;k++) {
            const char4 Indn = IndT[n + p_Np*k]; 
            const char *pt_Indn = (char*) &Indn;

            occaUnroll(4) //seems inefficient
              for (int k2=0; k2<4; k2++){
                int idk = pt_Indn[k2];

                //printf("thread %d, idk = %d\n", n,idk);

                if(!idk) break;

                --idk;

                // assume Srr, Srs, Sss are stored as a row-major matrix with maxNnzPerRow rows and Np columns
                const int id = n + (k2+4*k)*p_Np;
                // 3 loads from global (probably L1 for NnodesV*6 flops)
                const dfloat Srr_nk = Srr[id];
                const dfloat Srs_nk = Srs[id];
                const dfloat Sss_nk = Sss[id];

                //printf("thread %d, idk = %d, Srr = %f, Srs = %f, Sss = %f \n", n,idk, Srr_nk,Srs_nk,Sss_nk);

                occaUnroll(p_NnodesV)
                  for(int et=0;et<p_NnodesV;++et){
                    const int e = eo + es + et*p_NblockV;
                    // fetch from shared (for reuse three times)
                    // 6 flops per 8 bytes
                    const dfloat r_qk = s_q[et][es][idk];

                    r_qrr[et] += Srr_nk*r_qk;
                    r_qrs[et] += Srs_nk*r_qk;
                    r_qss[et] += Sss_nk*r_qk;
                  }
              }
          }

        // this part has to check for element index validity
        occaUnroll(p_NnodesV)
          for(int et=0;et<p_NnodesV;++et){
            const int e = eo + es + et*p_NblockV;

            if (e<Nelements) {
              const int element = s_elements[et][es];

              const int gid = element*p_Nggeo;
              const dfloat Grr = ggeo[gid + p_G00ID];
              const dfloat Grs = ggeo[gid + p_G01ID];
              const dfloat Gss = ggeo[gid + p_G11ID];

              dfloat res1 = Grr*r_qrr[et];
              res1 += Grs*r_qrs[et];
              res1 += Gss*r_qss[et];

              const int id = n + element*p_Np;
              Aq[id] = res1;
            }
          }
      }
    }
  }
}



kernel void ellipticAxTri2D_v3(const int Nelements,
    const int   * restrict elementList,
    const dfloat * restrict ggeo,
    const char4  * restrict IndT,
    const dfloat * restrict Srr,
    const dfloat * restrict Srs,
    const dfloat * restrict Sss,
    const dfloat * restrict MM,
    const dfloat lambda,
    const dfloat * restrict q,
    dfloat * restrict Aq){

  // needs p_NnodesV (nodes per thread) and p_NblockV (elements per chunk) defined

  for(int eo=0;eo<Nelements;eo+=p_NnodesV*p_NblockV;outer0){
    shared int s_elements[p_NnodesV][p_NblockV];
    shared dfloat s_q[p_NnodesV][p_NblockV][p_Np];

    for(int es=0;es<p_NblockV;++es;inner1){
      for(int n=0;n<p_Np;++n;inner0){
        int t = n + es*p_Np;
        while(t<p_NblockV*p_NnodesV){
          const int e = eo + t;
          if(e<Nelements)
            s_elements[0][t] = elementList[e];
          t+=p_Np*p_NblockV;
        }
      }
    }

    barrier(localMemFence);

    for(int es=0;es<p_NblockV;++es;inner1){
      for(int n=0;n<p_Np;++n;inner0){

        occaUnroll(p_NnodesV)
          for(int et=0;et<p_NnodesV;++et){
            const int e = eo + es + et*p_NblockV;
            if(e<Nelements){
              //prefetch q
              const int element = s_elements[et][es];
              const int id = n + element*p_Np;
              s_q[et][es][n] = q[id];
            }
          }
      }
    }

    barrier(localMemFence);

    for(int es=0;es<p_NblockV;++es;inner1){
      for(int n=0;n<p_Np;++n;inner0){

        // do this part irrespective of e
        dfloat r_qrr[p_NnodesV];
        dfloat r_qrs[p_NnodesV];
        dfloat r_qss[p_NnodesV];

        occaUnroll(p_NnodesV)
          for(int et=0;et<p_NnodesV;++et){
            r_qrr[et] = 0;
            r_qrs[et] = 0;
            r_qss[et] = 0;
          }


        occaUnroll(p_SparseNnzPerRow/4)
          for (int k=0;k<( ((int)p_SparseNnzPerRow/4));k++) {
            const char4 Indn = IndT[n + p_Np*k]; 
            const char *pt_Indn = (char*) &Indn;

            occaUnroll(4) //seems inefficient
              for (int k2=0; k2<4; k2++){
                int idk = pt_Indn[k2];


                if (idk){     
                  --idk;

                  // assume Srr, Srs, Sss are stored as a row-major matrix with maxNnzPerRow rows and Np columns
                  const int id = n + (k2+4*k)*p_Np;
                  // 3 loads from global (probably L1 for NnodesV*6 flops)
                  const dfloat Srr_nk = Srr[id];
                  const dfloat Srs_nk = Srs[id];
                  const dfloat Sss_nk = Sss[id];


                  occaUnroll(p_NnodesV)
                    for(int et=0;et<p_NnodesV;++et){
                      const int e = eo + es + et*p_NblockV;
                      // fetch from shared (for reuse three times)
                      // 6 flops per 8 bytes
                      const dfloat r_qk = s_q[et][es][idk];

                      r_qrr[et] += Srr_nk*r_qk;
                      r_qrs[et] += Srs_nk*r_qk;
                      r_qss[et] += Sss_nk*r_qk;
                    }
                }
              }
          }

        // this part has to check for element index validity
        occaUnroll(p_NnodesV)
          for(int et=0;et<p_NnodesV;++et){
            const int e = eo + es + et*p_NblockV;

            if (e<Nelements) {
              const int element = s_elements[et][es];

              const int gid = element*p_Nggeo;
              const dfloat Grr = ggeo[gid + p_G00ID];
              const dfloat Grs = ggeo[gid + p_G01ID];
              const dfloat Gss = ggeo[gid + p_G11ID];


              const int id = n + element*p_Np;
              Aq[id] = Grr*r_qrr[et] +  Grs*r_qrs[et] + Gss*r_qss[et];
            }
          }
      }
    }
  }
}

kernel void ellipticAxTri2D_v4(
    const int Nelements,
    const int   * restrict elementList,
    const dfloat * restrict ggeo,
    const char4  * restrict IndT,
    const dfloat * restrict Srr,
    const dfloat * restrict Srs,
    const dfloat * restrict Sss,
    const dfloat * restrict MM,
    const dfloat lambda,
    const dfloat * restrict q,
    dfloat * restrict Aq){
  // needs p_NnodesV (nodes per thread) and p_NblockV (elements per chunk) defined
  for(int eo=0;eo<Nelements;eo+=p_NnodesV*p_NblockV;outer0){
    shared dfloat s_q[p_NnodesV][p_NblockV][p_Np];
    shared dfloat s_ggeo[p_NnodesV][p_NblockV][p_Nggeo];

    for(int es=0;es<p_NblockV;++es;inner1){
      for(int n=0;n<p_Np;++n;inner0){

        // coalesced read of ggeo 
        int t = n + p_Np*es;
        while(t<p_NnodesV*p_NblockV*p_Nggeo && eo*p_Nggeo+t<Nelements*p_Nggeo){          
          s_ggeo[0][0][t] = ggeo[eo*p_Nggeo+t];
          t += p_Np*p_NblockV;
        }

        occaUnroll(p_NnodesV)
          for(int et=0;et<p_NnodesV;++et){
            const int e = eo + es + et*p_NblockV;
            if(e<Nelements){
              //prefetch q
              const int id = n + e*p_Np;
              s_q[et][es][n] = q[id];
            }
          }
      }
    }



    barrier(localMemFence);

    for(int es=0;es<p_NblockV;++es;inner1){
      for(int n=0;n<p_Np;++n;inner0){

        // do this part irrespective of e
        dfloat r_qrr[p_NnodesV];
        dfloat r_qrs[p_NnodesV];
        dfloat r_qss[p_NnodesV];

        occaUnroll(p_NnodesV)
          for(int et=0;et<p_NnodesV;++et){
            r_qrr[et] = 0;
            r_qrs[et] = 0;
            r_qss[et] = 0;
          }


        occaUnroll(p_SparseNnzPerRow/4)
          for (int k=0;k<p_SparseNnzPerRow/4;k++) {
            const char4 Indn = IndT[n + p_Np*k]; 
            const char *pt_Indn = (char*) &Indn;
            int idk;

            occaUnroll(4) //seems inefficient
              for (int k2=0; k2<4; k2++){
                idk = pt_Indn[k2];

                //if(!idk) break;
                if (idk){	
                  --idk;
                  // assume Srr, Srs, Sss are stored as a row-major matrix with maxNnzPerRow rows and Np columns
                  const int id = n + (k2+4*k)*p_Np;
                  // 3 loads from global (probably L1 for NnodesV*6 flops)
                  const dfloat Srr_nk = Srr[id];
                  const dfloat Srs_nk = Srs[id];
                  const dfloat Sss_nk = Sss[id];

                  occaUnroll(p_NnodesV)
                    for(int et=0;et<p_NnodesV;++et){
                      const int e = eo + es + et*p_NblockV;
                      // fetch from shared (for reuse three times)
                      // 6 flops per 8 bytes
                      const dfloat r_qk = s_q[et][es][idk];

                      r_qrr[et] += Srr_nk*r_qk;
                      r_qrs[et] += Srs_nk*r_qk;
                      r_qss[et] += Sss_nk*r_qk;
                    }
                }//for k2
              }

            if(!idk) break;
          }//for k

        // this part has to check for element index validity
        occaUnroll(p_NnodesV)
          for(int et=0;et<p_NnodesV;++et){
            const int e = eo + es + et*p_NblockV;

            if (e<Nelements) {
              dfloat res1 = s_ggeo[et][es][p_G00ID]*r_qrr[et];
              dfloat res2 = s_ggeo[et][es][p_G01ID]*r_qrs[et];
              dfloat res3 = s_ggeo[et][es][p_G11ID]*r_qss[et];

              const int id = n + e*p_Np;
              Aq[id] = res1+res2+res3;
            }
          }
      }
    }
  }
}


//KS CODE ENDS
