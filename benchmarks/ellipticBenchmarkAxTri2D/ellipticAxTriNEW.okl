/*

The MIT License (MIT)

Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

kernel void ellipticAxNEWTri2D_v0(
    const int Nelements,
    const int   * restrict elementList,
    const dfloat * restrict ggeo,
    const char * restrict rowData,
    const dfloat * restrict Srra,
    const dfloat * restrict Srsa,
    const dfloat * restrict Sssa,
    const dfloat * restrict MM,
    const dfloat lambda,
    const dfloat * restrict q,
    dfloat * restrict Aq){
  // needs p_NnodesV (nodes per thread) and p_NblockV (elements per chunk) defined
  for(int eo=0;eo<Nelements;eo+=p_NnodesV*p_NblockV;outer0){
    shared dfloat s_q[p_NnodesV][p_NblockV][p_Np];
    shared dfloat s_ggeo[p_NnodesV][p_NblockV][p_Nggeo];
    //p_NnzTotal is AT MOST p_maxNNZ per row x Np
    //maxNnz per row is bigger than Np only for N=1 and N=2
    // DONT EVEN TRY
    // shared dfloat s_Srra[p_SparseNnzPerRow*p_Np];
    // shared dfloat s_Srsa[p_SparseNnzPerRow*p_Np];
    // shared dfloat s_Sssa[p_SparseNnzPerRow*p_Np];
    exclusive char r_rowData[6]; 
    for(int es=0;es<p_NblockV;++es;inner1){
      for(int n=0;n<p_Np;++n;inner0){
        r_rowData[0] = rowData[0*p_Np+n];
        r_rowData[1] = rowData[1*p_Np+n]; 
        r_rowData[2] = rowData[2*p_Np+n];
        r_rowData[3] = rowData[3*p_Np+n]; 
        r_rowData[4] = rowData[4*p_Np+n];
        r_rowData[5] = rowData[5*p_Np+n]; 

        //load operators to shared

        // coalesced read of ggeo 
        int t = n + p_Np*es;
        while(t<p_NnodesV*p_NblockV*p_Nggeo && eo*p_Nggeo+t<Nelements*p_Nggeo){          
          s_ggeo[0][0][t] = ggeo[eo*p_Nggeo+t];
          t += p_Np*p_NblockV;
        }

        occaUnroll(p_NnodesV)
          for(int et=0;et<p_NnodesV;++et){
            const int e = eo + es + et*p_NblockV;
            if(e<Nelements){

              const int id = n + e*p_Np;
              s_q[et][es][n] = q[id];
            } 
          } 
      }   
    } 
    barrier(localMemFence);

    for(int es=0;es<p_NblockV;++es;inner1){
      for(int n=0;n<p_Np;++n;inner0){

        // do this part irrespective of e
        dfloat r_qrr[p_NnodesV];
        dfloat r_qrs[p_NnodesV];
        dfloat r_qss[p_NnodesV];

        occaUnroll(p_NnodesV)
          for(int et=0;et<p_NnodesV;++et){
            r_qrr[et] = 0;
            r_qrs[et] = 0;
            r_qss[et] = 0;
          } 
        //here
        //int numberOfQuadruplets = (r_India[1]-r_India[0])/4;
        //first set
        for (int gr = 0; gr<6; gr+=2){
          int r = 0;
          for (int k=(int)r_rowData[gr]; k<(int)r_rowData[gr+1]+1; ++k){
            int idx =  n + r*p_Np;
            //if (es+eo == 0){
            //printf("GRPUP %d (%d %d)  k=%d idx = %d r= %d \n", gr,r_rowData[gr], r_rowData[gr+1], k, idx, r);
            //}          
            const dfloat Srr_nk = Srra[idx];
            const dfloat Srs_nk = Srsa[idx];
            const dfloat Sss_nk = Sssa[idx];
            occaUnroll(p_NnodesV)
              for(int et=0;et<p_NnodesV;++et){
                const int e = eo + es + et*p_NblockV;
                // fetch from shared (for reuse three times)
                // 6 flops per 8 bytes
                const dfloat r_qk = s_q[et][es][k-1];

                r_qrr[et] += Srr_nk*r_qk;
                r_qrs[et] += Srs_nk*r_qk;
                r_qss[et] += Sss_nk*r_qk;
              }
            r++;
          }         
        }

        // this part has to check for element index validity
        occaUnroll(p_NnodesV)
          for(int et=0;et<p_NnodesV;++et){
            const int e = eo + es + et*p_NblockV;
            if (e<Nelements) {

              dfloat res1 = s_ggeo[et][es][p_G00ID]*r_qrr[et];
              dfloat res2 = s_ggeo[et][es][p_G01ID]*r_qrs[et];
              dfloat res3 = s_ggeo[et][es][p_G11ID]*r_qss[et];

              const int id = n + e*p_Np;
              Aq[id] = res1+res2+res3;
            }
          }
      }
    }
  }
}

kernel void ellipticAxNEWTri2D_v1(
    const int Nelements,
    const int   * restrict elementList,
    const dfloat * restrict ggeo,
    const char4 * restrict rowData,
    const dfloat * restrict Srra,
    const dfloat * restrict Srsa,
    const dfloat * restrict Sssa,
    const dfloat * restrict MM,
    const dfloat lambda,
    const dfloat * restrict q,
    dfloat * restrict Aq){
  // needs p_NnodesV (nodes per thread) and p_NblockV (elements per chunk) defined
  for(int eo=0;eo<Nelements;eo+=p_NnodesV*p_NblockV;outer0){
    shared dfloat s_q[p_NnodesV][p_NblockV][p_Np];
    shared dfloat s_ggeo[p_NnodesV][p_NblockV][p_Nggeo];
    //p_NnzTotal is AT MOST p_maxNNZ per row x Np
    //maxNnz per row is bigger than Np only for N=1 and N=2
    // DONT EVEN TRY
    // shared dfloat s_Srra[p_SparseNnzPerRow*p_Np];
    // shared dfloat s_Srsa[p_SparseNnzPerRow*p_Np];
    // shared dfloat s_Sssa[p_SparseNnzPerRow*p_Np];

    //const char * pt_Indn = (char *) &Indn;
    exclusive char r_rowData[6]; 
    for(int es=0;es<p_NblockV;++es;inner1){
      for(int n=0;n<p_Np;++n;inner0){
        const char4 Indn1 = rowData[0*p_Np+n];
        const char4 Indn2 = rowData[1*p_Np+n];

        //if (es+eo==0){
        //printf("requesting %d and %d, I got %d %d %d %d %d %d \n ", n, p_Np+n, Indn1.x, Indn1.y, Indn1.z, Indn1.w, Indn2.x, Indn2.y);
        //}

        r_rowData[0] =  Indn1.x;
        r_rowData[1] = Indn1.y; 
        r_rowData[2] = Indn1.z;
        r_rowData[3] = Indn1.w; 
        r_rowData[4] = Indn2.x;
        r_rowData[5] = Indn2.y; 


        // coalesced read of ggeo 
        int t = n + p_Np*es;
        while(t<p_NnodesV*p_NblockV*p_Nggeo && eo*p_Nggeo+t<Nelements*p_Nggeo){          
          s_ggeo[0][0][t] = ggeo[eo*p_Nggeo+t];
          t += p_Np*p_NblockV;
        }

        occaUnroll(p_NnodesV)
          for(int et=0;et<p_NnodesV;++et){
            const int e = eo + es + et*p_NblockV;
            if(e<Nelements){

              const int id = n + e*p_Np;
              s_q[et][es][n] = q[id];
            } 
          } 
      }   
    } 
    barrier(localMemFence);

    for(int es=0;es<p_NblockV;++es;inner1){
      for(int n=0;n<p_Np;++n;inner0){

        // do this part irrespective of e
        dfloat r_qrr[p_NnodesV];
        dfloat r_qrs[p_NnodesV];
        dfloat r_qss[p_NnodesV];

        occaUnroll(p_NnodesV)
          for(int et=0;et<p_NnodesV;++et){
            r_qrr[et] = 0;
            r_qrs[et] = 0;
            r_qss[et] = 0;
          } 
        //here
        //int numberOfQuadruplets = (r_India[1]-r_India[0])/4;
        //first set
        occaUnroll(3)
          for (int gr = 0; gr<6; gr+=2){
            int r = 0;
            for (int k=(int)r_rowData[gr]; k<(int)r_rowData[gr+1]+1; ++k){
              int idx =  n + r*p_Np;
              //if (es+eo == 0){
              //printf("n = %d GROUP %d (%d %d)  k=%d idx = %d r= %d \n",n, gr/2,r_rowData[gr], r_rowData[gr+1], k, idx, r);
              //}          

              const dfloat Srr_nk = Srra[idx];
              const dfloat Srs_nk = Srsa[idx];
              const dfloat Sss_nk = Sssa[idx];
              occaUnroll(p_NnodesV)
                for(int et=0;et<p_NnodesV;++et){
                  const int e = eo + es + et*p_NblockV;
                  // fetch from shared (for reuse three times)
                  // 6 flops per 8 bytes
                  const dfloat r_qk = s_q[et][es][k-1];

                  r_qrr[et] += Srr_nk*r_qk;
                  r_qrs[et] += Srs_nk*r_qk;
                  r_qss[et] += Sss_nk*r_qk;
                }
              r++;
            }         
          }

        // this part has to check for element index validity
        occaUnroll(p_NnodesV)
          for(int et=0;et<p_NnodesV;++et){
            const int e = eo + es + et*p_NblockV;
            if (e<Nelements) {

              dfloat res1 = s_ggeo[et][es][p_G00ID]*r_qrr[et];
              dfloat res2 = s_ggeo[et][es][p_G01ID]*r_qrs[et];
              dfloat res3 = s_ggeo[et][es][p_G11ID]*r_qss[et];

              const int id = n + e*p_Np;
              Aq[id] = res1+res2+res3;
            }
          }
      }
    }
  }
}
kernel void ellipticAxNEWTri2D_v2(
    const int Nelements,
    const int   * restrict elementList,
    const dfloat * restrict ggeo,
    const char4 * restrict rowData,
    const dfloat * restrict Srra,
    const dfloat * restrict Srsa,
    const dfloat * restrict Sssa,
    const dfloat * restrict MM,
    const dfloat lambda,
    const dfloat * restrict q,
    dfloat * restrict Aq){
  // needs p_NnodesV (nodes per thread) and p_NblockV (elements per chunk) defined
  for(int eo=0;eo<Nelements;eo+=p_NnodesV*p_NblockV;outer0){
    shared dfloat s_q[p_NnodesV][p_NblockV][p_Np];
    shared dfloat s_ggeo[p_NnodesV][p_NblockV][p_Nggeo];
    //p_NnzTotal is AT MOST p_maxNNZ per row x Np
    //maxNnz per row is bigger than Np only for N=1 and N=2
    // DONT EVEN TRY
    shared dfloat s_Mat[p_SparseNnzPerRow*p_Np];
    // shared dfloat s_Srsa[p_SparseNnzPerRow*p_Np];
    // shared dfloat s_Sssa[p_SparseNnzPerRow*p_Np];

    //const char * pt_Indn = (char *) &Indn;
    exclusive char r_rowData[6]; 
    exclusive   dfloat r_qrr[p_NnodesV];
    exclusive dfloat r_qrs[p_NnodesV];
    exclusive dfloat r_qss[p_NnodesV];


    for(int es=0;es<p_NblockV;++es;inner1){
      for(int n=0;n<p_Np;++n;inner0){
        const char4 Indn1 = rowData[0*p_Np+n];
        const char4 Indn2 = rowData[1*p_Np+n];

        //if (es+eo==0){
        //printf("requesting %d and %d, I got %d %d %d %d %d %d \n ", n, p_Np+n, Indn1.x, Indn1.y, Indn1.z, Indn1.w, Indn2.x, Indn2.y);
        //}

        r_rowData[0] =  Indn1.x;
        r_rowData[1] = Indn1.y; 
        r_rowData[2] = Indn1.z;
        r_rowData[3] = Indn1.w; 
        r_rowData[4] = Indn2.x;
        r_rowData[5] = Indn2.y; 

        int    t = n;
        while (t<p_SparseNnzPerRow*p_Np){
          s_Mat[t] = Srra[t];
          t+= p_NblockV*p_Np;;
        }

        // coalesced read of ggeo 
        t = n + p_Np*es;
        while(t<p_NnodesV*p_NblockV*p_Nggeo && eo*p_Nggeo+t<Nelements*p_Nggeo){          
          s_ggeo[0][0][t] = ggeo[eo*p_Nggeo+t];
          t += p_Np*p_NblockV;
        }

        occaUnroll(p_NnodesV)
          for(int et=0;et<p_NnodesV;++et){
            const int e = eo + es + et*p_NblockV;
            if(e<Nelements){

              const int id = n + e*p_Np;
              s_q[et][es][n] = q[id];
            } 
          } 
      }   
    } 
    barrier(localMemFence);

    for(int es=0;es<p_NblockV;++es;inner1){
      for(int n=0;n<p_Np;++n;inner0){

        // do this part irrespective of e

        occaUnroll(p_NnodesV)
          for(int et=0;et<p_NnodesV;++et){
            r_qrr[et] = 0;
            r_qrs[et] = 0;
            r_qss[et] = 0;
          } 
        //here
        //int numberOfQuadruplets = (r_India[1]-r_India[0])/4;
        //first set
        occaUnroll(3)
          for (int gr = 0; gr<6; gr+=2){
            int r = 0;
            for (int k=(int)r_rowData[gr]; k<(int)r_rowData[gr+1]+1; ++k){
              int idx =  n + r*p_Np;
              //if (es+eo == 0){
              //printf("n = %d GROUP %d (%d %d)  k=%d idx = %d r= %d \n",n, gr/2,r_rowData[gr], r_rowData[gr+1], k, idx, r);
              //}          

              const dfloat Srr_nk = s_Mat[idx];
              //     const dfloat Srs_nk = Srsa[idx];
              //   const dfloat Sss_nk = Sssa[idx];
              occaUnroll(p_NnodesV)
                for(int et=0;et<p_NnodesV;++et){
                  const int e = eo + es + et*p_NblockV;
                  // fetch from shared (for reuse three times)
                  // 6 flops per 8 bytes
                  const dfloat r_qk =s_q[et][es][k-1];

                  //s_q[et][es][k-1];

                  r_qrr[et] += Srr_nk*r_qk;
                  //              r_qrs[et] += Srs_nk*r_qk;
                  //            r_qss[et] += Sss_nk*r_qk;
                }
              r++;
            }         
          }
      }
    }

    barrier(localMemFence);
    for(int es=0;es<p_NblockV;++es;inner1){
      for(int n=0;n<p_Np;++n;inner0){
        int    t = n;
        while (t<p_SparseNnzPerRow*p_Np){
          s_Mat[t] = Srsa[t];
          t+= p_NblockV*p_Np;        
        }
      }
    }
    barrier(localMemFence);

    for(int es=0;es<p_NblockV;++es;inner1){
      for(int n=0;n<p_Np;++n;inner0){

        occaUnroll(3)
          for (int gr = 0; gr<6; gr+=2){
            int r = 0;
            for (int k=(int)r_rowData[gr]; k<(int)r_rowData[gr+1]+1; ++k){
              int idx =  n + r*p_Np;

              const dfloat Srs_nk = s_Mat[idx];
              //     const dfloat Srs_nk = Srsa[idx];
              //   const dfloat Sss_nk = Sssa[idx];
              occaUnroll(p_NnodesV)
                for(int et=0;et<p_NnodesV;++et){
                  const int e = eo + es + et*p_NblockV;
                  const dfloat r_qk = s_q[et][es][k-1];

                  r_qrs[et] += Srs_nk*r_qk;
                }
              r++;
            }         
          }
      }
    }

    barrier(localMemFence);
    for(int es=0;es<p_NblockV;++es;inner1){
      for(int n=0;n<p_Np;++n;inner0){
        int    t = n;
        while (t<p_SparseNnzPerRow*p_Np){
          s_Mat[t] = Sssa[t];
          t+= p_NblockV*p_Np;        
        }
      }
    }
    barrier(localMemFence);
    for(int es=0;es<p_NblockV;++es;inner1){
      for(int n=0;n<p_Np;++n;inner0){

        occaUnroll(3)
          for (int gr = 0; gr<6; gr+=2){
            int r = 0;
            for (int k=(int)r_rowData[gr]; k<(int)r_rowData[gr+1]+1; ++k){
              int idx =  n + r*p_Np;

              const dfloat Sss_nk = s_Mat[idx];
              //     const dfloat Srs_nk = Srsa[idx];
              //   const dfloat Sss_nk = Sssa[idx];
              occaUnroll(p_NnodesV)
                for(int et=0;et<p_NnodesV;++et){
                  const int e = eo + es + et*p_NblockV;
                  const dfloat r_qk = s_q[et][es][k-1];

                  r_qss[et] += Sss_nk*r_qk;
                }
              r++;
            }
          }
        // this part has to check for element index validity
        occaUnroll(p_NnodesV)
          for(int et=0;et<p_NnodesV;++et){
            const int e = eo + es + et*p_NblockV;
            if (e<Nelements) {

              dfloat res1 = s_ggeo[et][es][p_G00ID]*r_qrr[et];
              dfloat res2 = s_ggeo[et][es][p_G01ID]*r_qrs[et];
              dfloat res3 = s_ggeo[et][es][p_G11ID]*r_qss[et];

              const int id = n + e*p_Np;
              Aq[id] = res1+res2+res3;
            }
          }
      }
    }
  }
}

kernel void ellipticAxNEWTri2D_v3(
    const int Nelements,
    const int   * restrict elementList,
    const dfloat * restrict ggeo,
    const char4 * restrict rowData,
    const dfloat * restrict Srra,
    const dfloat * restrict Srsa,
    const dfloat * restrict Sssa,
    const dfloat * restrict MM,
    const dfloat lambda,
    const dfloat * restrict q,
    dfloat * restrict Aq){
  // needs p_NnodesV (nodes per thread) and p_NblockV (elements per chunk) defined
  for(int eo=0;eo<Nelements;eo+=p_NnodesV*p_NblockV;outer0){
    //    shared dfloat s_q[p_NnodesV][p_NblockV][p_Np];
    shared dfloat s_ggeo[p_NnodesV][p_NblockV][p_Nggeo];
    //p_NnzTotal is AT MOST p_maxNNZ per row x Np
    //maxNnz per row is bigger than Np only for N=1 and N=2
    // DONT EVEN TRY

    //const char * pt_Indn = (char *) &Indn;
    exclusive char r_rowData[6]; 
    for(int es=0;es<p_NblockV;++es;inner1){
      for(int n=0;n<p_Np;++n;inner0){
        const char4 Indn1 = rowData[0*p_Np+n];
        const char4 Indn2 = rowData[1*p_Np+n];

        //if (es+eo==0){
        //printf("requesting %d and %d, I got %d %d %d %d %d %d \n ", n, p_Np+n, Indn1.x, Indn1.y, Indn1.z, Indn1.w, Indn2.x, Indn2.y);
        //}

        r_rowData[0] =  Indn1.x;
        r_rowData[1] = Indn1.y; 
        r_rowData[2] = Indn1.z;
        r_rowData[3] = Indn1.w; 
        r_rowData[4] = Indn2.x;
        r_rowData[5] = Indn2.y; 


        // coalesced read of ggeo 
        int t = n + p_Np*es;
        while(t<p_NnodesV*p_NblockV*p_Nggeo && eo*p_Nggeo+t<Nelements*p_Nggeo){          
          s_ggeo[0][0][t] = ggeo[eo*p_Nggeo+t];
          t += p_Np*p_NblockV;
        }

        /*occaUnroll(p_NnodesV)
          for(int et=0;et<p_NnodesV;++et){
          const int e = eo + es + et*p_NblockV;
          if(e<Nelements){
          const int id = n + e*p_Np;
          s_q[et][es][n] = q[id];
          } 
          }*/ 
      }   
    } 
    barrier(localMemFence);

    for(int es=0;es<p_NblockV;++es;inner1){
      for(int n=0;n<p_Np;++n;inner0){

        // do this part irrespective of e
        dfloat r_qrr[p_NnodesV];
        dfloat r_qrs[p_NnodesV];
        dfloat r_qss[p_NnodesV];

        occaUnroll(p_NnodesV)
          for(int et=0;et<p_NnodesV;++et){
            r_qrr[et] = 0;
            r_qrs[et] = 0;
            r_qss[et] = 0;
          } 
        //here
        //int numberOfQuadruplets = (r_India[1]-r_India[0])/4;
        //first set
        occaUnroll(3)
          for (int gr = 0; gr<6; gr+=2){
            int r = 0;
            for (int k=(int)r_rowData[gr]; k<(int)r_rowData[gr+1]+1; ++k){
              int idx =  n + r*p_Np;
              //if (es+eo == 0){
              //printf("n = %d GROUP %d (%d %d)  k=%d idx = %d r= %d \n",n, gr/2,r_rowData[gr], r_rowData[gr+1], k, idx, r);
              //}          

              const dfloat Srr_nk = Srra[idx];
              const dfloat Srs_nk = Srsa[idx];
              const dfloat Sss_nk = Sssa[idx];
              occaUnroll(p_NnodesV)
                for(int et=0;et<p_NnodesV;++et){
                  const int e = eo + es + et*p_NblockV;
                  // fetch from shared (for reuse three times)
                  // 6 flops per 8 byte

                  const int id = k-1 + e*p_Np;
                  const dfloat r_qk =q[id]; 
                  //s_q[et][es][k-1];

                  r_qrr[et] += Srr_nk*r_qk;
                  r_qrs[et] += Srs_nk*r_qk;
                  r_qss[et] += Sss_nk*r_qk;
                }
              r++;
            }         
          }

        // this part has to check for element index validity
        occaUnroll(p_NnodesV)
          for(int et=0;et<p_NnodesV;++et){
            const int e = eo + es + et*p_NblockV;
            if (e<Nelements) {

              dfloat res1 = s_ggeo[et][es][p_G00ID]*r_qrr[et];
              dfloat res2 = s_ggeo[et][es][p_G01ID]*r_qrs[et];
              dfloat res3 = s_ggeo[et][es][p_G11ID]*r_qss[et];

              const int id = n + e*p_Np;
              Aq[id] = res1+res2+res3;
            }
          }
      }
    }
  }
}

