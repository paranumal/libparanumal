/*

The MIT License (MIT)

Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

//comb = combined storage
// benefits: less flops but also coalesced 
kernel void ellipticAxTri2Dcomb_v0(
    const int Nelements,
    const int   * restrict elementList,
    const dfloat * restrict ggeo,
    const char  * restrict rowData,
    const dfloat * restrict Srr,
    const dfloat * restrict Srs,
    const dfloat * restrict Sss,
    const dfloat * restrict MM,
    const dfloat lambda,
    const dfloat * restrict q,
    dfloat * restrict Aq){
  // needs p_NnodesV (nodes per thread) and p_NblockV (elements per chunk) defined
  for(int eo=0;eo<Nelements;eo+=p_NnodesV*p_NblockV;outer0){
    shared dfloat s_q[p_NnodesV][p_NblockV][p_Np];
    shared dfloat s_ggeo[p_NnodesV][p_NblockV][p_Nggeo];
    exclusicve int r_rowData[2]; 
    for(int es=0;es<p_NblockV;++es;inner1){
      for(int n=0;n<p_Np;++n;inner0){
        r_rowData[0] = (int) rowData[2*n];
        r_rowData[1] = (int) rowData[2*n+1];


        int t = n + p_Np*es;
        while(t<p_NnodesV*p_NblockV*p_Nggeo && eo*p_Nggeo+t<Nelements*p_Nggeo){          
          s_ggeo[0][0][t] = ggeo[eo*p_Nggeo+t];
          t += p_Np*p_NblockV;
        }

        occaUnroll(p_NnodesV)
          for(int et=0;et<p_NnodesV;++et){
            const int e = eo + es + et*p_NblockV;
            if(e<Nelements){
              //prefetch q
              const int id = n + e*p_Np;
              s_q[et][es][n] = q[id];
            }
          }
      }
    }

    barrier(localMemFence);

    for(int es=0;es<p_NblockV;++es;inner1){
      for(int n=0;n<p_Np;++n;inner0){

        // do this part irrespective of e
        dfloat r_qrr[p_NnodesV];
        dfloat r_qrs[p_NnodesV];
        dfloat r_qss[p_NnodesV];

        occaUnroll(p_NnodesV)
          for(int et=0;et<p_NnodesV;++et){
            r_qrr[et] = 0;
            r_qrs[et] = 0;
            r_qss[et] = 0;
          }

        occaUnroll(p_maxNnzPerRow)
          for (int k=;k<p_maxNnzPerRow;k++) {
            if ((k>=r_rowData[0]) && (k<r_rowData[1])){
              // assume Srr, Srs, Sss are stored as a row-major matrix with maxNnzPerRow rows and Np columns
              const int id = n + k*p_Np;
              // 3 loads from global (probably L1 for NnodesV*6 flops)
              const dfloat Srr_nk = Srr[id];
              const dfloat Srs_nk = Srs[id];
              const dfloat Sss_nk = Sss[id];

              occaUnroll(p_NnodesV)
                for(int et=0;et<p_NnodesV;++et){
                  const int e = eo + es + et*p_NblockV;
                  // fetch from shared (for reuse three times)
                  // 6 flops per 8 bytes
                  const dfloat r_qk = s_q[et][es][idk];

                  r_qrr[et] += Srr_nk*r_qk;
                  r_qrs[et] += Srs_nk*r_qk;
                  r_qss[et] += Sss_nk*r_qk;
                }
            }
            if ((k+1) == r_rowData[1]){
              break;}

          }

        // this part has to check for element index validity
        occaUnroll(p_NnodesV)
          for(int et=0;et<p_NnodesV;++et){
            const int e = eo + es + et*p_NblockV;

            if (e<Nelements) {

              dfloat res1 = s_ggeo[et][es][p_G00ID]*r_qrr[et];
              dfloat res2 = s_ggeo[et][es][p_G01ID]*r_qrs[et];
              dfloat res3 = s_ggeo[et][es][p_G11ID]*r_qss[et];

              const int id = n + e*p_Np;
              Aq[id] = res1+res2+res3;
            }
          }
      }
    }
  }
}

