/*

The MIT License (MIT)

Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/


// hex kernel for screened coulomb potential mat-vec
#define squareThreads                           \
  for(int j=0; j<p_Nq; ++j; inner1)		\
    for(int i=0; i<p_Nq; ++i; inner0)


kernel void ellipticPartialAxQuad2D_Ref0(const dlong Nelements,
					 const dlong elementOffset,
					 const dfloat * restrict ggeo,
					 const dfloat * restrict D,
					 const dfloat   lambda,
					 const dfloat * restrict q,
					 dfloat * restrict Aq){
  
  for(dlong e=0;e<Nelements;++e;outer0){
    
    shared dfloat s_q[p_Nq][p_Nq];
    shared dfloat s_D[p_Nq][p_Nq];
    shared dfloat s_qr[p_Nq][p_Nq];
    shared dfloat s_qs[p_Nq][p_Nq];
    
    exclusive dlong element;
    exclusive dfloat r_Aq;
    
    // prefetch q(:,:,:,e) to shared
    squareThreads{

      element = e+elementOffset;
      
      const dlong base = i + j*p_Nq + element*p_Np; 
      
      s_q[j][i] = q[base];
    
      // fetch D to shared
      s_D[j][i] = D[j*p_Nq+i];
    }
      
    barrier(localMemFence);

    squareThreads{
      
      const dlong base = element*p_Nggeo*p_Np + j*p_Nq + i;
      
      // assumes w*J built into G entries
      const dfloat r_GwJ = ggeo[base+p_GWJID*p_Np];
      
      const dfloat r_G00 = ggeo[base+p_G00ID*p_Np];
      const dfloat r_G01 = ggeo[base+p_G01ID*p_Np];
      
      const dfloat r_G11 = ggeo[base+p_G11ID*p_Np];
      
      dfloat qr = 0.f, qs = 0.f;
      
      occaUnroll(p_Nq)
	for(int n=0; n<p_Nq; ++n){
	  qr += s_D[i][n]*s_q[j][n];
	  qs += s_D[j][n]*s_q[n][i];
	}
      
      r_Aq = r_GwJ*lambda*s_q[j][i];
      
      s_qr[j][i] = r_G00*qr + r_G01*qs;
      s_qs[j][i] = r_G01*qr + r_G11*qs;
    }

    barrier(localMemFence);

    squareThreads{
      dfloat tmpr = 0.f, tmps = 0.f;

      occaUnroll(p_Nq)
        for(int n=0;n<p_Nq;++n) {
          tmpr += s_D[n][i]*s_qr[j][n];
	  tmps += s_D[n][j]*s_qs[n][i];
        }
      
      r_Aq += tmpr;
      r_Aq += tmps;
      
      const dlong base = element*p_Np + j*p_Nq + i;
      Aq[base] = r_Aq;
    }
  }
}


// adding multiple outputs and simd cramming
kernel void ellipticPartialAxQuad2D_Ref1(const dlong Nelements,
					 const dlong elementOffset,
					 const dfloat * restrict ggeo,
					 const dfloat * restrict D,
					 const dfloat   lambda,
					 const dfloat * restrict q,
					 dfloat * restrict Aq){
  
  for(dlong eo=0;eo<Nelements;eo+=p_Ne*p_Nb;outer0){
    
    shared dfloat s_q[p_Ne][p_Nb][p_Nq][p_Nq];
    shared dfloat s_qr[p_Ne][p_Nb][p_Nq][p_Nq];
    shared dfloat s_qs[p_Ne][p_Nb][p_Nq][p_Nq];
    shared dfloat s_D[p_Nq][p_Nq];
    
    exclusive dlong element[p_Ne];
    exclusive dfloat r_Aq[p_Ne];
    
    // prefetch q(:,:,:,e) to shared
    for(int b=0; b<p_Nb; ++b; inner2){
      for(int j=0; j<p_Nq; ++j; inner1){
	for(int i=0; i<p_Nq; ++i; inner0){

	  for(int et=0;et<p_Ne;++et){
	    element[et] = eo + b + p_Nb*et;
	    if(element[et]<Nelements){
	      const dlong base = i + j*p_Nq + (element[et]+elementOffset)*p_Np; 
	      
	      s_q[et][b][j][i] = q[base];
	    }
	  }
	  
	  // fetch D to shared
	  if(b==0)
	    s_D[j][i] = D[j*p_Nq+i];
	}
      }
    }
    
    barrier(localMemFence);

    for(int b=0; b<p_Nb; ++b; inner2){
      for(int j=0; j<p_Nq; ++j; inner1){
	for(int i=0; i<p_Nq; ++i; inner0){

	  dfloat qr[p_Ne], qs[p_Ne];

	  occaUnroll(p_Ne)
	    for(int et=0;et<p_Ne;++et){
	      qr[et] = 0;
	      qs[et] = 0;
	    }
	  
	  occaUnroll(p_Nq)
	    for(int n=0; n<p_Nq; ++n){
	      const dfloat Din = s_D[i][n];
	      const dfloat Djn = s_D[j][n];

	      occaUnroll(p_Ne)
		for(int et=0;et<p_Ne;++et){
		  
		  qr[et] += Din*s_q[et][b][j][n];
		  qs[et] += Djn*s_q[et][b][n][i];
		}
	    }

	  occaUnroll(p_Ne)
	    for(int et=0;et<p_Ne;++et){
	      
	      if(element[et]<Nelements){
		const dlong base = (element[et]+elementOffset)*p_Nggeo*p_Np + j*p_Nq + i;
		
		// assumes w*J built into G entries
		const dfloat r_GwJ = ggeo[base+p_GWJID*p_Np];
		
		const dfloat r_G00 = ggeo[base+p_G00ID*p_Np];
		const dfloat r_G01 = ggeo[base+p_G01ID*p_Np];
		
		const dfloat r_G11 = ggeo[base+p_G11ID*p_Np];

		r_Aq[et] = r_GwJ*lambda*s_q[et][b][j][i];
		
		s_qr[et][b][j][i] = r_G00*qr[et] + r_G01*qs[et];
		s_qs[et][b][j][i] = r_G01*qr[et] + r_G11*qs[et];
	      }
	    }
	}
      }
    }

    barrier(localMemFence);

    for(int b=0; b<p_Nb; ++b; inner2){
      for(int j=0; j<p_Nq; ++j; inner1){
	for(int i=0; i<p_Nq; ++i; inner0){
	    
	  occaUnroll(p_Nq)
	    for(int n=0;n<p_Nq;++n) {
	      
	      const dfloat Dni = s_D[n][i];
	      const dfloat Dnj = s_D[n][j];
	      
	      occaUnroll(p_Ne)
		for(int et=0;et<p_Ne;++et){
		  r_Aq[et] += Dni*s_qr[et][b][j][n];
		  r_Aq[et] += Dnj*s_qs[et][b][n][i];
		}
	    }
	  
	  occaUnroll(p_Ne)
	    for(int et=0;et<p_Ne;++et){
	      if(element[et]<Nelements){
		const dlong base = (element[et]+elementOffset)*p_Np + j*p_Nq + i;
		Aq[base] = r_Aq[et];
	      }
	    }
	}
      }
    }
  }
}

