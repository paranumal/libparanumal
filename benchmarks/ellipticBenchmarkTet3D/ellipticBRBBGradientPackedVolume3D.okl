/*

The MIT License (MIT)

Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

//v0: packed node offsets

typedef struct { unsigned char x,y,z,w;} mychar4;


kernel void ellipticBRBBGradientPackedVolume3D_v0(const int Nelements,
						  const dfloat * restrict vgeo,
						  const int * restrict D0ids,
						  const mychar4 * restrict packedDids,
						  const dfloat * restrict Dvals,
						  const dfloat * restrict q,
						  dfloat * restrict gradq) {
    
  for(int eo=0;eo<Nelements;eo+=p_NblockV*p_Nnodes;outer0) {
    // for all elements
    shared dfloat s_q[p_Nnodes][p_NblockV][p_Np];

    shared  int s_D0[4][p_Np];
    shared  dfloat s_Dvals[4][p_Np];

    shared mychar4 s_packedDids[3][p_Np];
			
    for(int es=0;es<p_NblockV;++es;inner1) {// for all elements in block
      for(int n=0;n<p_Np;++n;inner0) {     // for all nodes in this element
	
	int m = n + es*p_Np;
	while(m<p_Nnodes*p_NblockV*p_Np && m+eo*p_Np<Nelements*p_Np){
	  s_q[0][0][m] = q[m + eo*p_Np];
	  m+=p_NblockV*p_Np;
	}

#if 0
	occaUnroll(p_Nnodes)
	  for (int et=0; et<p_Nnodes; et++) {
	    const int e = eo + es + et*p_NblockV;
	    if(e<Nelements) {
	      s_q[et][es][n]  = q[n + e*p_Np];
	    }
	  }
#endif								
	m=n + es*p_Np;
	while(m<4*p_Np){
	  s_Dvals[0][m] = Dvals[m];
	  s_D0[0][m]    = D0ids[m];
	  m+=p_NblockV*p_Np;
	}

	m=n + es*p_Np;

	while(m<3*p_Np){
	  s_packedDids[0][m] = packedDids[m];
	  m+=p_NblockV*p_Np;
	}
      }
    }
    
    // Make sure all node data is loaded into shared
    barrier(localMemFence);
			
    for(int es=0;es<p_NblockV;++es;inner1) {// for all elements in block
      for(int n=0;n<p_Np;++n;inner0) {     // for all nodes in this element

	// extract sparse derivative matrix once 
	const int D0i1 = s_D0[0][n];
	const int D0i2 = s_D0[1][n];
	const int D0i3 = s_D0[2][n];
	const int D0i4 = s_D0[3][n];
	
	const mychar4 dD1 = s_packedDids[0][n];	
	const mychar4 dD2 = s_packedDids[1][n];
	const mychar4 dD3 = s_packedDids[2][n];

	// reconstruct indices by offsetting D0 indices
	const int D1i1 = (int)dD1.x +  D0i1;
	const int D1i2 = (int)dD1.y +  D0i2;
	const int D1i3 = (int)dD1.z +  D0i3;
	const int D1i4 = (int)dD1.w +  D0i4;
			      	      
	const int D2i1 = (int)dD2.x +  D0i1;
	const int D2i2 = (int)dD2.y +  D0i2;
	const int D2i3 = (int)dD2.z +  D0i3;
	const int D2i4 = (int)dD2.w +  D0i4;
			      	      
	const int D3i1 = (int)dD3.x +  D0i1;
	const int D3i2 = (int)dD3.y +  D0i2;
	const int D3i3 = (int)dD3.z +  D0i3;
	const int D3i4 = (int)dD3.w +  D0i4;
	
	const dfloat Dval1 = s_Dvals[0][n];
	const dfloat Dval2 = s_Dvals[1][n];
	const dfloat Dval3 = s_Dvals[2][n];
	const dfloat Dval4 = s_Dvals[3][n];

	// reuse derivative info for each node
	occaUnroll(p_Nnodes)
	  for (int et=0; et<p_Nnodes; et++) {
	    const int e = eo + es + et*p_NblockV;
	    
	    if(e<Nelements) {
	      
	      // prefetch geometric factors (constant on triangle)
	      const dfloat drdx = vgeo[e*p_Nvgeo + p_RXID];
	      const dfloat drdy = vgeo[e*p_Nvgeo + p_RYID];
	      const dfloat drdz = vgeo[e*p_Nvgeo + p_RZID];
	      const dfloat dsdx = vgeo[e*p_Nvgeo + p_SXID];
	      const dfloat dsdy = vgeo[e*p_Nvgeo + p_SYID];
	      const dfloat dsdz = vgeo[e*p_Nvgeo + p_SZID];
	      const dfloat dtdx = vgeo[e*p_Nvgeo + p_TXID];
	      const dfloat dtdy = vgeo[e*p_Nvgeo + p_TYID];
	      const dfloat dtdz = vgeo[e*p_Nvgeo + p_TZID];
	
	      // four shared loads for 7 flops
	      const dfloat tmp = 
		Dval1*s_q[et][es][D0i1] + 
		Dval2*s_q[et][es][D0i2] + 
		Dval3*s_q[et][es][D0i3] + 
		Dval4*s_q[et][es][D0i4];	      
	      
	      // should also build 0.5 into Dval#
	      const dfloat dqdr = .5f*(Dval1*s_q[et][es][D1i1] +
				       Dval2*s_q[et][es][D1i2] +
				       Dval3*s_q[et][es][D1i3] +
				       Dval4*s_q[et][es][D1i4] - tmp);  // four shared loads for 9 (really 8) flops
	      const dfloat dqds = .5f*(Dval1*s_q[et][es][D2i1] +
				       Dval2*s_q[et][es][D2i2] +
				       Dval3*s_q[et][es][D2i3] +
				       Dval4*s_q[et][es][D2i4] - tmp);
	      const dfloat dqdt = .5f*(Dval1*s_q[et][es][D3i1] + 
				       Dval2*s_q[et][es][D3i2] + 
				       Dval3*s_q[et][es][D3i3] + 
				       Dval4*s_q[et][es][D3i4] - tmp);
	      
	      const int id = e*3*p_Np;
	      gradq[id+       n] = drdx*dqdr + dsdx*dqds + dtdx*dqdt;
	      gradq[id+  p_Np+n] = drdy*dqdr + dsdy*dqds + dtdy*dqdt;
	      gradq[id+2*p_Np+n] = drdz*dqdr + dsdz*dqds + dtdz*dqdt;
	    }
	  }
      }
    }
  }
}





kernel void ellipticBRBBGradientPackedVolume3D_v1(const int Nelements,
						  const dfloat * restrict vgeo,
						  const int * restrict D0ids,
						  const mychar4 * restrict packedDids,
						  const dfloat * restrict Dvals,
						  const dfloat * restrict q,
						  dfloat * restrict gradq) {
    
  for(int eo=0;eo<Nelements;eo+=p_NblockV*p_Nnodes;outer0) {
    // for all elements
    shared dfloat s_q[p_Nnodes][p_NblockV][p_Np];

    for(int es=0;es<p_NblockV;++es;inner1) {// for all elements in block
      for(int n=0;n<p_Np;++n;inner0) {     // for all nodes in this element
	
	int m = n + es*p_Np;
	while(m<p_Nnodes*p_NblockV*p_Np && m+eo*p_Np<Nelements*p_Np){
	  s_q[0][0][m] = q[m + eo*p_Np];
	  m+=p_NblockV*p_Np;
	}

#if 0
	occaUnroll(p_Nnodes)
	  for (int et=0; et<p_Nnodes; et++) {
	    const int e = eo + es + et*p_NblockV;
	    if(e<Nelements) {
	      s_q[et][es][n]  = q[n + e*p_Np];
	    }
	  }
#endif								
      }
    }
    
    // Make sure all node data is loaded into shared
    barrier(localMemFence);
			
    for(int es=0;es<p_NblockV;++es;inner1) {// for all elements in block
      for(int n=0;n<p_Np;++n;inner0) {     // for all nodes in this element

	// extract sparse derivative matrix once 
	const int D0i1 = D0ids[n+0*p_Np];
	const int D0i2 = D0ids[n+1*p_Np];
	const int D0i3 = D0ids[n+2*p_Np];
	const int D0i4 = D0ids[n+3*p_Np];
	
	const mychar4 dD1 = packedDids[n+0*p_Np];	
	const mychar4 dD2 = packedDids[n+1*p_Np];
	const mychar4 dD3 = packedDids[n+2*p_Np];

	// reconstruct indices by offsetting D0 indices
	const int D1i1 = (int)dD1.x +  D0i1;
	const int D1i2 = (int)dD1.y +  D0i2;
	const int D1i3 = (int)dD1.z +  D0i3;
	const int D1i4 = (int)dD1.w +  D0i4;
			      	      
	const int D2i1 = (int)dD2.x +  D0i1;
	const int D2i2 = (int)dD2.y +  D0i2;
	const int D2i3 = (int)dD2.z +  D0i3;
	const int D2i4 = (int)dD2.w +  D0i4;
			      	      
	const int D3i1 = (int)dD3.x +  D0i1;
	const int D3i2 = (int)dD3.y +  D0i2;
	const int D3i3 = (int)dD3.z +  D0i3;
	const int D3i4 = (int)dD3.w +  D0i4;
	
	const dfloat Dval1 = Dvals[n+0*p_Np];
	const dfloat Dval2 = Dvals[n+1*p_Np];
	const dfloat Dval3 = Dvals[n+2*p_Np];
	const dfloat Dval4 = Dvals[n+3*p_Np];

	// reuse derivative info for each node
	occaUnroll(p_Nnodes)
	  for (int et=0; et<p_Nnodes; et++) {
	    const int e = eo + es + et*p_NblockV;
	    
	    if(e<Nelements) {
	      
	      // prefetch geometric factors (constant on triangle)
	      const dfloat drdx = vgeo[e*p_Nvgeo + p_RXID];
	      const dfloat drdy = vgeo[e*p_Nvgeo + p_RYID];
	      const dfloat drdz = vgeo[e*p_Nvgeo + p_RZID];
	      const dfloat dsdx = vgeo[e*p_Nvgeo + p_SXID];
	      const dfloat dsdy = vgeo[e*p_Nvgeo + p_SYID];
	      const dfloat dsdz = vgeo[e*p_Nvgeo + p_SZID];
	      const dfloat dtdx = vgeo[e*p_Nvgeo + p_TXID];
	      const dfloat dtdy = vgeo[e*p_Nvgeo + p_TYID];
	      const dfloat dtdz = vgeo[e*p_Nvgeo + p_TZID];
	
	      // four shared loads for 7 flops
	      const dfloat tmp = 
		Dval1*s_q[et][es][D0i1] + 
		Dval2*s_q[et][es][D0i2] + 
		Dval3*s_q[et][es][D0i3] + 
		Dval4*s_q[et][es][D0i4];	      
	      
	      // should also build 0.5 into Dval#
	      const dfloat dqdr = .5f*(Dval1*s_q[et][es][D1i1] +
				       Dval2*s_q[et][es][D1i2] +
				       Dval3*s_q[et][es][D1i3] +
				       Dval4*s_q[et][es][D1i4] - tmp);  // four shared loads for 9 (really 8) flops
	      const dfloat dqds = .5f*(Dval1*s_q[et][es][D2i1] +
				       Dval2*s_q[et][es][D2i2] +
				       Dval3*s_q[et][es][D2i3] +
				       Dval4*s_q[et][es][D2i4] - tmp);
	      const dfloat dqdt = .5f*(Dval1*s_q[et][es][D3i1] + 
				       Dval2*s_q[et][es][D3i2] + 
				       Dval3*s_q[et][es][D3i3] + 
				       Dval4*s_q[et][es][D3i4] - tmp);
	      
	      const int id = e*3*p_Np;
	      gradq[id+       n] = drdx*dqdr + dsdx*dqds + dtdx*dqdt;
	      gradq[id+  p_Np+n] = drdy*dqdr + dsdy*dqds + dtdy*dqdt;
	      gradq[id+2*p_Np+n] = drdz*dqdr + dsdz*dqds + dtdz*dqdt;
	    }
	  }
      }
    }
  }
}



