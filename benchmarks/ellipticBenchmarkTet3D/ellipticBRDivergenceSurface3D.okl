/*

The MIT License (MIT)

Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

kernel void ellipticBRDivergenceSurface3D_v0(const int Nelements,
         const int   * restrict vmapM,
         const int   * restrict vmapP,
         const dfloat lambda,
         const dfloat tau,
         const dfloat * restrict vgeo,
         const dfloat * restrict sgeo,
         const int   * restrict EToB,
         const dfloat * restrict LIFTT,
         const dfloat * restrict MM,
         const dfloat * restrict q,
         const dfloat * restrict gradq,
         dfloat * restrict Aq){

  // for all elements
  for(int eo=0;eo<Nelements;eo+=p_NblockS;outer0){

    shared dfloat s_flux[p_NblockS][p_Nfp*p_Nfaces];
    shared dfloat s_Aq[p_NblockS][p_Np];

    // for all face nodes of all elements
    for(int es=0;es<p_NblockS;++es;inner1){
      for(int n=0;n<p_maxNodes;++n;inner0){ // maxNodes = max(Nfp*Nfaces,Np)
        const int e = eo + es;
        if(e<Nelements){
          if(n<p_Nfp*p_Nfaces){
            // find face that owns this node
            const int face = n/p_Nfp;
            // load surface geofactors for this face
            const int sid    = p_Nsgeo*(e*p_Nfaces+face);
            const dfloat nx   = sgeo[sid+p_NXID];
            const dfloat ny   = sgeo[sid+p_NYID];
            const dfloat nz   = sgeo[sid+p_NZID];
            const dfloat sJ   = sgeo[sid+p_SJID];
            const dfloat invJ = sgeo[sid+p_IJID];

            // indices of negative and positive traces of face node
            const int id  = e*p_Nfp*p_Nfaces + n;
            const int idM = vmapM[id]%p_Np;
            const int idP = vmapP[id]%p_Np;

            const int eM = vmapM[id]/p_Np;
            const int eP = vmapP[id]/p_Np;

            dfloat  qM  = q[idM+p_Np*eM], qP  = q[idP+p_Np*eP];
            dfloat  qxM = gradq[idM+       3*p_Np*eM], qxP = gradq[idP+       3*p_Np*eP];
            dfloat  qyM = gradq[idM+  p_Np+3*p_Np*eM], qyP = gradq[idP+  p_Np+3*p_Np*eP];
            dfloat  qzM = gradq[idM+2*p_Np+3*p_Np*eM], qzP = gradq[idP+2*p_Np+3*p_Np*eP];

            // apply boundary condition
            const int bc = EToB[face+p_Nfaces*e];
            if(bc>0) {
              ellipticHomogeneousBC3D(bc, qM, qxM, qyM, qzM, qP, qxP, qyP, qzP);
              qP  = 2*qP  - qM;
              qxP = 2*qxP - qxM;
              qyP = 2*qyP - qyM;
              qzP = 2*qzP - qzM;
            }

            const dfloat sc = 0.5f*invJ * sJ ;

            // Central Flux + penalty
            s_flux[es][n]  = sc*(nx*(qxP-qxM)+ny*(qyP-qyM)+nz*(qzP-qzM)+tau*(qP-qM));
          }
        }
      }
    }

    // wait for all flux functions are written to shared
    barrier(localMemFence);

    // for each node in the element
    for(int es=0;es<p_NblockS;++es;inner1){
      for(int n=0;n<p_maxNodes;++n;inner0){
        const int e = eo + es;
        if(e<Nelements){
          if(n<p_Np){
            const int id = e*p_Np;

            dfloat Aqn = Aq[id+n];
            dfloat qn  = q[id+n];

            // Lift
            occaUnroll(p_NfacesNfp)
              for(int m=0;m<p_Nfaces*p_Nfp;++m){
                const dfloat L = LIFTT[n+m*p_Np];
                Aqn += L*s_flux[es][m];
              }

            s_Aq[es][n] = -Aqn+lambda*qn;
          }
        }
      }
    }

    barrier(localMemFence);

    for(int es=0;es<p_NblockS;++es;inner1){
      for(int n=0;n<p_maxNodes;++n;inner0){
        const int e = eo + es;
        if(e<Nelements){
          if(n<p_Np){

            const dfloat J = vgeo[e*p_Nvgeo + p_JID];
            const int id = e*p_Np;

            dfloat MAqn = 0.f;

            // multiply by mass matrix
            occaUnroll(p_Np)
              for(int i=0;i<p_Np;++i){
                MAqn += MM[n+i*p_Np]*s_Aq[es][i];
              }

            Aq[id+n] = J*MAqn;
          }
        }
      }
    }
  }
}

