/*

The MIT License (MIT)

Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

kernel void ellipticBRBBDivergenceVolume3D_v0(const int Nelements,
                                            const dfloat * restrict vgeo,
                                            const int * restrict D0ids,
                                            const int * restrict D1ids,
                                            const int * restrict D2ids,
                                            const int * restrict D3ids,
                                            const dfloat * restrict Dvals,
                                            const dfloat * restrict gradq,
                                            dfloat * restrict Aq){

  for(int eo=0;eo<Nelements;eo+=p_NblockV;outer0){
    // for all elements
    shared dfloat s_qx[p_NblockV][p_Np];
    shared dfloat s_qy[p_NblockV][p_Np];
    shared dfloat s_qz[p_NblockV][p_Np];

    for(int es=0;es<p_NblockV;++es;inner1){// for all elements in block
      for(int n=0;n<p_Np;++n;inner0){     // for all nodes in this element
        const int e = eo+es; // element in block
        if(e<Nelements){
          s_qx[es][n]  = gradq[n +          e*3*p_Np];
          s_qy[es][n]  = gradq[n +   p_Np + e*3*p_Np];
          s_qz[es][n]  = gradq[n + 2*p_Np + e*3*p_Np];
        }
      }
    }

    // Make sure all node data is loaded into shared
    barrier(localMemFence);

    for(int es=0;es<p_NblockV;++es;inner1){// for all elements in block
      for(int n=0;n<p_Np;++n;inner0){     // for all nodes in this element
        const int e = eo+es; // element in block
        if(e<Nelements){
          // prefetch geometric factors (constant on triangle)
          const dfloat drdx = vgeo[e*p_Nvgeo + p_RXID];
          const dfloat drdy = vgeo[e*p_Nvgeo + p_RYID];
          const dfloat drdz = vgeo[e*p_Nvgeo + p_RZID];
          const dfloat dsdx = vgeo[e*p_Nvgeo + p_SXID];
          const dfloat dsdy = vgeo[e*p_Nvgeo + p_SYID];
          const dfloat dsdz = vgeo[e*p_Nvgeo + p_SZID];
          const dfloat dtdx = vgeo[e*p_Nvgeo + p_TXID];
          const dfloat dtdy = vgeo[e*p_Nvgeo + p_TYID];
          const dfloat dtdz = vgeo[e*p_Nvgeo + p_TZID];

          // compute 'r', 's',  and 't' derivatives of (q_m) at node n
          const int D0i1 = D0ids[n];
          const int D1i1 = D1ids[n];
          const int D2i1 = D2ids[n];
          const int D3i1 = D3ids[n];
          const dfloat Dval1 = Dvals[n];
          
          const int D0i2 = D0ids[n+p_Np];
          const int D1i2 = D1ids[n+p_Np];
          const int D2i2 = D2ids[n+p_Np];
          const int D3i2 = D3ids[n+p_Np];
          const dfloat Dval2 = Dvals[n+p_Np];

          const int D0i3 = D0ids[n+2*p_Np];
          const int D1i3 = D1ids[n+2*p_Np];
          const int D2i3 = D2ids[n+2*p_Np];
          const int D3i3 = D3ids[n+2*p_Np];    
          const dfloat Dval3 = Dvals[n+2*p_Np];

          const int D0i4 = D0ids[n+3*p_Np];
          const int D1i4 = D1ids[n+3*p_Np];
          const int D2i4 = D2ids[n+3*p_Np];
          const int D3i4 = D3ids[n+3*p_Np];    
          const dfloat Dval4 = Dvals[n+3*p_Np];

          const dfloat dqxdr = .5f*(Dval1*(s_qx[es][D1i1] - s_qx[es][D0i1]) +
                                    Dval2*(s_qx[es][D1i2] - s_qx[es][D0i2]) +
                                    Dval3*(s_qx[es][D1i3] - s_qx[es][D0i3]) +
                                    Dval4*(s_qx[es][D1i4] - s_qx[es][D0i4]));
          const dfloat dqxds = .5f*(Dval1*(s_qx[es][D2i1] - s_qx[es][D0i1]) +
                                    Dval2*(s_qx[es][D2i2] - s_qx[es][D0i2]) +
                                    Dval3*(s_qx[es][D2i3] - s_qx[es][D0i3]) +
                                    Dval4*(s_qx[es][D2i4] - s_qx[es][D0i4]));
          const dfloat dqxdt = .5f*(Dval1*(s_qx[es][D3i1] - s_qx[es][D0i1]) +
                                    Dval2*(s_qx[es][D3i2] - s_qx[es][D0i2]) +
                                    Dval3*(s_qx[es][D3i3] - s_qx[es][D0i3]) +
                                    Dval4*(s_qx[es][D3i4] - s_qx[es][D0i4]));
          
          const dfloat dqydr = .5f*(Dval1*(s_qy[es][D1i1] - s_qy[es][D0i1]) +
                                    Dval2*(s_qy[es][D1i2] - s_qy[es][D0i2]) +
                                    Dval3*(s_qy[es][D1i3] - s_qy[es][D0i3]) +
                                    Dval4*(s_qy[es][D1i4] - s_qy[es][D0i4]));
          const dfloat dqyds = .5f*(Dval1*(s_qy[es][D2i1] - s_qy[es][D0i1]) +
                                    Dval2*(s_qy[es][D2i2] - s_qy[es][D0i2]) +
                                    Dval3*(s_qy[es][D2i3] - s_qy[es][D0i3]) +
                                    Dval4*(s_qy[es][D2i4] - s_qy[es][D0i4]));
          const dfloat dqydt = .5f*(Dval1*(s_qy[es][D3i1] - s_qy[es][D0i1]) +
                                    Dval2*(s_qy[es][D3i2] - s_qy[es][D0i2]) +
                                    Dval3*(s_qy[es][D3i3] - s_qy[es][D0i3]) +
                                    Dval4*(s_qy[es][D3i4] - s_qy[es][D0i4]));

          const dfloat dqzdr = .5f*(Dval1*(s_qz[es][D1i1] - s_qz[es][D0i1]) +
                                    Dval2*(s_qz[es][D1i2] - s_qz[es][D0i2]) +
                                    Dval3*(s_qz[es][D1i3] - s_qz[es][D0i3]) +
                                    Dval4*(s_qz[es][D1i4] - s_qz[es][D0i4]));
          const dfloat dqzds = .5f*(Dval1*(s_qz[es][D2i1] - s_qz[es][D0i1]) +
                                    Dval2*(s_qz[es][D2i2] - s_qz[es][D0i2]) +
                                    Dval3*(s_qz[es][D2i3] - s_qz[es][D0i3]) +
                                    Dval4*(s_qz[es][D2i4] - s_qz[es][D0i4]));
          const dfloat dqzdt = .5f*(Dval1*(s_qz[es][D3i1] - s_qz[es][D0i1]) +
                                    Dval2*(s_qz[es][D3i2] - s_qz[es][D0i2]) +
                                    Dval3*(s_qz[es][D3i3] - s_qz[es][D0i3]) +
                                    Dval4*(s_qz[es][D3i4] - s_qz[es][D0i4]));

          const int id = e*p_Np;
          Aq[id+n]  = drdx*dqxdr + dsdx*dqxds + dtdx*dqxdt 
                    + drdy*dqydr + dsdy*dqyds + dtdy*dqydt
                    + drdz*dqzdr + dsdz*dqzds + dtdz*dqzdt;
        }
      }
    }
  }
}