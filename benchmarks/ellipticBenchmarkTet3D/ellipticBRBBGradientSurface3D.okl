/*

The MIT License (MIT)

Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/


kernel void ellipticBRBBGradientSurface3D_v0(const int Nelements,
                                           const int   * restrict vmapM,
                                           const int   * restrict vmapP,
                                           const dfloat * restrict sgeo,
                                           const int   * restrict EToB,
                                           const int   * restrict L0ids,
                                           const dfloat * restrict L0vals,  
                                           const int   * restrict ELids,
                                           const dfloat * restrict ELvals,  
                                           const dfloat * restrict q,
                                           dfloat * restrict gradq){

  // for all elements
  for(int eo=0;eo<Nelements;eo+=p_NblockS;outer0){

    shared dfloat s_fluxqx[p_NblockS][p_Nfp*p_Nfaces];
    shared dfloat s_fluxqy[p_NblockS][p_Nfp*p_Nfaces];
    shared dfloat s_fluxqz[p_NblockS][p_Nfp*p_Nfaces];

    exclusive dfloat r_fluxqx;
    exclusive dfloat r_fluxqy;
    exclusive dfloat r_fluxqz;    

    // for all face nodes of all elements
    for(int es=0;es<p_NblockS;++es;inner1){
      for(int n=0;n<p_maxNodes;++n;inner0){ // maxNodes = max(Nfp*Nfaces,Np)
        const int e = eo + es;
        if(e<Nelements){
          if(n<p_Nfp*p_Nfaces){
            // find face that owns this node
            const int face = n/p_Nfp;
            // load surface geofactors for this face
            const int sid    = p_Nsgeo*(e*p_Nfaces+face);
            const dfloat nx   = sgeo[sid+p_NXID];
            const dfloat ny   = sgeo[sid+p_NYID];
            const dfloat nz   = sgeo[sid+p_NZID];
            const dfloat sJ   = sgeo[sid+p_SJID];
            const dfloat invJ = sgeo[sid+p_IJID];

            // indices of negative and positive traces of face node
            const int id  = e*p_Nfp*p_Nfaces + n;
            const int idM = vmapM[id];
            const int idP = vmapP[id];

            dfloat  qM = q[idM], qP = q[idP];

            // apply boundary condition
            const int bc = EToB[face+p_Nfaces*e];
            if(bc>0) {
              dfloat qxM = 0.f, qyM = 0.f, qzM = 0.f;
              dfloat qxP = 0.f, qyP = 0.f, qzP = 0.f;
              ellipticHomogeneousBC3D(bc, qM, qxM, qyM, qzM, qP, qxP, qyP, qzP);
              qP = 2*qP - qM;
            }

            // evaluate "flux" terms: LLF
            const dfloat sc = .5f*invJ * sJ ;

            // Centered flux for pr p*-p = 0.5(PP-PM) // Central Flux
            s_fluxqx[es][n]  = sc*nx*(qP-qM);
            s_fluxqy[es][n]  = sc*ny*(qP-qM);
            s_fluxqz[es][n]  = sc*nz*(qP-qM);
          }
        }
      }
    }

    // wait for all flux functions are written to shared
    barrier(localMemFence);

    // apply L0 to fluxes. use sparse format
    for(int es=0;es<p_NblockS;++es;inner1){
      for(int n=0;n<p_maxNodes;++n;inner0){
        const int e = eo + es;
        if(e<Nelements){
          if(n<p_Nfp*p_Nfaces){
            const int id = n%p_Nfp;  // warning: redundant reads
            const int f  = n/p_Nfp;

            r_fluxqx = 0.f;
            r_fluxqy = 0.f;
            r_fluxqz = 0.f;

            // sparse application of L0
            occaUnroll(7)
            for (int m = 0; m < 7; ++m){
              const int   L0id  = L0ids [id + p_Nfp*m];
              const dfloat L0val = L0vals[id + p_Nfp*m];
              
              r_fluxqx += L0val * s_fluxqx[es][L0id+f*p_Nfp];
              r_fluxqy += L0val * s_fluxqy[es][L0id+f*p_Nfp];
              r_fluxqz += L0val * s_fluxqz[es][L0id+f*p_Nfp];
            }
          }
        }
      }
    }

    barrier(localMemFence);

    //write back to shared 
    for(int es=0;es<p_NblockS;++es;inner1){
      for(int n=0;n<p_maxNodes;++n;inner0){
        if(n<p_Nfp*p_Nfaces){
          s_fluxqx[es][n] = r_fluxqx;
          s_fluxqy[es][n] = r_fluxqy;
          s_fluxqz[es][n] = r_fluxqz;
        }
      }
    }

    barrier(localMemFence);

    // apply lift reduction and accumulate RHS
    for(int es=0;es<p_NblockS;++es;inner1){
      for(int n=0;n<p_maxNodes;++n;inner0){
        const int e = eo + es;
        if(e<Nelements){
          if(n<p_Np){
            const int id = e*3*p_Np;

            dfloat qx  = gradq[id+       n];
            dfloat qy  = gradq[id+  p_Np+n];
            dfloat qz  = gradq[id+2*p_Np+n];

            // rhs += LIFT*((sJ/J)*(A*nx+B*ny)*(q^* - q^-))
            occaUnroll(p_max_EL_nnz)
            for (int m = 0; m < p_max_EL_nnz; ++m){
              const int id = n + m*p_Np;
              const dfloat ELval = ELvals[id];
              const int   ELid  = ELids [id];
              qx += ELval * s_fluxqx[es][ELid];
              qy += ELval * s_fluxqy[es][ELid];
              qz += ELval * s_fluxqz[es][ELid];
            }
            
            // store incremented rhs
            gradq[id+       n] = qx;
            gradq[id+  p_Np+n] = qy;
            gradq[id+2*p_Np+n] = qz;
          }
        }
      }
    }
  }
}



